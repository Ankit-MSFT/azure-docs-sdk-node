### YamlMime:TSType
name: ServiceBusService
uid: azure-sb.ServiceBusService
package: azure-sb
fullName: azure-sb.ServiceBusService
summary: >-
  The ServiceBusServices allows you to work with Microsoft Azure Service Bus.

  Service Bus provides both queues for sending and receiving messages, as well
  as push notifications for mobile devices.


  Service Bus queues provide both standard message queue functionality as well
  as publish/subscribe functioanlity.

  For more information on Service Bus queues, as well as task focused
  information on using them from Node.js applications, see

  [How to Use Service Bus
  Queues](https://www.windowsazure.com/en-us/develop/nodejs/how-to-guides/service-bus-queues/)

  and [How to Use Service Bus
  Topics/Subscriptions](https://www.windowsazure.com/en-us/develop/nodejs/how-to-guides/service-bus-topics/).


  Service Bus provides push notifications through the Notification Hub.

  While the ServiceBusService can be used to manage Notification Hubs, you must
  use

  the <xref:azure-sb.NotificationHubService> to send messages to mobile devices.
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      ServiceBusService(configOrNamespaceOrConnectionString, accessKey, issuer,
      acsNamespace, host, authenticationProvider)
    uid: azure-sb.ServiceBusService.constructor
    package: azure-sb
    fullName: >-
      azure-sb.ServiceBusService.ServiceBusService(configOrNamespaceOrConnectionString,
      accessKey, issuer, acsNamespace, host, authenticationProvider)
    summary: >-
      Creates a new ServiceBusService object.


      The azure module will read the environment variables
      AZURE_SERVICEBUS_NAMESPACE and AZURE_SERVICEBUS_ACCESS_KEY

      for information required to connect to your Microsoft Azure Service Bus.

      If these environment variables are not set, you must specify the account
      information

      when creating a ServiceBusService object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new ServiceBusService(configOrNamespaceOrConnectionString, accessKey,
        issuer, acsNamespace, host, authenticationProvider)
      parameters:
        - id: configOrNamespaceOrConnectionString
          type: string
          description: The service bus namespace or the connection string.
        - id: accessKey
          type: string
          description: The password. Only necessary if no connection string passed.
        - id: issuer
          type: string
          description: The issuer.
        - id: acsNamespace
          type: string
          description: >-
            The acs namespace. Usually the same as the sb namespace with "-sb"
            suffix.
        - id: host
          type: string
          description: The host address.
        - id: authenticationProvider
          type: object
          description: The authentication provider.
methods:
  - name: 'receiveQueueMessage(queuePath, options, callback)'
    uid: azure-sb.ServiceBusService#receiveQueueMessage
    package: azure-sb
    summary: Receives a queue message.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function receiveQueueMessage(queuePath, options, callback)'
      parameters:
        - id: queuePath
          type: string
          description: >-
            A string object that represents the name of the queue to which the
            message will be sent.
        - id: options
          type: object
          description: |-
            The request options.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>isPeekLock</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Boolean value indicating if the message should be peeked or received.</td>
                </tr> <tr>
                <td>timeoutIntervalInS</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>The timeout interval, in seconds, to use for the request.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                            if an error occurs; otherwise `receivequeuemessageresult` will contain
                                                                                            the message result information.
                                                                                            `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'receiveSubscriptionMessage(topicPath, subscriptionPath, options, callback)'
    uid: azure-sb.ServiceBusService#receiveSubscriptionMessage
    package: azure-sb
    summary: Receives a subscription message.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function receiveSubscriptionMessage(topicPath, subscriptionPath,
        options, callback)
      parameters:
        - id: topicPath
          type: string
          description: A string object that represents the name of the topic to receive.
        - id: subscriptionPath
          type: string
          description: >-
            A string object that represents the name of the subscription from
            the message will be received.
        - id: options
          type: object
          description: |-
            The request options.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>isPeekLock</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Boolean value indicating if the message should be peeked or received.</td>
                </tr> <tr>
                <td>timeoutIntervalInS</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>The timeout interval, in seconds, to use for the request.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                            if an error occurs; otherwise `receivetopicmessageresult` will contain
                                                                                            the message result information.
                                                                                            `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'deleteMessage(message, callback)'
    uid: azure-sb.ServiceBusService#deleteMessage
    package: azure-sb
    summary: Deletes a message.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteMessage(message, callback)'
      parameters:
        - id: message
          type: object
          description: The message object or a string with the message location.
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                  if an error occurs; otherwise `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'unlockMessage(message, callback)'
    uid: azure-sb.ServiceBusService#unlockMessage
    package: azure-sb
    summary: Unlocks a message.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function unlockMessage(message, callback)'
      parameters:
        - id: message
          type: object
          description: The message object or a string with the message location.
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                if an error occurs; otherwise `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'renewLockForMessage(message, callback)'
    uid: azure-sb.ServiceBusService#renewLockForMessage
    package: azure-sb
    summary: Renew-lock for message.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function renewLockForMessage(message, callback)'
      parameters:
        - id: message
          type: object
          description: The message object or a string with the message location.
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                if an error occurs; otherwise `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'sendQueueMessage(queuePath, message, callback)'
    uid: azure-sb.ServiceBusService#sendQueueMessage
    package: azure-sb
    summary: Sends a queue message.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function sendQueueMessage(queuePath, message, callback)'
      parameters:
        - id: queuePath
          type: string
          description: >-
            A string object that represents the name of the queue to which the
            message will be sent.
        - id: message
          type: object
          description: |-
            A message object that represents the message to send.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>body</td>
                <td></td>
                <td>string</td>
                <td>The message's text.</td>
                </tr> <tr>
                <td>customProperties</td>
                <td></td>
                <td>object</td>
                <td>The message's custom properties.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's correlation identifier.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The session identifier.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's identifier.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's label.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's reply to.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's time to live.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's to.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's scheduled enqueue time in UTC.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's reply to session identifier.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                            if an error occurs; otherwise `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'sendTopicMessage(topicPath, message, callback)'
    uid: azure-sb.ServiceBusService#sendTopicMessage
    package: azure-sb
    summary: Sends a topic message.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function sendTopicMessage(topicPath, message, callback)'
      parameters:
        - id: topicPath
          type: string
          description: >-
            A string object that represents the name of the topic to which the
            message will be sent.
        - id: message
          type: object
          description: |-
            A message object that represents the message to send.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>body</td>
                <td></td>
                <td>string</td>
                <td>The message's text.</td>
                </tr> <tr>
                <td>customProperties</td>
                <td></td>
                <td>object</td>
                <td>The message's custom properties.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's correlation identifier.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The session identifier.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's identifier.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's label.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's reply to.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's time to live.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's to.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's scheduled enqueue time in UTC.</td>
                </tr> <tr>
                <td>brokerProperties</td>
                <td></td>
                <td>string</td>
                <td>The message's reply to session identifier.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                              if an error occurs; otherwise `receivetopicmessageresult` will contain
                                                                                              the message result information.
                                                                                              `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'createQueue(queuePath, options, callback)'
    uid: azure-sb.ServiceBusService#createQueue
    package: azure-sb
    summary: Creates a queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createQueue(queuePath, options, callback)'
      parameters:
        - id: queuePath
          type: string
          description: A string object that represents the name of the queue to create.
        - id: options
          type: object
          description: |-
            The request options.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>MaxSizeInMegaBytes</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>Specifies the maximum queue size in megabytes. Any attempt to enqueue a message that will cause the queue to exceed this value will fail.</td>
                </tr> <tr>
                <td>DefaultMessageTimeToLive</td>
                <td></td>
                <td>azure-sb.PTnHnMnS</td>
                <td>Depending on whether DeadLettering is enabled, a message is automatically moved to the DeadLetterQueue or deleted if it has been stored in the queue for longer than the specified time. This value is overwritten by a TTL specified on the message if and only if the message TTL is smaller than the TTL set on the queue. This value is immutable after the Queue has been created.</td>
                </tr> <tr>
                <td>LockDuration</td>
                <td></td>
                <td>azure-sb.PTnHnMnS</td>
                <td>Determines the amount of time in seconds in which a message should be locked for processing by a receiver. After this period, the message is unlocked and available for consumption by the next receiver. Settable only at queue creation time.</td>
                </tr> <tr>
                <td>RequiresSession</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Settable only at queue creation time. If set to true, the queue will be session-aware and only SessionReceiver will be supported. Session-aware queues are not supported through REST.</td>
                </tr> <tr>
                <td>RequiresDuplicateDetection</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Settable only at queue creation time.</td>
                </tr> <tr>
                <td>DeadLetteringOnMessageExpiration</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>This field controls how the Service Bus handles a message whose TTL has expired. If it is enabled and a message expires, the Service Bus moves the message from the queue into the queue’s dead-letter sub-queue. If disabled, message will be permanently deleted from the queue. Settable only at queue creation time.</td>
                </tr> <tr>
                <td>DuplicateDetectionHistoryTimeWindow</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Specifies the time span during which the Service Bus detects message duplication.</td>
                </tr> <tr>
                <td>EnablePartitioning</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Specifies whether the queue should be partitioned.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                              if an error occurs; otherwise `createqueueresult` will contain
                                                                                              the new queue information.
                                                                                              `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'createQueueIfNotExists(queuePath, options, callback)'
    uid: azure-sb.ServiceBusService#createQueueIfNotExists
    package: azure-sb
    summary: Creates a queue if it doesn't already exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createQueueIfNotExists(queuePath, options, callback)'
      parameters:
        - id: queuePath
          type: string
          description: A string object that represents the name of the queue to delete.
        - id: options
          type: object
          description: |-
            The request options.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>MaxSizeInMegaBytes</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>Specifies the maximum queue size in megabytes. Any attempt to enqueue a message that will cause the queue to exceed this value will fail.</td>
                </tr> <tr>
                <td>DefaultMessageTimeToLive</td>
                <td></td>
                <td>azure-sb.PTnHnMnS</td>
                <td>Depending on whether DeadLettering is enabled, a message is automatically moved to the DeadLetterQueue or deleted if it has been stored in the queue for longer than the specified time. This value is overwritten by a TTL specified on the message if and only if the message TTL is smaller than the TTL set on the queue. This value is immutable after the Queue has been created.</td>
                </tr> <tr>
                <td>LockDuration</td>
                <td></td>
                <td>azure-sb.PTnHnMnS</td>
                <td>Determines the amount of time in seconds in which a message should be locked for processing by a receiver. After this period, the message is unlocked and available for consumption by the next receiver. Settable only at queue creation time.</td>
                </tr> <tr>
                <td>RequiresSession</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Settable only at queue creation time. If set to true, the queue will be session-aware and only SessionReceiver will be supported. Session-aware queues are not supported through REST.</td>
                </tr> <tr>
                <td>RequiresDuplicateDetection</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Settable only at queue creation time.</td>
                </tr> <tr>
                <td>DeadLetteringOnMessageExpiration</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>This field controls how the Service Bus handles a message whose TTL has expired. If it is enabled and a message expires, the Service Bus moves the message from the queue into the queue’s dead-letter sub-queue. If disabled, message will be permanently deleted from the queue. Settable only at queue creation time.</td>
                </tr> <tr>
                <td>DuplicateDetectionHistoryTimeWindow</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Specifies the time span during which the Service Bus detects message duplication.</td>
                </tr> <tr>
                <td>EnablePartitioning</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Specifies whether the queue should be partitioned.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                              if an error occurs; otherwise `queueCreated` will contain
                                                                                              the new queue information.
                                                                                              `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'deleteQueue(queuePath, callback)'
    uid: azure-sb.ServiceBusService#deleteQueue
    package: azure-sb
    summary: Deletes a queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteQueue(queuePath, callback)'
      parameters:
        - id: queuePath
          type: string
          description: A string object that represents the name of the queue to delete.
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                 if an error occurs; otherwise `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: formatDeadLetterPath(queuePath)
    uid: azure-sb.ServiceBusService#formatDeadLetterPath
    package: azure-sb
    summary: Formats a queue path to point towards its dead letter queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function formatDeadLetterPath(queuePath)
      parameters:
        - id: queuePath
          type: string
          description: >-
            A string object that represents the name of the queue whose dead
            letter path you want.
      return:
        type: string
        description: The path to the queue's dead letter queue
  - name: 'getQueue(queuePath, callback)'
    uid: azure-sb.ServiceBusService#getQueue
    package: azure-sb
    summary: Retrieves a queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getQueue(queuePath, callback)'
      parameters:
        - id: queuePath
          type: string
          description: A string object that represents the name of the queue to retrieve.
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                              if an error occurs; otherwise `queueresult` will contain
                                                                                              the queue information.
                                                                                              `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'listQueues(options, callback)'
    uid: azure-sb.ServiceBusService#listQueues
    package: azure-sb
    summary: Returns a list of queues.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listQueues(options, callback)'
      parameters:
        - id: options
          type: object
          description: |-
            The request options.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>top</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>The top clause for listing queues.</td>
                </tr> <tr>
                <td>skip</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>The skip clause for listing queues.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                  if an error occurs; otherwise `listqueueresult` will contain
                                                                                  the list of queues.
                                                                                  `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'createTopic(topic, options, callback)'
    uid: azure-sb.ServiceBusService#createTopic
    package: azure-sb
    summary: Creates a topic.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createTopic(topic, options, callback)'
      parameters:
        - id: topic
          type: azure-sb.TopicInfo
          description: A Topic object that represents the topic to create.
        - id: options
          type: object
          description: |-
            The request options.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>MaxSizeInMegabytes</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>Specifies the maximum topic size in megabytes. Any attempt to enqueue a message that will cause the topic to exceed this value will fail. All messages that are stored in the topic or any of its subscriptions count towards this value. Multiple copies of a message that reside in one or multiple subscriptions count as a single messages. For example, if message m exists once in subscription s1 and twice in subscription s2, m is counted as a single message.</td>
                </tr> <tr>
                <td>DefaultMessageTimeToLive</td>
                <td></td>
                <td>azure-sb.PTnHnMnS</td>
                <td>Determines how long a message lives in the associated subscriptions. Subscriptions inherit the TTL from the topic unless they are created explicitly with a smaller TTL. Based on whether dead-lettering is enabled, a message whose TTL has expired will either be moved to the subscription’s associated DeadLtterQueue or will be permanently deleted.</td>
                </tr> <tr>
                <td>RequiresDuplicateDetection</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>If enabled, the topic will detect duplicate messages within the time span specified by the DuplicateDetectionHistoryTimeWindow property. Settable only at topic creation time.</td>
                </tr> <tr>
                <td>DuplicateDetectionHistoryTimeWindow</td>
                <td></td>
                <td>azure-sb.PTnHnMnS</td>
                <td>Specifies the time span during which the Service Bus will detect message duplication.</td>
                </tr> <tr>
                <td>EnableBatchedOperations</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Specifies if batched operations should be allowed.</td>
                </tr> <tr>
                <td>SizeInBytes</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>Specifies the topic size in bytes.</td>
                </tr> <tr>
                <td>SupportOrdering</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Specifies whether the topic supports message ordering.</td>
                </tr> <tr>
                <td>EnablePartitioning</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Specifies whether the topic should be partitioned</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                                    if an error occurs; otherwise `createtopicresult` will contain
                                                                                                    the new topic information.
                                                                                                    `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'createTopicIfNotExists(topic, options, callback)'
    uid: azure-sb.ServiceBusService#createTopicIfNotExists
    package: azure-sb
    summary: Creates a topic if it doesn't exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createTopicIfNotExists(topic, options, callback)'
      parameters:
        - id: topic
          type: azure-sb.TopicInfo
          description: A Topic object that represents the topic to create.
        - id: options
          type: object
          description: |-
            The request options.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>MaxSizeInMegabytes</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>Specifies the maximum topic size in megabytes. Any attempt to enqueue a message that will cause the topic to exceed this value will fail. All messages that are stored in the topic or any of its subscriptions count towards this value. Multiple copies of a message that reside in one or multiple subscriptions count as a single messages. For example, if message m exists once in subscription s1 and twice in subscription s2, m is counted as a single message.</td>
                </tr> <tr>
                <td>DefaultMessageTimeToLive</td>
                <td></td>
                <td>azure-sb.PTnHnMnS</td>
                <td>Determines how long a message lives in the associated subscriptions. Subscriptions inherit the TTL from the topic unless they are created explicitly with a smaller TTL. Based on whether dead-lettering is enabled, a message whose TTL has expired will either be moved to the subscription’s associated DeadLtterQueue or will be permanently deleted.</td>
                </tr> <tr>
                <td>RequiresDuplicateDetection</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>If enabled, the topic will detect duplicate messages within the time span specified by the DuplicateDetectionHistoryTimeWindow property. Settable only at topic creation time.</td>
                </tr> <tr>
                <td>DuplicateDetectionHistoryTimeWindow</td>
                <td></td>
                <td>azure-sb.PTnHnMnS</td>
                <td>Specifies the time span during which the Service Bus will detect message duplication.</td>
                </tr> <tr>
                <td>MaxSubscriptionsPerTopic</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>Specifies the maximum number of subscriptions that can be associated with the topic.</td>
                </tr> <tr>
                <td>MaxSqlFiltersPerTopic</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>Specifies the maximum number of SQL filter expressions (in total) that can be added to the subscriptions associated with the topic.</td>
                </tr> <tr>
                <td>MaxCorrelationFiltersPerTopic</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>Specifies the maximum number of correlation filter expressions (in total) that can be added to the subscriptions associated with the topic.</td>
                </tr> <tr>
                <td>EnableDeadLetteringOnMessageExpiration</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Settable only at topic creation time.</td>
                </tr> <tr>
                <td>EnableDeadLetteringOnFilterEvaluationExceptions</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Settable only at topic creation time.</td>
                </tr> <tr>
                <td>SupportOrdering</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Specifies whether the topic supports message ordering.</td>
                </tr> <tr>
                <td>EnablePartitioning</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Specifies whether the topic should be partitioned</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                                    if an error occurs; otherwise `topicCreated` will contain
                                                                                                    the new topic information.
                                                                                                    `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'deleteTopic(topicPath, callback)'
    uid: azure-sb.ServiceBusService#deleteTopic
    package: azure-sb
    summary: Deletes a topic.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteTopic(topicPath, callback)'
      parameters:
        - id: topicPath
          type: string
          description: >-
            A <code>String</code> object that represents the name of the queue
            to delete.
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                if an error occurs; otherwise `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'getTopic(topicPath, callback)'
    uid: azure-sb.ServiceBusService#getTopic
    package: azure-sb
    summary: Retrieves a topic.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTopic(topicPath, callback)'
      parameters:
        - id: topicPath
          type: string
          description: >-
            A <code>String</code> object that represents the name of the topic
            to retrieve.
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                             if an error occurs; otherwise `gettopicresult` will contain
                                                                             the topic information.
                                                                             `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'listTopics(options, callback)'
    uid: azure-sb.ServiceBusService#listTopics
    package: azure-sb
    summary: Returns a list of topics.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listTopics(options, callback)'
      parameters:
        - id: options
          type: object
          description: |-
            The request options.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>top</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>The number of topics to fetch.</td>
                </tr> <tr>
                <td>skip</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>The number of topics to skip.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                  if an error occurs; otherwise `listtopicsresult` will contain
                                                                                  the list of topics.
                                                                                  `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'createSubscription(topicPath, subscriptionPath, options, callback)'
    uid: azure-sb.ServiceBusService#createSubscription
    package: azure-sb
    summary: Creates a subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createSubscription(topicPath, subscriptionPath, options,
        callback)
      parameters:
        - id: topicPath
          type: string
          description: >-
            A string object that represents the name of the topic for the
            subscription.
        - id: subscriptionPath
          type: string
          description: A string object that represents the name of the subscription.
        - id: options
          type: object
          description: |-
            The request options.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>LockDuration</td>
                <td></td>
                <td>azure-sb.PTnHnMnS</td>
                <td>The default lock duration is applied to subscriptions that do not define a lock duration. Settable only at subscription creation time.</td>
                </tr> <tr>
                <td>RequiresSession</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Settable only at subscription creation time. If set to true, the subscription will be session-aware and only SessionReceiver will be supported. Session-aware subscription are not supported through REST.</td>
                </tr> <tr>
                <td>DefaultMessageTimeToLive</td>
                <td></td>
                <td>azure-sb.PTnHnMnS</td>
                <td>Determines how long a message lives in the subscription. Based on whether dead-lettering is enabled, a message whose TTL has expired will either be moved to the subscription’s associated DeadLtterQueue or permanently deleted.</td>
                </tr> <tr>
                <td>EnableDeadLetteringOnMessageExpiration</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>This field controls how the Service Bus handles a message whose TTL has expired. If it is enabled and a message expires, the Service Bus moves the message from the queue into the subscription’s dead-letter sub-queue. If disabled, message will be permanently deleted from the subscription’s main queue. Settable only at subscription creation time.</td>
                </tr> <tr>
                <td>EnableDeadLetteringOnFilterEvaluationExceptions</td>
                <td></td>
                <td>azure-sb.bool</td>
                <td>Determines how the Service Bus handles a message that causes an exception during a subscription’s filter evaluation. If the value is set to true, the message that caused the exception will be moved to the subscription’s dead-letter queue. Otherwise, it will be discarded. By default this parameter is set to true, allowing the user a chance to investigate the cause of the exception. It can occur from a malformed message or some incorrect assumptions being made in the filter about the form of the message. Settable only at topic creation time.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                              if an error occurs; otherwise `createsubscriptionresult` will contain
                                                                                              the new subscription information.
                                                                                              `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'deleteSubscription(topicPath, subscriptionPath, callback)'
    uid: azure-sb.ServiceBusService#deleteSubscription
    package: azure-sb
    summary: Deletes a subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteSubscription(topicPath, subscriptionPath, callback)'
      parameters:
        - id: topicPath
          type: string
          description: >-
            A string object that represents the name of the topic for the
            subscription.
        - id: subscriptionPath
          type: string
          description: >-
            A string object that represents the name of the subscription to
            delete.
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                if an error occurs; otherwise `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'getSubscription(topicPath, subscriptionPath, callback)'
    uid: azure-sb.ServiceBusService#getSubscription
    package: azure-sb
    summary: Retrieves a subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getSubscription(topicPath, subscriptionPath, callback)'
      parameters:
        - id: topicPath
          type: string
          description: >-
            A string object that represents the name of the topic for the
            subscription.
        - id: subscriptionPath
          type: string
          description: >-
            A string object that represents the name of the subscription to
            retrieve.
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                            if an error occurs; otherwise `getsubscriptionresult` will contain
                                                                                            the subscription information.
                                                                                            `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'listSubscriptions(topicPath, options, callback)'
    uid: azure-sb.ServiceBusService#listSubscriptions
    package: azure-sb
    summary: Returns a list of subscriptions.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listSubscriptions(topicPath, options, callback)'
      parameters:
        - id: topicPath
          type: string
          description: >-
            A string object that represents the name of the topic for the
            subscriptions to retrieve.
        - id: options
          type: object
          description: |-
            The request options.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>top</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>The number of topics to fetch.</td>
                </tr> <tr>
                <td>skip</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>The number of topics to skip.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                  if an error occurs; otherwise `listsubscriptionresult` will contain
                                                                                  the list of subscriptions.
                                                                                  `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'createRule(topicPath, subscriptionPath, rulePath, options, callback)'
    uid: azure-sb.ServiceBusService#createRule
    package: azure-sb
    summary: Creates a rule.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createRule(topicPath, subscriptionPath, rulePath, options,
        callback)
      parameters:
        - id: topicPath
          type: string
          description: >-
            A string object that represents the name of the topic for the
            subscription.
        - id: subscriptionPath
          type: string
          description: >-
            A string object that represents the name of the subscription for
            which the rule will be created.
        - id: rulePath
          type: string
          description: A string object that represents the name of the rule to be created.
        - id: options
          type: object
          description: |-
            The request options.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>trueFilter</td>
                <td></td>
                <td>string</td>
                <td>Defines the expression that the rule evaluates as a true filter.</td>
                </tr> <tr>
                <td>falseFilter</td>
                <td></td>
                <td>string</td>
                <td>Defines the expression that the rule evaluates as a false filter.</td>
                </tr> <tr>
                <td>sqlExpressionFilter</td>
                <td></td>
                <td>string</td>
                <td>Defines the expression that the rule evaluates. The expression string is interpreted as a SQL92 expression which must evaluate to True or False. Only one between a correlation and a sql expression can be defined.</td>
                </tr> <tr>
                <td>correlationIdFilter</td>
                <td></td>
                <td>string</td>
                <td>Defines the expression that the rule evaluates. Only the messages whose CorrelationId match the CorrelationId set in the filter expression are allowed. Only one between a correlation and a sql expression can be defined.</td>
                </tr> <tr>
                <td>sqlRuleAction</td>
                <td></td>
                <td>string</td>
                <td>Defines the expression that the rule evaluates. If the rule is of type SQL, the expression string is interpreted as a SQL92 expression which must evaluate to True or False. If the rule is of type CorrelationFilterExpression then only the messages whose CorrelationId match the CorrelationId set in the filter expression are allowed.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                        if an error occurs; otherwise `createruleresults` will contain
                                                                                        the new rule information.
                                                                                        `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'deleteRule(topicPath, subscriptionPath, rulePath, callback)'
    uid: azure-sb.ServiceBusService#deleteRule
    package: azure-sb
    summary: Deletes a rule.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteRule(topicPath, subscriptionPath, rulePath, callback)'
      parameters:
        - id: topicPath
          type: string
          description: >-
            A string object that represents the name of the topic for the
            subscription.
        - id: subscriptionPath
          type: string
          description: >-
            A string object that represents the name of the subscription for
            which the rule will be deleted.
        - id: rulePath
          type: string
          description: A string object that represents the name of the rule to delete.
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                            if an error occurs; otherwise `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'getRule(topicPath, subscriptionPath, rulePath, callback)'
    uid: azure-sb.ServiceBusService#getRule
    package: azure-sb
    summary: Retrieves a rule.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRule(topicPath, subscriptionPath, rulePath, callback)'
      parameters:
        - id: topicPath
          type: string
          description: >-
            A string object that represents the name of the topic for the
            subscription.
        - id: subscriptionPath
          type: string
          description: >-
            A string object that represents the name of the subscription for
            which the rule will be retrieved.
        - id: rulePath
          type: string
          description: A string object that represents the name of the rule to retrieve.
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                            if an error occurs; otherwise `getruleresult` will contain
                                                                                            the rule information.
                                                                                            `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'listRules(topicPath, subscriptionPath, options, callback)'
    uid: azure-sb.ServiceBusService#listRules
    package: azure-sb
    summary: Returns a list of rules.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listRules(topicPath, subscriptionPath, options, callback)'
      parameters:
        - id: topicPath
          type: string
          description: >-
            A string object that represents the name of the topic for the
            subscription.
        - id: subscriptionPath
          type: string
          description: >-
            A string object that represents the name of the subscription whose
            rules are being retrieved.
        - id: options
          type: object
          description: |-
            The request options.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>top</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>The number of topics to fetch.</td>
                </tr> <tr>
                <td>skip</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>The number of topics to skip.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                  if an error occurs; otherwise `listrulesresult` will contain
                                                                                  the list of rules.
                                                                                  `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'createNotificationHub(hubPath, options, callback)'
    uid: azure-sb.ServiceBusService#createNotificationHub
    package: azure-sb
    summary: Creates a notification hub.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createNotificationHub(hubPath, options, callback)'
      parameters:
        - id: hubPath
          type: string
          description: A string object that represents the name of the notification hub.
        - id: options
          type: object
          description: |-
            The request options or callback function.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>wns</td>
                <td></td>
                <td>object</td>
                <td>An object with the key value pairs for the WNS credentials.</td>
                </tr> <tr>
                <td>apns</td>
                <td></td>
                <td>object</td>
                <td>An object with the key value pairs for the APNS credentials.</td>
                </tr> <tr>
                <td>gcm</td>
                <td></td>
                <td>object</td>
                <td>An object with the key value pairs for the GCM credentials.</td>
                </tr> <tr>
                <td>mpns</td>
                <td></td>
                <td>object</td>
                <td>An object with the key value pairs for the MPNS credentials.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                  if an error occurs; otherwise `result` will contain
                                                                  the new notification hub information.
                                                                  `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'getNotificationHub(hubPath, callback)'
    uid: azure-sb.ServiceBusService#getNotificationHub
    package: azure-sb
    summary: Gets a notification hub.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getNotificationHub(hubPath, callback)'
      parameters:
        - id: hubPath
          type: string
          description: A string object that represents the name of the notification hub.
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                                        if an error occurs; otherwise `result` will contain
                                                                                        the notification hub information.
                                                                                        `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'listNotificationHubs(options, callback)'
    uid: azure-sb.ServiceBusService#listNotificationHubs
    package: azure-sb
    summary: Returns a list of notification hubs.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listNotificationHubs(options, callback)'
      parameters:
        - id: options
          type: object
          description: |-
            The request options or callback function.
                      <table class='schema'>
                      <tr><th>Name</th><th>Required</th><th>Type</th><th>Description</th></tr>
                      <tr>
                <td>top</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>The number of topics to fetch.</td>
                </tr> <tr>
                <td>skip</td>
                <td></td>
                <td>azure-sb.int</td>
                <td>The number of topics to skip.</td>
                </tr>
                      </table>
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                                  if an error occurs; otherwise `result` will contain
                                                                  the list of notification hubs.
                                                                  `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
  - name: 'deleteNotificationHub(hubPath, callback)'
    uid: azure-sb.ServiceBusService#deleteNotificationHub
    package: azure-sb
    summary: Deletes a notification hub.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteNotificationHub(hubPath, callback)'
      parameters:
        - id: hubPath
          type: string
          description: A string object that represents the name of the notification hub.
        - id: callback
          type: function
          description: |-
            `error` will contain information
                                                         if an error occurs; otherwise `response` will contain information related to this operation.
      return:
        type: undefined
        description: ''
