### YamlMime:TSType
name: SpeedSummary
uid: azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
package: azure-storage
summary: ''
fullName: SpeedSummary
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: captureRejections
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.captureRejections
    package: azure-storage
    summary: Sets or gets the default captureRejection value for all emitters.
    fullName: captureRejections
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static captureRejections: boolean'
      return:
        type: boolean
        description: ''
  - name: captureRejectionSymbol
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.captureRejectionSymbol
    package: azure-storage
    summary: ''
    fullName: captureRejectionSymbol
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static captureRejectionSymbol: Object'
      return:
        type: Object
        description: ''
  - name: completeSize
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.completeSize
    package: azure-storage
    summary: ''
    fullName: completeSize
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'completeSize: number'
      return:
        type: number
        description: ''
  - name: defaultMaxListeners
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.defaultMaxListeners
    package: azure-storage
    summary: ''
    fullName: defaultMaxListeners
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static defaultMaxListeners: number'
      return:
        type: number
        description: ''
  - name: errorMonitor
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.errorMonitor
    package: azure-storage
    summary: >
      This symbol shall be used to install a listener for only monitoring
      `'error'`

      events. Listeners installed using this symbol are called before the
      regular

      `'error'` listeners are called.

      Installing a listener using this symbol does not change the behavior once
      an

      `'error'` event is emitted, therefore the process will still crash if no

      regular `'error'` listener is installed.
    fullName: errorMonitor
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static errorMonitor: Object'
      return:
        type: Object
        description: ''
  - name: name
    uid: azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.name
    package: azure-storage
    summary: ''
    fullName: name
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string'
      return:
        type: string
        description: ''
  - name: totalSize
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.totalSize
    package: azure-storage
    summary: ''
    fullName: totalSize
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'totalSize: number'
      return:
        type: number
        description: ''
methods:
  - name: 'addListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.addListener
    package: azure-storage
    summary: 'Alias for `emitter.on(eventName, listener)`.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addListener(event: string | symbol, listener: (args: any[]) =>
        void)
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'emit(string | symbol, any[])'
    uid: azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.emit
    package: azure-storage
    summary: >-
      Synchronously calls each of the listeners registered for the event
      named`eventName`, in the order they were registered, passing the supplied
      arguments

      to each.

      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      const EventEmitter = require('events');

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(event: string | symbol, args: any[])'
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: args
          type: 'any[]'
          description: ''
      return:
        type: boolean
        description: ''
  - name: eventNames()
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.eventNames
    package: azure-storage
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.
      ```js
      const EventEmitter = require('events');
      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function eventNames()
      return:
        type: Array&lt;string | symbol&gt;
        description: ''
  - name: getAutoIncrementFunction(number)
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.getAutoIncrementFunction
    package: azure-storage
    summary: Get auto increment function
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getAutoIncrementFunction(size: number)'
      parameters:
        - id: size
          type: number
          description: ''
      return:
        type: '(error: any, retValue: number) =&gt; void'
        description: ''
  - name: getAverageSpeed(boolean)
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.getAverageSpeed
    package: azure-storage
    summary: Get average upload/download speed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getAverageSpeed(humanReadable: boolean)'
      parameters:
        - id: humanReadable
          type: boolean
          description: ''
      return:
        type: string
        description: ''
  - name: getCompletePercent(number)
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.getCompletePercent
    package: azure-storage
    summary: Get complete percentage
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getCompletePercent(len: number)'
      parameters:
        - id: len
          type: number
          description: |
            The number of digits after the decimal point.
      return:
        type: number
        description: ''
  - name: getCompleteSize(boolean)
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.getCompleteSize
    package: azure-storage
    summary: Get completed data size
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getCompleteSize(humanReadable: boolean)'
      parameters:
        - id: humanReadable
          type: boolean
          description: ''
      return:
        type: string | number
        description: ''
  - name: getElapsedSeconds(boolean)
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.getElapsedSeconds
    package: azure-storage
    summary: Get running seconds
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getElapsedSeconds(humanReadable: boolean)'
      parameters:
        - id: humanReadable
          type: boolean
          description: ''
      return:
        type: number
        description: ''
  - name: 'getEventListener(DOMEventTarget | EventEmitter, string | symbol)'
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.getEventListener
    package: azure-storage
    summary: Returns a list listener for a specific emitter event name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function getEventListener(emitter: DOMEventTarget | EventEmitter,
        name: string | symbol)
      parameters:
        - id: emitter
          type: DOMEventTarget | EventEmitter
          description: ''
        - id: name
          type: string | symbol
          description: ''
      return:
        type: 'Function[]'
        description: ''
  - name: getMaxListeners()
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.getMaxListeners
    package: azure-storage
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      <xref:defaultMaxListeners>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getMaxListeners()
      return:
        type: number
        description: ''
  - name: getSpeed(boolean)
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.getSpeed
    package: azure-storage
    summary: Get instant speed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getSpeed(humanReadable: boolean)'
      parameters:
        - id: humanReadable
          type: boolean
          description: ''
      return:
        type: string | number
        description: ''
  - name: getTotalSize(boolean)
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.getTotalSize
    package: azure-storage
    summary: Get total size
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTotalSize(humanReadable: boolean)'
      parameters:
        - id: humanReadable
          type: boolean
          description: ''
      return:
        type: string | number
        description: ''
  - name: increment(number)
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.increment
    package: azure-storage
    summary: Increment the complete data size
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function increment(len: number)'
      parameters:
        - id: len
          type: number
          description: ''
      return:
        type: number
        description: ''
  - name: 'listenerCount(EventEmitter, string | symbol)'
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.listenerCount
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: since v4.0.0
    syntax:
      content: >-
        static function listenerCount(emitter: EventEmitter, event: string |
        symbol)
      parameters:
        - id: emitter
          type: EventEmitter
          description: ''
        - id: event
          type: string | symbol
          description: ''
      return:
        type: number
        description: ''
  - name: listenerCount(string | symbol)
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.listenerCount
    package: azure-storage
    summary: Returns the number of listeners listening to the event named `eventName`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listenerCount(event: string | symbol)'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        type: number
        description: ''
  - name: listeners(string | symbol)
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.listeners
    package: azure-storage
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.
      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listeners(event: string | symbol)'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        type: 'Function[]'
        description: ''
  - name: 'off(string | symbol, (args: any[]) => void)'
    uid: azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.off
    package: azure-storage
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function off(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'on(EventEmitter, string, StaticEventEmitterOptions)'
    uid: azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.on
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function on(emitter: EventEmitter, event: string, options?:
        StaticEventEmitterOptions)
      parameters:
        - id: emitter
          type: EventEmitter
          description: ''
        - id: event
          type: string
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        type: AsyncIterableIterator&lt;any&gt;
        description: ''
  - name: 'on(string | symbol, (args: any[]) => void)'
    uid: azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.on
    package: azure-storage
    summary: >-
      Adds the `listener` function to the end of the listeners array for the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.on('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependListener()` method can be used as an alternative to add
      the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.on('foo', () => console.log('a'));

      myEE.prependListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        type: this
        description: ''
  - name: 'once(NodeEventTarget, string | symbol, StaticEventEmitterOptions)'
    uid: azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.once
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: NodeEventTarget, event: string | symbol,
        options?: StaticEventEmitterOptions)
      parameters:
        - id: emitter
          type: NodeEventTarget
          description: ''
        - id: event
          type: string | symbol
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        type: 'Promise&lt;any[]&gt;'
        description: ''
  - name: 'once(string | symbol, (args: any[]) => void)'
    uid: azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.once
    package: azure-storage
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName`.
      The

      next time `eventName` is triggered, this listener is removed and then
      invoked.

      ```js

      server.once('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependOnceListener()` method can be used as an alternative to
      add the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.once('foo', () => console.log('a'));

      myEE.prependOnceListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function once(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        type: this
        description: ''
  - name: 'prependListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.prependListener
    package: azure-storage
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependListener(event: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        type: this
        description: ''
  - name: 'prependOnceListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.prependOnceListener
    package: azure-storage
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the_beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.

      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener(event: string | symbol, listener: (args:
        any[]) => void)
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        type: this
        description: ''
  - name: rawListeners(string | symbol)
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.rawListeners
    package: azure-storage
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).
      ```js
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function rawListeners(event: string | symbol)'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        type: 'Function[]'
        description: ''
  - name: removeAllListeners(string | symbol)
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.removeAllListeners
    package: azure-storage
    summary: |-
      Removes all listeners, or those of the specified `eventName`.
      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string | symbol)'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        type: this
        description: ''
  - name: 'removeListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.removeListener
    package: azure-storage
    summary: >-
      Removes the specified `listener` from the listener array for the event
      named`eventName`.

      ```js

      const callback = (stream) => {
        console.log('someone connected!');
      };

      server.on('connection', callback);

      // ...

      server.removeListener('connection', callback);

      ```


      `removeListener()` will remove, at most, one instance of a listener from
      the

      listener array. If any single listener has been added multiple times to
      the

      listener array for the specified `eventName`, then `removeListener()` must
      be

      called multiple times to remove each instance.


      Once an event is emitted, all listeners attached to it at the

      time of emitting are called in order. This implies that
      any`removeListener()` or `removeAllListeners()` calls _after_ emitting
      and_before_ the last listener finishes execution will

      not remove them from`emit()` in progress. Subsequent events behave as
      expected.


      ```js

      const myEmitter = new MyEmitter();


      const callbackA = () => {
        console.log('A');
        myEmitter.removeListener('event', callbackB);
      };


      const callbackB = () => {
        console.log('B');
      };


      myEmitter.on('event', callbackA);


      myEmitter.on('event', callbackB);


      // callbackA removes listener callbackB but it will still be called.

      // Internal listener array at time of emit [callbackA, callbackB]

      myEmitter.emit('event');

      // Prints:

      //   A

      //   B


      // callbackB is now removed.

      // Internal listener array [callbackA]

      myEmitter.emit('event');

      // Prints:

      //   A

      ```


      Because listeners are managed using an internal array, calling this will

      change the position indices of any listener registered _after_ the
      listener

      being removed. This will not impact the order in which listeners are
      called,

      but it means that any copies of the listener array as returned by

      the `emitter.listeners()` method will need to be recreated.


      When a single function has been added as a handler multiple times for a
      single

      event (as in the example below), `removeListener()` will remove the most

      recently added instance. In the example the `once('ping')`listener is
      removed:


      ```js

      const ee = new EventEmitter();


      function pong() {
        console.log('pong');
      }


      ee.on('ping', pong);

      ee.once('ping', pong);

      ee.removeListener('ping', pong);


      ee.emit('ping');

      ee.emit('ping');

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function removeListener(event: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: setMaxListeners(number)
    uid: >-
      azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary.setMaxListeners
    package: azure-storage
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to`Infinity` (or `0`) to indicate an unlimited number of listeners.

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number)'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        type: this
        description: ''
extends: EventEmitter
