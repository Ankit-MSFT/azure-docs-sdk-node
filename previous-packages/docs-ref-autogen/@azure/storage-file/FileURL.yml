### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-file.FileURL'
    name: FileURL
    fullName: FileURL
    children:
      - '@azure/storage-file.FileURL.abortCopyFromURL'
      - '@azure/storage-file.FileURL.clearRange'
      - '@azure/storage-file.FileURL.create'
      - '@azure/storage-file.FileURL.delete'
      - '@azure/storage-file.FileURL.download'
      - '@azure/storage-file.FileURL.constructor'
      - '@azure/storage-file.FileURL.forceCloseHandle'
      - '@azure/storage-file.FileURL.forceCloseHandlesSegment'
      - '@azure/storage-file.FileURL.fromDirectoryURL'
      - '@azure/storage-file.FileURL.getProperties'
      - '@azure/storage-file.FileURL.getRangeList'
      - '@azure/storage-file.FileURL.listHandlesSegment'
      - '@azure/storage-file.FileURL.newPipeline'
      - '@azure/storage-file.FileURL.pipeline'
      - '@azure/storage-file.FileURL.resize'
      - '@azure/storage-file.FileURL.setHTTPHeaders'
      - '@azure/storage-file.FileURL.setMetadata'
      - '@azure/storage-file.FileURL.setProperties'
      - '@azure/storage-file.FileURL.startCopyFromURL'
      - '@azure/storage-file.FileURL.uploadRange'
      - '@azure/storage-file.FileURL.uploadRangeFromURL'
      - '@azure/storage-file.FileURL.url'
      - '@azure/storage-file.FileURL.withPipeline'
    langs:
      - typeScript
    type: class
    summary: A FileURL represents a URL to an Azure Storage file.
    extends:
      name: '@azure/storage-file.StorageURL'
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.abortCopyFromURL'
    name: 'abortCopyFromURL(Aborter, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Aborts a pending Copy File operation, and leaves a destination file with
      zero length and full

      metadata.
    syntax:
      content: 'function abortCopyFromURL(aborter: Aborter, copyId: string)'
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: copyId
          type:
            - string
          description: ''
      return:
        type:
          - Promise<Models.FileAbortCopyResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.clearRange'
    name: 'clearRange(Aborter, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Clears the specified range and
      releases the space used in storage for that range.
    syntax:
      content: >-
        function clearRange(aborter: Aborter, offset: number, contentLength:
        number)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: offset
          type:
            - number
          description: ''
        - id: contentLength
          type:
            - number
          description: ''
      return:
        type:
          - Promise<Models.FileUploadRangeResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.create'
    name: 'create(Aborter, number, IFileCreateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new file or replaces a file. Note it only initializes the file
      with no content.
    syntax:
      content: >-
        function create(aborter: Aborter, size: number, options?:
        IFileCreateOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: size
          type:
            - number
          description: 'Specifies the maximum size in bytes for the file, up to 1 TB.'
        - id: options
          type:
            - '@azure/storage-file.IFileCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileCreateResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.delete'
    name: delete(Aborter)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Removes the file from the storage account.

      When a file is successfully deleted, it is immediately removed from the
      storage

      account's index and is no longer accessible to clients. The file's data is
      later

      removed from the service during garbage collection.

      Delete File will fail with status code 409 (Conflict) and error code
      SharingViolation

      if the file is open on an SMB client.


      Delete File is not supported on a share snapshot, which is a read-only
      copy of

      a share. An attempt to perform this operation on a share snapshot will
      fail with 400 (InvalidQueryParameterValue)
    syntax:
      content: 'function delete(aborter: Aborter)'
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
      return:
        type:
          - Promise<Models.FileDeleteResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.download'
    name: 'download(Aborter, number, undefined | number, IFileDownloadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Reads or downloads a file from the system, including its metadata and
      properties.

      * In Node.js, data returns in a Readable stream `readableStreamBody`

      * In browsers, data returns in a promise `blobBody`
    syntax:
      content: >-
        function download(aborter: Aborter, offset: number, count?: undefined |
        number, options?: IFileDownloadOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: offset
          type:
            - number
          description: 'From which position of the file to download, >= 0'
        - id: count
          type:
            - undefined | number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file.IFileDownloadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileDownloadResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.constructor'
    name: 'FileURL(string, Pipeline)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of FileURL.
    syntax:
      content: 'new FileURL(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage file, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a file.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a file or directory name includes %, file or directory name must be encoded in the URL.
                                Such as a file named "myfile%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydirectory/myfile%25".
        - id: pipeline
          type:
            - '@azure/storage-file.Pipeline'
          description: |-
            Call StorageURL.newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.forceCloseHandle'
    name: 'forceCloseHandle(Aborter, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Force close a specific handle for a file.
    syntax:
      content: 'function forceCloseHandle(aborter: Aborter, handleId: string)'
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: handleId
          type:
            - string
          description: |-
            Specific handle ID, cannot be asterisk "*".
                                     Use forceCloseHandlesSegment() to close all handles.
      return:
        type:
          - Promise<Models.FileForceCloseHandlesResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.forceCloseHandlesSegment'
    name: 'forceCloseHandlesSegment(Aborter, undefined | string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Force close all handles for a file.
    syntax:
      content: >-
        function forceCloseHandlesSegment(aborter: Aborter, marker?: undefined |
        string)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: marker
          type:
            - undefined | string
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileForceCloseHandlesResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.fromDirectoryURL'
    name: 'fromDirectoryURL(DirectoryURL, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a FileURL object from a DirectoryURL object.
    syntax:
      content: >-
        static function fromDirectoryURL(directoryURL: DirectoryURL, fileName:
        string)
      parameters:
        - id: directoryURL
          type:
            - '@azure/storage-file.DirectoryURL'
          description: A DirectoryURL object
        - id: fileName
          type:
            - string
          description: A file name
      return:
        type:
          - '@azure/storage-file.FileURL'
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.getProperties'
    name: getProperties(Aborter)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties

      for the file. It does not return the content of the file.
    syntax:
      content: 'function getProperties(aborter: Aborter)'
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
      return:
        type:
          - Promise<Models.FileGetPropertiesResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.getRangeList'
    name: 'getRangeList(Aborter, IFileGetRangeListOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the list of valid ranges for a file.
    syntax:
      content: >-
        function getRangeList(aborter: Aborter, options?:
        IFileGetRangeListOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: options
          type:
            - '@azure/storage-file.IFileGetRangeListOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file.FileGetRangeListResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.listHandlesSegment'
    name: >-
      listHandlesSegment(Aborter, undefined | string,
      IFileListHandlesSegmentOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists handles for a file.
    syntax:
      content: >-
        function listHandlesSegment(aborter: Aborter, marker?: undefined |
        string, options?: IFileListHandlesSegmentOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: marker
          type:
            - undefined | string
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file.IFileListHandlesSegmentOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileListHandlesResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.newPipeline'
    name: 'newPipeline(Credential, INewPipelineOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A static method used to create a new Pipeline object with Credential
      provided.
    syntax:
      content: >-
        static function newPipeline(credential: Credential, pipelineOptions?:
        INewPipelineOptions)
      parameters:
        - id: credential
          type:
            - '@azure/storage-file.Credential'
          description: 'Such as AnonymousCredential, SharedKeyCredential.'
        - id: pipelineOptions
          type:
            - '@azure/storage-file.INewPipelineOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/storage-file.Pipeline'
        description: A new Pipeline object.
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.pipeline'
    name: pipeline
    fullName: pipeline
    children: []
    langs:
      - typeScript
    type: property
    summary: Request policy pipeline.
    syntax:
      content: 'pipeline: Pipeline'
      return:
        type:
          - '@azure/storage-file.Pipeline'
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.resize'
    name: 'resize(Aborter, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Resize file.
    syntax:
      content: 'function resize(aborter: Aborter, length: number)'
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: length
          type:
            - number
          description: |-
            Resizes a file to the specified size in bytes.
                                   If the specified byte value is less than the current size of the file,
                                   then all ranges above the specified byte value are cleared.
      return:
        type:
          - Promise<Models.FileSetHTTPHeadersResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.setHTTPHeaders'
    name: 'setHTTPHeaders(Aborter, IFileHTTPHeaders)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets HTTP headers on the file.

      If no option provided, or no value provided for the file HTTP headers in
      the options,

      these file HTTP headers without a value will be cleared.
    syntax:
      content: >-
        function setHTTPHeaders(aborter: Aborter, fileHTTPHeaders?:
        IFileHTTPHeaders)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: fileHTTPHeaders
          type:
            - '@azure/storage-file.IFileHTTPHeaders'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileSetHTTPHeadersResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.setMetadata'
    name: 'setMetadata(Aborter, IMetadata)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Updates user-defined metadata for the specified file.
      If no metadata defined in the option parameter, the file
      metadata will be removed.
    syntax:
      content: 'function setMetadata(aborter: Aborter, metadata?: IMetadata)'
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: metadata
          type:
            - '@azure/storage-file.IMetadata'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileSetMetadataResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.setProperties'
    name: 'setProperties(Aborter, IFileProperties)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets properties on the file.
    syntax:
      content: 'function setProperties(aborter: Aborter, properties?: IFileProperties)'
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: properties
          type:
            - '@azure/storage-file.IFileProperties'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file.ISetPropertiesResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.startCopyFromURL'
    name: 'startCopyFromURL(Aborter, string, IFileStartCopyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Copies a blob or file to a destination file within the storage account.
    syntax:
      content: >-
        function startCopyFromURL(aborter: Aborter, copySource: string,
        options?: IFileStartCopyOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: copySource
          type:
            - string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.

            To copy a file to another file within the same storage account, you
            may use Shared Key to

            authenticate the source file. If you are copying a file from another
            storage account, or if you

            are copying a blob from the same storage account or another storage
            account, then you must

            authenticate the source file or blob using a shared access
            signature. If the source is a public

            blob, no authentication is required to perform the copy operation. A
            file in a share snapshot

            can also be specified as a copy source.
        - id: options
          type:
            - '@azure/storage-file.IFileStartCopyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileStartCopyResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.uploadRange'
    name: >-
      uploadRange(Aborter, HttpRequestBody, number, number,
      IFileUploadRangeOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Upload a range of bytes to a file. Both the start and count of the
      range must be specified. The range can be up to 4 MB in size.
    syntax:
      content: >-
        function uploadRange(aborter: Aborter, body: HttpRequestBody, offset:
        number, contentLength: number, options?: IFileUploadRangeOptions)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation.
        - id: body
          type:
            - HttpRequestBody
          description: |-
            Blob, string, ArrayBuffer, ArrayBufferView or a function
                                          which returns a new Readable stream whose offset is from data source beginning.
        - id: offset
          type:
            - number
          description: Offset position of the destination Azure File to upload.
        - id: contentLength
          type:
            - number
          description: >-
            Length of body in bytes. Use Buffer.byteLength() to calculate body
            length for a
                                          string including non non-Base64/Hex-encoded characters.
        - id: options
          type:
            - '@azure/storage-file.IFileUploadRangeOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileUploadRangeResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.uploadRangeFromURL'
    name: 'uploadRangeFromURL(Aborter, string, number, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Upload a range of bytes to a file where the contents are read from a
      another file's URL.

      The range can be up to 4 MB in size.
    syntax:
      content: >-
        function uploadRangeFromURL(aborter: Aborter, sourceURL: string,
        sourceOffset: number, destOffset: number, count: number)
      parameters:
        - id: aborter
          type:
            - '@azure/storage-file.Aborter'
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation.
        - id: sourceURL
          type:
            - string
          description: >-
            Specify a URL to the copy source, Shared Access Signature(SAS) maybe
            needed for authentication.
        - id: sourceOffset
          type:
            - number
          description: >-
            The source offset to copy from. Pass 0 to copy from the beginning of
            source file.
        - id: destOffset
          type:
            - number
          description: Offset of destination file.
        - id: count
          type:
            - number
          description: Number of bytes to be uploaded from source file.
      return:
        type:
          - Promise<Models.FileUploadRangeFromURLResponse>
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: URL string value.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileURL.withPipeline'
    name: withPipeline(Pipeline)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a new FileURL object identical to the source but with the
      specified request policy pipeline.
    syntax:
      content: 'function withPipeline(pipeline: Pipeline)'
      parameters:
        - id: pipeline
          type:
            - '@azure/storage-file.Pipeline'
          description: ''
      return:
        type:
          - '@azure/storage-file.FileURL'
        description: ''
    package: '@azure/storage-file'
references:
  - uid: '@azure/storage-file.StorageURL'
    name: StorageURL
    spec.typeScript:
      - name: StorageURL
        fullName: StorageURL
        uid: '@azure/storage-file.StorageURL'
  - uid: '@azure/storage-file.Pipeline'
    name: Pipeline
    spec.typeScript:
      - name: Pipeline
        fullName: Pipeline
        uid: '@azure/storage-file.Pipeline'
  - uid: '@azure/storage-file.Aborter'
    name: Aborter
    spec.typeScript:
      - name: Aborter
        fullName: Aborter
        uid: '@azure/storage-file.Aborter'
  - uid: '@azure/storage-file.IFileCreateOptions'
    name: IFileCreateOptions
    spec.typeScript:
      - name: IFileCreateOptions
        fullName: IFileCreateOptions
        uid: '@azure/storage-file.IFileCreateOptions'
  - uid: '@azure/storage-file.IFileDownloadOptions'
    name: IFileDownloadOptions
    spec.typeScript:
      - name: IFileDownloadOptions
        fullName: IFileDownloadOptions
        uid: '@azure/storage-file.IFileDownloadOptions'
  - uid: '@azure/storage-file.IFileGetRangeListOptions'
    name: IFileGetRangeListOptions
    spec.typeScript:
      - name: IFileGetRangeListOptions
        fullName: IFileGetRangeListOptions
        uid: '@azure/storage-file.IFileGetRangeListOptions'
  - uid: Promise<@azure/storage-file.FileGetRangeListResponse>
    name: FileGetRangeListResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileGetRangeListResponse
        fullName: FileGetRangeListResponse
        uid: '@azure/storage-file.FileGetRangeListResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file.IFileListHandlesSegmentOptions'
    name: IFileListHandlesSegmentOptions
    spec.typeScript:
      - name: IFileListHandlesSegmentOptions
        fullName: IFileListHandlesSegmentOptions
        uid: '@azure/storage-file.IFileListHandlesSegmentOptions'
  - uid: '@azure/storage-file.IFileHTTPHeaders'
    name: IFileHTTPHeaders
    spec.typeScript:
      - name: IFileHTTPHeaders
        fullName: IFileHTTPHeaders
        uid: '@azure/storage-file.IFileHTTPHeaders'
  - uid: '@azure/storage-file.IMetadata'
    name: IMetadata
    spec.typeScript:
      - name: IMetadata
        fullName: IMetadata
        uid: '@azure/storage-file.IMetadata'
  - uid: '@azure/storage-file.IFileProperties'
    name: IFileProperties
    spec.typeScript:
      - name: IFileProperties
        fullName: IFileProperties
        uid: '@azure/storage-file.IFileProperties'
  - uid: Promise<@azure/storage-file.ISetPropertiesResponse>
    name: ISetPropertiesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ISetPropertiesResponse
        fullName: ISetPropertiesResponse
        uid: '@azure/storage-file.ISetPropertiesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file.IFileStartCopyOptions'
    name: IFileStartCopyOptions
    spec.typeScript:
      - name: IFileStartCopyOptions
        fullName: IFileStartCopyOptions
        uid: '@azure/storage-file.IFileStartCopyOptions'
  - uid: '@azure/storage-file.IFileUploadRangeOptions'
    name: IFileUploadRangeOptions
    spec.typeScript:
      - name: IFileUploadRangeOptions
        fullName: IFileUploadRangeOptions
        uid: '@azure/storage-file.IFileUploadRangeOptions'
  - uid: '@azure/storage-file.FileURL'
    name: FileURL
    spec.typeScript:
      - name: FileURL
        fullName: FileURL
        uid: '@azure/storage-file.FileURL'
  - uid: '@azure/storage-file.DirectoryURL'
    name: DirectoryURL
    spec.typeScript:
      - name: DirectoryURL
        fullName: DirectoryURL
        uid: '@azure/storage-file.DirectoryURL'
  - uid: '@azure/storage-file.Credential'
    name: Credential
    spec.typeScript:
      - name: Credential
        fullName: Credential
        uid: '@azure/storage-file.Credential'
  - uid: '@azure/storage-file.INewPipelineOptions'
    name: INewPipelineOptions
    spec.typeScript:
      - name: INewPipelineOptions
        fullName: INewPipelineOptions
        uid: '@azure/storage-file.INewPipelineOptions'
