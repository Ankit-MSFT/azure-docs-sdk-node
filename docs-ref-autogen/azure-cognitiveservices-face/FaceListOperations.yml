### YamlMime:UniversalReference
items:
  - uid: azure-cognitiveservices-face.FaceListOperations
    name: FaceListOperations
    fullName: FaceListOperations
    children:
      - azure-cognitiveservices-face.FaceListOperations.addFaceFromStream
      - azure-cognitiveservices-face.FaceListOperations.addFaceFromStream_2
      - azure-cognitiveservices-face.FaceListOperations.addFaceFromStream_1
      - >-
        azure-cognitiveservices-face.FaceListOperations.addFaceFromStreamWithHttpOperationResponse
      - azure-cognitiveservices-face.FaceListOperations.addFaceFromUrl
      - azure-cognitiveservices-face.FaceListOperations.addFaceFromUrl_2
      - azure-cognitiveservices-face.FaceListOperations.addFaceFromUrl_1
      - >-
        azure-cognitiveservices-face.FaceListOperations.addFaceFromUrlWithHttpOperationResponse
      - azure-cognitiveservices-face.FaceListOperations.create
      - azure-cognitiveservices-face.FaceListOperations.create_2
      - azure-cognitiveservices-face.FaceListOperations.create_1
      - >-
        azure-cognitiveservices-face.FaceListOperations.createWithHttpOperationResponse
      - azure-cognitiveservices-face.FaceListOperations.deleteFace
      - azure-cognitiveservices-face.FaceListOperations.deleteFace_2
      - azure-cognitiveservices-face.FaceListOperations.deleteFace_1
      - >-
        azure-cognitiveservices-face.FaceListOperations.deleteFaceWithHttpOperationResponse
      - azure-cognitiveservices-face.FaceListOperations.deleteMethod
      - azure-cognitiveservices-face.FaceListOperations.deleteMethod_2
      - azure-cognitiveservices-face.FaceListOperations.deleteMethod_1
      - >-
        azure-cognitiveservices-face.FaceListOperations.deleteMethodWithHttpOperationResponse
      - azure-cognitiveservices-face.FaceListOperations.get
      - azure-cognitiveservices-face.FaceListOperations.get_2
      - azure-cognitiveservices-face.FaceListOperations.get_1
      - >-
        azure-cognitiveservices-face.FaceListOperations.getWithHttpOperationResponse
      - azure-cognitiveservices-face.FaceListOperations.list
      - azure-cognitiveservices-face.FaceListOperations.list_2
      - azure-cognitiveservices-face.FaceListOperations.list_1
      - >-
        azure-cognitiveservices-face.FaceListOperations.listWithHttpOperationResponse
      - azure-cognitiveservices-face.FaceListOperations.update
      - azure-cognitiveservices-face.FaceListOperations.update_2
      - azure-cognitiveservices-face.FaceListOperations.update_1
      - >-
        azure-cognitiveservices-face.FaceListOperations.updateWithHttpOperationResponse
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.addFaceFromStream
    name: 'addFaceFromStream(string, stream.Readable, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Add a face to a face list. The input face is specified as an image with a
      targetFace rectangle. It returns a persistedFaceId representing the added
      face, and persistedFaceId will not expire.
    syntax:
      content: >-
        function addFaceFromStream(faceListId: string, image: stream.Readable,
        options?: Object)
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: image
          type:
            - stream.Readable
          description: |
            An image stream.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.PersistedFace>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.addFaceFromStream_2
    name: >-
      addFaceFromStream(string, stream.Readable, Object,
      ServiceCallback<PersistedFace>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Add a face to a face list. The input face is specified as an image with a
      targetFace rectangle. It returns a persistedFaceId representing the added
      face, and persistedFaceId will not expire.
    syntax:
      content: >-
        function addFaceFromStream(faceListId: string, image: stream.Readable,
        options: Object, callback: ServiceCallback<PersistedFace>)
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: image
          type:
            - stream.Readable
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.PersistedFace>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.PersistedFace>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.addFaceFromStream_1
    name: 'addFaceFromStream(string, stream.Readable, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Add a face to a face list. The input face is specified as an image with a
      targetFace rectangle. It returns a persistedFaceId representing the added
      face, and persistedFaceId will not expire.
    syntax:
      content: >-
        function addFaceFromStream(faceListId: string, image: stream.Readable,
        callback: ServiceCallback<PersistedFace>)
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: image
          type:
            - stream.Readable
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.PersistedFace>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.PersistedFace>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.FaceListOperations.addFaceFromStreamWithHttpOperationResponse
    name: >-
      addFaceFromStreamWithHttpOperationResponse(string, stream.Readable,
      Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Add a face to a face list. The input face is specified as an image with a
      targetFace rectangle. It returns a persistedFaceId representing the added
      face, and persistedFaceId will not expire.
    syntax:
      content: >-
        function addFaceFromStreamWithHttpOperationResponse(faceListId: string,
        image: stream.Readable, options?: Object)
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: image
          type:
            - stream.Readable
          description: |
            An image stream.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.PersistedFace>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.addFaceFromUrl
    name: 'addFaceFromUrl(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Add a face to a face list. The input face is specified as an image with a
      targetFace rectangle. It returns a persistedFaceId representing the added
      face, and persistedFaceId will not expire.
    syntax:
      content: >-
        function addFaceFromUrl(faceListId: string, url: string, options?:
        Object)
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: url
          type:
            - string
          description: |
            Publicly reachable URL of an image
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.PersistedFace>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.addFaceFromUrl_2
    name: 'addFaceFromUrl(string, string, Object, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Add a face to a face list. The input face is specified as an image with a
      targetFace rectangle. It returns a persistedFaceId representing the added
      face, and persistedFaceId will not expire.
    syntax:
      content: >-
        function addFaceFromUrl(faceListId: string, url: string, options:
        Object, callback: ServiceCallback<PersistedFace>)
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: url
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.PersistedFace>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.PersistedFace>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.addFaceFromUrl_1
    name: 'addFaceFromUrl(string, string, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Add a face to a face list. The input face is specified as an image with a
      targetFace rectangle. It returns a persistedFaceId representing the added
      face, and persistedFaceId will not expire.
    syntax:
      content: >-
        function addFaceFromUrl(faceListId: string, url: string, callback:
        ServiceCallback<PersistedFace>)
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: url
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.PersistedFace>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.PersistedFace>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.FaceListOperations.addFaceFromUrlWithHttpOperationResponse
    name: 'addFaceFromUrlWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Add a face to a face list. The input face is specified as an image with a
      targetFace rectangle. It returns a persistedFaceId representing the added
      face, and persistedFaceId will not expire.
    syntax:
      content: >-
        function addFaceFromUrlWithHttpOperationResponse(faceListId: string,
        url: string, options?: Object)
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: url
          type:
            - string
          description: |
            Publicly reachable URL of an image
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.PersistedFace>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.create
    name: 'create(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create an empty face list with user-specified faceListId, name, an
      optional

      userData and recognitionModel. Up to 64 face lists are allowed in one

      subscription.

      <br /> Face list is a list of faces, up to 1,000 faces, and used by [Face
      -

      Find

      Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).

      <br /> After creation, user should use [FaceList - Add

      Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250)

      to import the faces. Faces are stored on server until [FaceList -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f)

      is called.

      <br /> Find Similar is used for scenario like finding celebrity-like
      faces,

      similar face filtering, or as a light way face identification. But if the

      actual use is to identify person, please use

      [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)

      /

      [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)

      and [Face -

      Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

      <br /> Please consider

      [LargeFaceList](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)

      when the face number is large. It can support up to 1,000,000 faces.

      'recognitionModel' should be specified to associate with this face list.
      The

      default value for 'recognitionModel' is 'recognition_01', if the latest

      model needed, please explicitly specify the model you need in this

      parameter. New faces that are added to an existing face list will use the

      recognition model that's already associated with the collection. Existing

      face features in a face list can't be updated to features extracted by

      another version of recognition model.
    syntax:
      content: 'function create(faceListId: string, options?: Object)'
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.create_2
    name: 'create(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create an empty face list with user-specified faceListId, name, an
      optional

      userData and recognitionModel. Up to 64 face lists are allowed in one

      subscription.

      <br /> Face list is a list of faces, up to 1,000 faces, and used by [Face
      -

      Find

      Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).

      <br /> After creation, user should use [FaceList - Add

      Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250)

      to import the faces. Faces are stored on server until [FaceList -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f)

      is called.

      <br /> Find Similar is used for scenario like finding celebrity-like
      faces,

      similar face filtering, or as a light way face identification. But if the

      actual use is to identify person, please use

      [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)

      /

      [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)

      and [Face -

      Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

      <br /> Please consider

      [LargeFaceList](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)

      when the face number is large. It can support up to 1,000,000 faces.

      'recognitionModel' should be specified to associate with this face list.
      The

      default value for 'recognitionModel' is 'recognition_01', if the latest

      model needed, please explicitly specify the model you need in this

      parameter. New faces that are added to an existing face list will use the

      recognition model that's already associated with the collection. Existing

      face features in a face list can't be updated to features extracted by

      another version of recognition model.
    syntax:
      content: >-
        function create(faceListId: string, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.create_1
    name: 'create(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create an empty face list with user-specified faceListId, name, an
      optional

      userData and recognitionModel. Up to 64 face lists are allowed in one

      subscription.

      <br /> Face list is a list of faces, up to 1,000 faces, and used by [Face
      -

      Find

      Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).

      <br /> After creation, user should use [FaceList - Add

      Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250)

      to import the faces. Faces are stored on server until [FaceList -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f)

      is called.

      <br /> Find Similar is used for scenario like finding celebrity-like
      faces,

      similar face filtering, or as a light way face identification. But if the

      actual use is to identify person, please use

      [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)

      /

      [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)

      and [Face -

      Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

      <br /> Please consider

      [LargeFaceList](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)

      when the face number is large. It can support up to 1,000,000 faces.

      'recognitionModel' should be specified to associate with this face list.
      The

      default value for 'recognitionModel' is 'recognition_01', if the latest

      model needed, please explicitly specify the model you need in this

      parameter. New faces that are added to an existing face list will use the

      recognition model that's already associated with the collection. Existing

      face features in a face list can't be updated to features extracted by

      another version of recognition model.
    syntax:
      content: 'function create(faceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.FaceListOperations.createWithHttpOperationResponse
    name: 'createWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create an empty face list with user-specified faceListId, name, an
      optional

      userData and recognitionModel. Up to 64 face lists are allowed in one

      subscription.

      <br /> Face list is a list of faces, up to 1,000 faces, and used by [Face
      -

      Find

      Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).

      <br /> After creation, user should use [FaceList - Add

      Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250)

      to import the faces. Faces are stored on server until [FaceList -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f)

      is called.

      <br /> Find Similar is used for scenario like finding celebrity-like
      faces,

      similar face filtering, or as a light way face identification. But if the

      actual use is to identify person, please use

      [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)

      /

      [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)

      and [Face -

      Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

      <br /> Please consider

      [LargeFaceList](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)

      when the face number is large. It can support up to 1,000,000 faces.

      'recognitionModel' should be specified to associate with this face list.
      The

      default value for 'recognitionModel' is 'recognition_01', if the latest

      model needed, please explicitly specify the model you need in this

      parameter. New faces that are added to an existing face list will use the

      recognition model that's already associated with the collection. Existing

      face features in a face list can't be updated to features extracted by

      another version of recognition model.
    syntax:
      content: >-
        function createWithHttpOperationResponse(faceListId: string, options?:
        Object)
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.deleteFace
    name: 'deleteFace(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Delete an existing face from a face list (given by a persistedFaceId and a
      faceListId). Persisted image related to the face will also be deleted.
    syntax:
      content: >-
        function deleteFace(faceListId: string, persistedFaceId: string,
        options?: Object)
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: persistedFaceId
          type:
            - string
          description: |
            Id referencing a particular persistedFaceId of
            an existing face.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.deleteFace_2
    name: 'deleteFace(string, string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Delete an existing face from a face list (given by a persistedFaceId and a
      faceListId). Persisted image related to the face will also be deleted.
    syntax:
      content: >-
        function deleteFace(faceListId: string, persistedFaceId: string,
        options: Object, callback: ServiceCallback<void>)
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: persistedFaceId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.deleteFace_1
    name: 'deleteFace(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Delete an existing face from a face list (given by a persistedFaceId and a
      faceListId). Persisted image related to the face will also be deleted.
    syntax:
      content: >-
        function deleteFace(faceListId: string, persistedFaceId: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: persistedFaceId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.FaceListOperations.deleteFaceWithHttpOperationResponse
    name: 'deleteFaceWithHttpOperationResponse(string, string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Delete an existing face from a face list (given by a persistedFaceId and a
      faceListId). Persisted image related to the face will also be deleted.
    syntax:
      content: >-
        function deleteFaceWithHttpOperationResponse(faceListId: string,
        persistedFaceId: string, options?: Object)
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: persistedFaceId
          type:
            - string
          description: |
            Id referencing a particular persistedFaceId of
            an existing face.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.deleteMethod
    name: 'deleteMethod(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing face list according to faceListId. Persisted face
      images

      in the face list will also be deleted.
    syntax:
      content: 'function deleteMethod(faceListId: string, options?: Object)'
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.deleteMethod_2
    name: 'deleteMethod(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing face list according to faceListId. Persisted face
      images

      in the face list will also be deleted.
    syntax:
      content: >-
        function deleteMethod(faceListId: string, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.deleteMethod_1
    name: 'deleteMethod(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing face list according to faceListId. Persisted face
      images

      in the face list will also be deleted.
    syntax:
      content: >-
        function deleteMethod(faceListId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.FaceListOperations.deleteMethodWithHttpOperationResponse
    name: 'deleteMethodWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing face list according to faceListId. Persisted face
      images

      in the face list will also be deleted.
    syntax:
      content: >-
        function deleteMethodWithHttpOperationResponse(faceListId: string,
        options?: Object)
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.get
    name: 'get(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Retrieve a face list’s faceListId, name, userData, recognitionModel and
      faces in the face list.
    syntax:
      content: 'function get(faceListId: string, options?: Object)'
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.FaceList>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.get_2
    name: 'get(string, Object, ServiceCallback<FaceList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Retrieve a face list’s faceListId, name, userData, recognitionModel and
      faces in the face list.
    syntax:
      content: >-
        function get(faceListId: string, options: Object, callback:
        ServiceCallback<FaceList>)
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.FaceList>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.FaceList>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.get_1
    name: 'get(string, ServiceCallback<FaceList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Retrieve a face list’s faceListId, name, userData, recognitionModel and
      faces in the face list.
    syntax:
      content: 'function get(faceListId: string, callback: ServiceCallback<FaceList>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.FaceList>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.FaceList>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.FaceListOperations.getWithHttpOperationResponse
    name: 'getWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Retrieve a face list’s faceListId, name, userData, recognitionModel and
      faces in the face list.
    syntax:
      content: >-
        function getWithHttpOperationResponse(faceListId: string, options?:
        Object)
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.FaceList>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.list
    name: list(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List face lists’ faceListId, name, userData and recognitionModel. <br />

      To get face information inside faceList use [FaceList -

      Get](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c)
    syntax:
      content: 'function list(options?: Object)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.FaceList[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.list_2
    name: 'list(Object, ServiceCallback<FaceList[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List face lists’ faceListId, name, userData and recognitionModel. <br />

      To get face information inside faceList use [FaceList -

      Get](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c)
    syntax:
      content: 'function list(options: Object, callback: ServiceCallback<FaceList[]>)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.FaceList[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.FaceList[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.list_1
    name: 'list(ServiceCallback<FaceList[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List face lists’ faceListId, name, userData and recognitionModel. <br />

      To get face information inside faceList use [FaceList -

      Get](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c)
    syntax:
      content: 'function list(callback: ServiceCallback<FaceList[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.FaceList[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.FaceList[]>'
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.FaceListOperations.listWithHttpOperationResponse
    name: listWithHttpOperationResponse(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List face lists’ faceListId, name, userData and recognitionModel. <br />

      To get face information inside faceList use [FaceList -

      Get](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c)
    syntax:
      content: 'function listWithHttpOperationResponse(options?: Object)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.FaceList[]>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.update
    name: 'update(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update information of a face list.
    syntax:
      content: 'function update(faceListId: string, options?: Object)'
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.update_2
    name: 'update(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update information of a face list.
    syntax:
      content: >-
        function update(faceListId: string, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.FaceListOperations.update_1
    name: 'update(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update information of a face list.
    syntax:
      content: 'function update(faceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: faceListId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.FaceListOperations.updateWithHttpOperationResponse
    name: 'updateWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update information of a face list.
    syntax:
      content: >-
        function updateWithHttpOperationResponse(faceListId: string, options?:
        Object)
      parameters:
        - id: faceListId
          type:
            - string
          description: |
            Id referencing a particular face list.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
references:
  - uid: Promise<azure-cognitiveservices-face.PersistedFace>
    name: PersistedFace>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PersistedFace
        fullName: PersistedFace
        uid: azure-cognitiveservices-face.PersistedFace
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-cognitiveservices-face.PersistedFace>
    name: PersistedFace>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PersistedFace
        fullName: PersistedFace
        uid: azure-cognitiveservices-face.PersistedFace
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.PersistedFace>>
    name: PersistedFace>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: PersistedFace
        fullName: PersistedFace
        uid: azure-cognitiveservices-face.PersistedFace
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-cognitiveservices-face.FaceList>
    name: FaceList>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FaceList
        fullName: FaceList
        uid: azure-cognitiveservices-face.FaceList
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-cognitiveservices-face.FaceList>
    name: FaceList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: FaceList
        fullName: FaceList
        uid: azure-cognitiveservices-face.FaceList
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.FaceList>>
    name: FaceList>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: FaceList
        fullName: FaceList
        uid: azure-cognitiveservices-face.FaceList
      - name: '>>'
        fullName: '>>'
  - uid: 'Promise<azure-cognitiveservices-face.FaceList[]>'
    name: 'FaceList[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FaceList
        fullName: FaceList
        uid: azure-cognitiveservices-face.FaceList
      - name: '[]>'
        fullName: '[]>'
  - uid: 'ServiceCallback<azure-cognitiveservices-face.FaceList[]>'
    name: 'FaceList[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: FaceList
        fullName: FaceList
        uid: azure-cognitiveservices-face.FaceList
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<HttpOperationResponse<azure-cognitiveservices-face.FaceList[]>>'
    name: 'FaceList[]>>'
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: FaceList
        fullName: FaceList
        uid: azure-cognitiveservices-face.FaceList
      - name: '[]>>'
        fullName: '[]>>'
