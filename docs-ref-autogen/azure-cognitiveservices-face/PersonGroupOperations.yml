### YamlMime:UniversalReference
items:
  - uid: azure-cognitiveservices-face.PersonGroupOperations
    name: PersonGroupOperations
    fullName: PersonGroupOperations
    children:
      - azure-cognitiveservices-face.PersonGroupOperations.create
      - azure-cognitiveservices-face.PersonGroupOperations.create_2
      - azure-cognitiveservices-face.PersonGroupOperations.create_1
      - >-
        azure-cognitiveservices-face.PersonGroupOperations.createWithHttpOperationResponse
      - azure-cognitiveservices-face.PersonGroupOperations.deleteMethod
      - azure-cognitiveservices-face.PersonGroupOperations.deleteMethod_2
      - azure-cognitiveservices-face.PersonGroupOperations.deleteMethod_1
      - >-
        azure-cognitiveservices-face.PersonGroupOperations.deleteMethodWithHttpOperationResponse
      - azure-cognitiveservices-face.PersonGroupOperations.get
      - azure-cognitiveservices-face.PersonGroupOperations.get_2
      - azure-cognitiveservices-face.PersonGroupOperations.get_1
      - azure-cognitiveservices-face.PersonGroupOperations.getTrainingStatus
      - azure-cognitiveservices-face.PersonGroupOperations.getTrainingStatus_2
      - azure-cognitiveservices-face.PersonGroupOperations.getTrainingStatus_1
      - >-
        azure-cognitiveservices-face.PersonGroupOperations.getTrainingStatusWithHttpOperationResponse
      - >-
        azure-cognitiveservices-face.PersonGroupOperations.getWithHttpOperationResponse
      - azure-cognitiveservices-face.PersonGroupOperations.list
      - azure-cognitiveservices-face.PersonGroupOperations.list_2
      - azure-cognitiveservices-face.PersonGroupOperations.list_1
      - >-
        azure-cognitiveservices-face.PersonGroupOperations.listWithHttpOperationResponse
      - azure-cognitiveservices-face.PersonGroupOperations.train
      - azure-cognitiveservices-face.PersonGroupOperations.train_2
      - azure-cognitiveservices-face.PersonGroupOperations.train_1
      - >-
        azure-cognitiveservices-face.PersonGroupOperations.trainWithHttpOperationResponse
      - azure-cognitiveservices-face.PersonGroupOperations.update
      - azure-cognitiveservices-face.PersonGroupOperations.update_2
      - azure-cognitiveservices-face.PersonGroupOperations.update_1
      - >-
        azure-cognitiveservices-face.PersonGroupOperations.updateWithHttpOperationResponse
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.create
    name: 'create(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a new person group with specified personGroupId, name,
      user-provided

      userData and recognitionModel.

      <br /> A person group is the container of the uploaded person data,

      including face images and face recognition features.

      <br /> After creation, use [PersonGroup Person -

      Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c)

      to add persons into the group, and then call [PersonGroup -

      Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)

      to get this group ready for [Face -

      Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

      <br /> The person's face, image, and userData will be stored on server
      until

      [PersonGroup Person -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d)

      or [PersonGroup -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245)

      is called.

      <br />

      * Free-tier subscription quota: 1,000 person groups. Each holds up to
      1,000

      persons.

      * S0-tier subscription quota: 1,000,000 person groups. Each holds up to

      10,000 persons.

      * to handle larger scale face identification problem, please consider
      using

      [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).

      <br />

      'recognitionModel' should be specified to associate with this person
      group.

      The default value for 'recognitionModel' is 'recognition_01', if the
      latest

      model needed, please explicitly specify the model you need in this

      parameter. New faces that are added to an existing person group will use
      the

      recognition model that's already associated with the collection. Existing

      face features in a person group can't be updated to features extracted by

      another version of recognition model.
    syntax:
      content: 'function create(personGroupId: string, options?: Object)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Id referencing a particular person group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.create_2
    name: 'create(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a new person group with specified personGroupId, name,
      user-provided

      userData and recognitionModel.

      <br /> A person group is the container of the uploaded person data,

      including face images and face recognition features.

      <br /> After creation, use [PersonGroup Person -

      Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c)

      to add persons into the group, and then call [PersonGroup -

      Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)

      to get this group ready for [Face -

      Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

      <br /> The person's face, image, and userData will be stored on server
      until

      [PersonGroup Person -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d)

      or [PersonGroup -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245)

      is called.

      <br />

      * Free-tier subscription quota: 1,000 person groups. Each holds up to
      1,000

      persons.

      * S0-tier subscription quota: 1,000,000 person groups. Each holds up to

      10,000 persons.

      * to handle larger scale face identification problem, please consider
      using

      [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).

      <br />

      'recognitionModel' should be specified to associate with this person
      group.

      The default value for 'recognitionModel' is 'recognition_01', if the
      latest

      model needed, please explicitly specify the model you need in this

      parameter. New faces that are added to an existing person group will use
      the

      recognition model that's already associated with the collection. Existing

      face features in a person group can't be updated to features extracted by

      another version of recognition model.
    syntax:
      content: >-
        function create(personGroupId: string, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.create_1
    name: 'create(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a new person group with specified personGroupId, name,
      user-provided

      userData and recognitionModel.

      <br /> A person group is the container of the uploaded person data,

      including face images and face recognition features.

      <br /> After creation, use [PersonGroup Person -

      Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c)

      to add persons into the group, and then call [PersonGroup -

      Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)

      to get this group ready for [Face -

      Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

      <br /> The person's face, image, and userData will be stored on server
      until

      [PersonGroup Person -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d)

      or [PersonGroup -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245)

      is called.

      <br />

      * Free-tier subscription quota: 1,000 person groups. Each holds up to
      1,000

      persons.

      * S0-tier subscription quota: 1,000,000 person groups. Each holds up to

      10,000 persons.

      * to handle larger scale face identification problem, please consider
      using

      [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).

      <br />

      'recognitionModel' should be specified to associate with this person
      group.

      The default value for 'recognitionModel' is 'recognition_01', if the
      latest

      model needed, please explicitly specify the model you need in this

      parameter. New faces that are added to an existing person group will use
      the

      recognition model that's already associated with the collection. Existing

      face features in a person group can't be updated to features extracted by

      another version of recognition model.
    syntax:
      content: 'function create(personGroupId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.PersonGroupOperations.createWithHttpOperationResponse
    name: 'createWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a new person group with specified personGroupId, name,
      user-provided

      userData and recognitionModel.

      <br /> A person group is the container of the uploaded person data,

      including face images and face recognition features.

      <br /> After creation, use [PersonGroup Person -

      Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c)

      to add persons into the group, and then call [PersonGroup -

      Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)

      to get this group ready for [Face -

      Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

      <br /> The person's face, image, and userData will be stored on server
      until

      [PersonGroup Person -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d)

      or [PersonGroup -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245)

      is called.

      <br />

      * Free-tier subscription quota: 1,000 person groups. Each holds up to
      1,000

      persons.

      * S0-tier subscription quota: 1,000,000 person groups. Each holds up to

      10,000 persons.

      * to handle larger scale face identification problem, please consider
      using

      [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).

      <br />

      'recognitionModel' should be specified to associate with this person
      group.

      The default value for 'recognitionModel' is 'recognition_01', if the
      latest

      model needed, please explicitly specify the model you need in this

      parameter. New faces that are added to an existing person group will use
      the

      recognition model that's already associated with the collection. Existing

      face features in a person group can't be updated to features extracted by

      another version of recognition model.
    syntax:
      content: >-
        function createWithHttpOperationResponse(personGroupId: string,
        options?: Object)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Id referencing a particular person group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.deleteMethod
    name: 'deleteMethod(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Delete an existing person group. Persisted face features of all people in
      the person group will also be deleted.
    syntax:
      content: 'function deleteMethod(personGroupId: string, options?: Object)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Id referencing a particular person group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.deleteMethod_2
    name: 'deleteMethod(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Delete an existing person group. Persisted face features of all people in
      the person group will also be deleted.
    syntax:
      content: >-
        function deleteMethod(personGroupId: string, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.deleteMethod_1
    name: 'deleteMethod(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Delete an existing person group. Persisted face features of all people in
      the person group will also be deleted.
    syntax:
      content: >-
        function deleteMethod(personGroupId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.PersonGroupOperations.deleteMethodWithHttpOperationResponse
    name: 'deleteMethodWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Delete an existing person group. Persisted face features of all people in
      the person group will also be deleted.
    syntax:
      content: >-
        function deleteMethodWithHttpOperationResponse(personGroupId: string,
        options?: Object)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Id referencing a particular person group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.get
    name: 'get(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve person group name, userData and recognitionModel. To get person

      information under this personGroup, use [PersonGroup Person -

      List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
    syntax:
      content: 'function get(personGroupId: string, options?: Object)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Id referencing a particular person group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.PersonGroup>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.get_2
    name: 'get(string, Object, ServiceCallback<PersonGroup>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve person group name, userData and recognitionModel. To get person

      information under this personGroup, use [PersonGroup Person -

      List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
    syntax:
      content: >-
        function get(personGroupId: string, options: Object, callback:
        ServiceCallback<PersonGroup>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.PersonGroup>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.PersonGroup>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.get_1
    name: 'get(string, ServiceCallback<PersonGroup>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve person group name, userData and recognitionModel. To get person

      information under this personGroup, use [PersonGroup Person -

      List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
    syntax:
      content: >-
        function get(personGroupId: string, callback:
        ServiceCallback<PersonGroup>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.PersonGroup>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.PersonGroup>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.getTrainingStatus
    name: 'getTrainingStatus(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the training status of a person group (completed or ongoing).
    syntax:
      content: 'function getTrainingStatus(personGroupId: string, options?: Object)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Id referencing a particular person group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.TrainingStatus>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.getTrainingStatus_2
    name: 'getTrainingStatus(string, Object, ServiceCallback<TrainingStatus>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the training status of a person group (completed or ongoing).
    syntax:
      content: >-
        function getTrainingStatus(personGroupId: string, options: Object,
        callback: ServiceCallback<TrainingStatus>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.TrainingStatus>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.TrainingStatus>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.getTrainingStatus_1
    name: 'getTrainingStatus(string, ServiceCallback<TrainingStatus>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the training status of a person group (completed or ongoing).
    syntax:
      content: >-
        function getTrainingStatus(personGroupId: string, callback:
        ServiceCallback<TrainingStatus>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.TrainingStatus>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.TrainingStatus>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.PersonGroupOperations.getTrainingStatusWithHttpOperationResponse
    name: 'getTrainingStatusWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the training status of a person group (completed or ongoing).
    syntax:
      content: >-
        function getTrainingStatusWithHttpOperationResponse(personGroupId:
        string, options?: Object)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Id referencing a particular person group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.TrainingStatus>>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.PersonGroupOperations.getWithHttpOperationResponse
    name: 'getWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve person group name, userData and recognitionModel. To get person

      information under this personGroup, use [PersonGroup Person -

      List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
    syntax:
      content: >-
        function getWithHttpOperationResponse(personGroupId: string, options?:
        Object)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Id referencing a particular person group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.PersonGroup>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.list
    name: list(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List person groups’ personGroupId, name, userData and recognitionModel.<br

      />

      * Person groups are stored in alphabetical order of personGroupId.

      * "start" parameter (string, optional) is a user-provided personGroupId

      value that returned entries have larger ids by string comparison. "start"

      set to empty to indicate return from the first item.

      * "top" parameter (int, optional) specifies the number of entries to
      return.

      A maximal of 1000 entries can be returned in one call. To fetch more, you

      can specify "start" with the last returned entry’s Id of the current call.

      <br />

      For example, total 5 person groups: "group1", ..., "group5".

      <br /> "start=&top=" will return all 5 groups.

      <br /> "start=&top=2" will return "group1", "group2".

      <br /> "start=group2&top=3" will return "group3", "group4", "group5".
    syntax:
      content: 'function list(options?: Object)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.PersonGroup[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.list_2
    name: 'list(Object, ServiceCallback<PersonGroup[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List person groups’ personGroupId, name, userData and recognitionModel.<br

      />

      * Person groups are stored in alphabetical order of personGroupId.

      * "start" parameter (string, optional) is a user-provided personGroupId

      value that returned entries have larger ids by string comparison. "start"

      set to empty to indicate return from the first item.

      * "top" parameter (int, optional) specifies the number of entries to
      return.

      A maximal of 1000 entries can be returned in one call. To fetch more, you

      can specify "start" with the last returned entry’s Id of the current call.

      <br />

      For example, total 5 person groups: "group1", ..., "group5".

      <br /> "start=&top=" will return all 5 groups.

      <br /> "start=&top=2" will return "group1", "group2".

      <br /> "start=group2&top=3" will return "group3", "group4", "group5".
    syntax:
      content: 'function list(options: Object, callback: ServiceCallback<PersonGroup[]>)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.PersonGroup[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.PersonGroup[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.list_1
    name: 'list(ServiceCallback<PersonGroup[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List person groups’ personGroupId, name, userData and recognitionModel.<br

      />

      * Person groups are stored in alphabetical order of personGroupId.

      * "start" parameter (string, optional) is a user-provided personGroupId

      value that returned entries have larger ids by string comparison. "start"

      set to empty to indicate return from the first item.

      * "top" parameter (int, optional) specifies the number of entries to
      return.

      A maximal of 1000 entries can be returned in one call. To fetch more, you

      can specify "start" with the last returned entry’s Id of the current call.

      <br />

      For example, total 5 person groups: "group1", ..., "group5".

      <br /> "start=&top=" will return all 5 groups.

      <br /> "start=&top=2" will return "group1", "group2".

      <br /> "start=group2&top=3" will return "group3", "group4", "group5".
    syntax:
      content: 'function list(callback: ServiceCallback<PersonGroup[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.PersonGroup[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.PersonGroup[]>'
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.PersonGroupOperations.listWithHttpOperationResponse
    name: listWithHttpOperationResponse(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List person groups’ personGroupId, name, userData and recognitionModel.<br

      />

      * Person groups are stored in alphabetical order of personGroupId.

      * "start" parameter (string, optional) is a user-provided personGroupId

      value that returned entries have larger ids by string comparison. "start"

      set to empty to indicate return from the first item.

      * "top" parameter (int, optional) specifies the number of entries to
      return.

      A maximal of 1000 entries can be returned in one call. To fetch more, you

      can specify "start" with the last returned entry’s Id of the current call.

      <br />

      For example, total 5 person groups: "group1", ..., "group5".

      <br /> "start=&top=" will return all 5 groups.

      <br /> "start=&top=2" will return "group1", "group2".

      <br /> "start=group2&top=3" will return "group3", "group4", "group5".
    syntax:
      content: 'function listWithHttpOperationResponse(options?: Object)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.PersonGroup[]>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.train
    name: 'train(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a person group training task, the training task may not be started
      immediately.
    syntax:
      content: 'function train(personGroupId: string, options?: Object)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Id referencing a particular person group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.train_2
    name: 'train(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a person group training task, the training task may not be started
      immediately.
    syntax:
      content: >-
        function train(personGroupId: string, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.train_1
    name: 'train(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a person group training task, the training task may not be started
      immediately.
    syntax:
      content: 'function train(personGroupId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.PersonGroupOperations.trainWithHttpOperationResponse
    name: 'trainWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a person group training task, the training task may not be started
      immediately.
    syntax:
      content: >-
        function trainWithHttpOperationResponse(personGroupId: string, options?:
        Object)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Id referencing a particular person group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.update
    name: 'update(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update an existing person group's display name and userData. The
      properties

      which does not appear in request body will not be updated.
    syntax:
      content: 'function update(personGroupId: string, options?: Object)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Id referencing a particular person group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.update_2
    name: 'update(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update an existing person group's display name and userData. The
      properties

      which does not appear in request body will not be updated.
    syntax:
      content: >-
        function update(personGroupId: string, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroupOperations.update_1
    name: 'update(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update an existing person group's display name and userData. The
      properties

      which does not appear in request body will not be updated.
    syntax:
      content: 'function update(personGroupId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.PersonGroupOperations.updateWithHttpOperationResponse
    name: 'updateWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update an existing person group's display name and userData. The
      properties

      which does not appear in request body will not be updated.
    syntax:
      content: >-
        function updateWithHttpOperationResponse(personGroupId: string,
        options?: Object)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Id referencing a particular person group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
references:
  - uid: Promise<azure-cognitiveservices-face.PersonGroup>
    name: PersonGroup>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PersonGroup
        fullName: PersonGroup
        uid: azure-cognitiveservices-face.PersonGroup
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-cognitiveservices-face.PersonGroup>
    name: PersonGroup>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PersonGroup
        fullName: PersonGroup
        uid: azure-cognitiveservices-face.PersonGroup
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-cognitiveservices-face.TrainingStatus>
    name: TrainingStatus>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: TrainingStatus
        fullName: TrainingStatus
        uid: azure-cognitiveservices-face.TrainingStatus
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-cognitiveservices-face.TrainingStatus>
    name: TrainingStatus>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: TrainingStatus
        fullName: TrainingStatus
        uid: azure-cognitiveservices-face.TrainingStatus
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-face.TrainingStatus>>
    name: TrainingStatus>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: TrainingStatus
        fullName: TrainingStatus
        uid: azure-cognitiveservices-face.TrainingStatus
      - name: '>>'
        fullName: '>>'
  - uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.PersonGroup>>
    name: PersonGroup>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: PersonGroup
        fullName: PersonGroup
        uid: azure-cognitiveservices-face.PersonGroup
      - name: '>>'
        fullName: '>>'
  - uid: 'Promise<azure-cognitiveservices-face.PersonGroup[]>'
    name: 'PersonGroup[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PersonGroup
        fullName: PersonGroup
        uid: azure-cognitiveservices-face.PersonGroup
      - name: '[]>'
        fullName: '[]>'
  - uid: 'ServiceCallback<azure-cognitiveservices-face.PersonGroup[]>'
    name: 'PersonGroup[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PersonGroup
        fullName: PersonGroup
        uid: azure-cognitiveservices-face.PersonGroup
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<HttpOperationResponse<azure-cognitiveservices-face.PersonGroup[]>>'
    name: 'PersonGroup[]>>'
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: PersonGroup
        fullName: PersonGroup
        uid: azure-cognitiveservices-face.PersonGroup
      - name: '[]>>'
        fullName: '[]>>'
