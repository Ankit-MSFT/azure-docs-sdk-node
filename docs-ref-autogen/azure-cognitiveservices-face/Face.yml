### YamlMime:UniversalReference
items:
  - uid: azure-cognitiveservices-face.Face
    name: Face
    fullName: Face
    children:
      - azure-cognitiveservices-face.Face.detect
      - azure-cognitiveservices-face.Face.detect_1
      - azure-cognitiveservices-face.Face.detect_2
      - azure-cognitiveservices-face.Face.detectInStream_1
      - azure-cognitiveservices-face.Face.detectInStream_2
      - azure-cognitiveservices-face.Face.detectInStream
      - >-
        azure-cognitiveservices-face.Face.detectInStreamWithHttpOperationResponse
      - azure-cognitiveservices-face.Face.detectWithHttpOperationResponse
      - azure-cognitiveservices-face.Face.findSimilar
      - azure-cognitiveservices-face.Face.findSimilar_1
      - azure-cognitiveservices-face.Face.findSimilar_2
      - azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
      - azure-cognitiveservices-face.Face.group
      - azure-cognitiveservices-face.Face.group_1
      - azure-cognitiveservices-face.Face.group_2
      - azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
      - azure-cognitiveservices-face.Face.identify_1
      - azure-cognitiveservices-face.Face.identify_2
      - azure-cognitiveservices-face.Face.identify
      - azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
      - azure-cognitiveservices-face.Face.verify
      - azure-cognitiveservices-face.Face.verify_1
      - azure-cognitiveservices-face.Face.verify_2
      - azure-cognitiveservices-face.Face.verifyWithHttpOperationResponse
      - azure-cognitiveservices-face.Face.verifyWithPersonGroup
      - azure-cognitiveservices-face.Face.verifyWithPersonGroup_1
      - azure-cognitiveservices-face.Face.verifyWithPersonGroup_2
      - >-
        azure-cognitiveservices-face.Face.verifyWithPersonGroupWithHttpOperationResponse
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.detect
    name: detect
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Detect human faces in an image and returns face locations, and optionally
      with faceIds, landmarks, and attributes.
    syntax:
      content: 'function detect(url: string, options?: Object)'
      parameters:
        - id: url
          type:
            - string
          description: |+

        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.DetectedFace[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.detect_1
    name: detect
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Detect human faces in an image and returns face locations, and optionally
      with faceIds, landmarks, and attributes.
    syntax:
      content: 'function detect(url: string, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: ''
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.DetectedFace[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.detect_2
    name: detect
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Detect human faces in an image and returns face locations, and optionally
      with faceIds, landmarks, and attributes.
    syntax:
      content: >-
        function detect(url: string, options: Object, callback:
        ServiceCallback<DetectedFace[]>)
      parameters:
        - id: url
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.DetectedFace[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.detectInStream_1
    name: detectInStream
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Detect human faces in an image and returns face locations, and optionally
      with faceIds, landmarks, and attributes.
    syntax:
      content: >-
        function detectInStream(image: stream.Readable, callback:
        ServiceCallback<DetectedFace[]>)
      parameters:
        - id: image
          type:
            - stream.Readable
          description: ''
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.DetectedFace[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.detectInStream_2
    name: detectInStream
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Detect human faces in an image and returns face locations, and optionally
      with faceIds, landmarks, and attributes.
    syntax:
      content: >-
        function detectInStream(image: stream.Readable, options: Object,
        callback: ServiceCallback<DetectedFace[]>)
      parameters:
        - id: image
          type:
            - stream.Readable
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.DetectedFace[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.detectInStream
    name: detectInStream
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Detect human faces in an image and returns face locations, and optionally
      with faceIds, landmarks, and attributes.
    syntax:
      content: 'function detectInStream(image: stream.Readable, options?: Object)'
      parameters:
        - id: image
          type:
            - stream.Readable
          description: |
            An image stream.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.DetectedFace[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.detectInStreamWithHttpOperationResponse
    name: detectInStreamWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Detect human faces in an image and returns face locations, and optionally
      with faceIds, landmarks, and attributes.
    syntax:
      content: >-
        function detectInStreamWithHttpOperationResponse(image: stream.Readable,
        options?: Object)
      parameters:
        - id: image
          type:
            - stream.Readable
          description: |
            An image stream.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.detectWithHttpOperationResponse
    name: detectWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Detect human faces in an image and returns face locations, and optionally
      with faceIds, landmarks, and attributes.
    syntax:
      content: 'function detectWithHttpOperationResponse(url: string, options?: Object)'
      parameters:
        - id: url
          type:
            - string
          description: |+

        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.findSimilar
    name: findSimilar
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Given query face's faceId, find the similar-looking faces from a faceId
      array or a faceListId.
    syntax:
      content: 'function findSimilar(faceId: string, options?: Object)'
      parameters:
        - id: faceId
          type:
            - string
          description: >
            FaceId of the query face. User needs to call Face -

            Detect first to get a valid faceId. Note that this faceId is not
            persisted

            and will expire 24 hours after the detection call
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.SimilarFaceResult[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.findSimilar_1
    name: findSimilar
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Given query face's faceId, find the similar-looking faces from a faceId
      array or a faceListId.
    syntax:
      content: >-
        function findSimilar(faceId: string, callback:
        ServiceCallback<SimilarFaceResult[]>)
      parameters:
        - id: faceId
          type:
            - string
          description: ''
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.SimilarFaceResult[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.findSimilar_2
    name: findSimilar
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Given query face's faceId, find the similar-looking faces from a faceId
      array or a faceListId.
    syntax:
      content: >-
        function findSimilar(faceId: string, options: Object, callback:
        ServiceCallback<SimilarFaceResult[]>)
      parameters:
        - id: faceId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.SimilarFaceResult[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
    name: findSimilarWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Given query face's faceId, find the similar-looking faces from a faceId
      array or a faceListId.
    syntax:
      content: >-
        function findSimilarWithHttpOperationResponse(faceId: string, options?:
        Object)
      parameters:
        - id: faceId
          type:
            - string
          description: >
            FaceId of the query face. User needs to call Face -

            Detect first to get a valid faceId. Note that this faceId is not
            persisted

            and will expire 24 hours after the detection call
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFaceResult[]>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.group
    name: group
    children: []
    type: method
    langs:
      - typeScript
    summary: Divide candidate faces into groups based on face similarity.
    syntax:
      content: 'function group(faceIds: string[], options?: Object)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: |
            Array of candidate faceId created by Face - Detect.
            The maximum is 1000 faces
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.GroupResponse>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.group_1
    name: group
    children: []
    type: method
    langs:
      - typeScript
    summary: Divide candidate faces into groups based on face similarity.
    syntax:
      content: >-
        function group(faceIds: string[], callback:
        ServiceCallback<GroupResponse>)
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.GroupResponse>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.GroupResponse>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.group_2
    name: group
    children: []
    type: method
    langs:
      - typeScript
    summary: Divide candidate faces into groups based on face similarity.
    syntax:
      content: >-
        function group(faceIds: string[], options: Object, callback:
        ServiceCallback<GroupResponse>)
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.GroupResponse>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.GroupResponse>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
    name: groupWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: Divide candidate faces into groups based on face similarity.
    syntax:
      content: >-
        function groupWithHttpOperationResponse(faceIds: string[], options?:
        Object)
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: |
            Array of candidate faceId created by Face - Detect.
            The maximum is 1000 faces
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResponse>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.identify_1
    name: identify
    children: []
    type: method
    langs:
      - typeScript
    summary: Identify unknown faces from a person group.
    syntax:
      content: >-
        function identify(personGroupId: string, faceIds: string[], callback:
        ServiceCallback<IdentifyResultItem[]>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: faceIds
          type:
            - 'string[]'
          description: ''
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.IdentifyResultItem[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.identify_2
    name: identify
    children: []
    type: method
    langs:
      - typeScript
    summary: Identify unknown faces from a person group.
    syntax:
      content: >-
        function identify(personGroupId: string, faceIds: string[], options:
        Object, callback: ServiceCallback<IdentifyResultItem[]>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: faceIds
          type:
            - 'string[]'
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.IdentifyResultItem[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.identify
    name: identify
    children: []
    type: method
    langs:
      - typeScript
    summary: Identify unknown faces from a person group.
    syntax:
      content: >-
        function identify(personGroupId: string, faceIds: string[], options?:
        Object)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            personGroupId of the target person group,
            created by PersonGroups.Create
        - id: faceIds
          type:
            - 'string[]'
          description: |
            Array of candidate faceId created by Face - Detect.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.IdentifyResultItem[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
    name: identifyWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: Identify unknown faces from a person group.
    syntax:
      content: >-
        function identifyWithHttpOperationResponse(personGroupId: string,
        faceIds: string[], options?: Object)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            personGroupId of the target person group,
            created by PersonGroups.Create
        - id: faceIds
          type:
            - 'string[]'
          description: |
            Array of candidate faceId created by Face - Detect.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResultItem[]>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.verify
    name: verify
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Verify whether two faces belong to a same person or whether one face
      belongs

      to a person.
    syntax:
      content: 'function verify(faceId1: string, faceId2: string, options?: Object)'
      parameters:
        - id: faceId1
          type:
            - string
          description: |
            faceId of the first face, comes from Face - Detect
        - id: faceId2
          type:
            - string
          description: |
            faceId of the second face, comes from Face - Detect
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.VerifyResult>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.verify_1
    name: verify
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Verify whether two faces belong to a same person or whether one face
      belongs

      to a person.
    syntax:
      content: >-
        function verify(faceId1: string, faceId2: string, callback:
        ServiceCallback<VerifyResult>)
      parameters:
        - id: faceId1
          type:
            - string
          description: ''
        - id: faceId2
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.VerifyResult>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.verify_2
    name: verify
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Verify whether two faces belong to a same person or whether one face
      belongs

      to a person.
    syntax:
      content: >-
        function verify(faceId1: string, faceId2: string, options: Object,
        callback: ServiceCallback<VerifyResult>)
      parameters:
        - id: faceId1
          type:
            - string
          description: ''
        - id: faceId2
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.VerifyResult>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.verifyWithHttpOperationResponse
    name: verifyWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Verify whether two faces belong to a same person or whether one face
      belongs

      to a person.
    syntax:
      content: >-
        function verifyWithHttpOperationResponse(faceId1: string, faceId2:
        string, options?: Object)
      parameters:
        - id: faceId1
          type:
            - string
          description: |
            faceId of the first face, comes from Face - Detect
        - id: faceId2
          type:
            - string
          description: |
            faceId of the second face, comes from Face - Detect
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup
    name: verifyWithPersonGroup
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Verify whether two faces belong to a same person. Compares a face Id with
      a

      Person Id
    syntax:
      content: >-
        function verifyWithPersonGroup(faceId: string, personId: string,
        personGroupId: string, options?: Object)
      parameters:
        - id: faceId
          type:
            - string
          description: |
            faceId the face, comes from Face - Detect
        - id: personId
          type:
            - string
          description: |
            Specify a certain person in a person group.
            personId is created in Persons.Create.
        - id: personGroupId
          type:
            - string
          description: |
            Using existing personGroupId and personId for
            fast loading a specified person. personGroupId is created in Person
            Groups.Create.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.VerifyResult>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup_1
    name: verifyWithPersonGroup
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Verify whether two faces belong to a same person. Compares a face Id with
      a

      Person Id
    syntax:
      content: >-
        function verifyWithPersonGroup(faceId: string, personId: string,
        personGroupId: string, callback: ServiceCallback<VerifyResult>)
      parameters:
        - id: faceId
          type:
            - string
          description: ''
        - id: personId
          type:
            - string
          description: ''
        - id: personGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.VerifyResult>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup_2
    name: verifyWithPersonGroup
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Verify whether two faces belong to a same person. Compares a face Id with
      a

      Person Id
    syntax:
      content: >-
        function verifyWithPersonGroup(faceId: string, personId: string,
        personGroupId: string, options: Object, callback:
        ServiceCallback<VerifyResult>)
      parameters:
        - id: faceId
          type:
            - string
          description: ''
        - id: personId
          type:
            - string
          description: ''
        - id: personGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.VerifyResult>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.Face.verifyWithPersonGroupWithHttpOperationResponse
    name: verifyWithPersonGroupWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Verify whether two faces belong to a same person. Compares a face Id with
      a

      Person Id
    syntax:
      content: >-
        function verifyWithPersonGroupWithHttpOperationResponse(faceId: string,
        personId: string, personGroupId: string, options?: Object)
      parameters:
        - id: faceId
          type:
            - string
          description: |
            faceId the face, comes from Face - Detect
        - id: personId
          type:
            - string
          description: |
            Specify a certain person in a person group.
            personId is created in Persons.Create.
        - id: personGroupId
          type:
            - string
          description: |
            Using existing personGroupId and personId for
            fast loading a specified person. personGroupId is created in Person
            Groups.Create.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
    package: azure-cognitiveservices-face
references:
  - uid: 'Promise<azure-cognitiveservices-face.DetectedFace[]>'
    name: 'DetectedFace[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DetectedFace
        fullName: DetectedFace
        uid: azure-cognitiveservices-face.DetectedFace
      - name: '[]>'
        fullName: '[]>'
  - uid: 'ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>'
    name: 'DetectedFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DetectedFace
        fullName: DetectedFace
        uid: azure-cognitiveservices-face.DetectedFace
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
    name: 'DetectedFace[]>>'
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: DetectedFace
        fullName: DetectedFace
        uid: azure-cognitiveservices-face.DetectedFace
      - name: '[]>>'
        fullName: '[]>>'
  - uid: 'Promise<azure-cognitiveservices-face.SimilarFaceResult[]>'
    name: 'SimilarFaceResult[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SimilarFaceResult
        fullName: SimilarFaceResult
        uid: azure-cognitiveservices-face.SimilarFaceResult
      - name: '[]>'
        fullName: '[]>'
  - uid: 'ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>'
    name: 'SimilarFaceResult[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SimilarFaceResult
        fullName: SimilarFaceResult
        uid: azure-cognitiveservices-face.SimilarFaceResult
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFaceResult[]>>
    name: 'SimilarFaceResult[]>>'
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: SimilarFaceResult
        fullName: SimilarFaceResult
        uid: azure-cognitiveservices-face.SimilarFaceResult
      - name: '[]>>'
        fullName: '[]>>'
  - uid: Promise<azure-cognitiveservices-face.GroupResponse>
    name: GroupResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GroupResponse
        fullName: GroupResponse
        uid: azure-cognitiveservices-face.GroupResponse
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-cognitiveservices-face.GroupResponse>
    name: GroupResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: GroupResponse
        fullName: GroupResponse
        uid: azure-cognitiveservices-face.GroupResponse
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResponse>>
    name: GroupResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: GroupResponse
        fullName: GroupResponse
        uid: azure-cognitiveservices-face.GroupResponse
      - name: '>>'
        fullName: '>>'
  - uid: 'Promise<azure-cognitiveservices-face.IdentifyResultItem[]>'
    name: 'IdentifyResultItem[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: IdentifyResultItem
        fullName: IdentifyResultItem
        uid: azure-cognitiveservices-face.IdentifyResultItem
      - name: '[]>'
        fullName: '[]>'
  - uid: 'ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>'
    name: 'IdentifyResultItem[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: IdentifyResultItem
        fullName: IdentifyResultItem
        uid: azure-cognitiveservices-face.IdentifyResultItem
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResultItem[]>>
    name: 'IdentifyResultItem[]>>'
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: IdentifyResultItem
        fullName: IdentifyResultItem
        uid: azure-cognitiveservices-face.IdentifyResultItem
      - name: '[]>>'
        fullName: '[]>>'
  - uid: Promise<azure-cognitiveservices-face.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: VerifyResult
        fullName: VerifyResult
        uid: azure-cognitiveservices-face.VerifyResult
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-cognitiveservices-face.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: VerifyResult
        fullName: VerifyResult
        uid: azure-cognitiveservices-face.VerifyResult
      - name: '>'
        fullName: '>'
  - uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
    name: VerifyResult>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: VerifyResult
        fullName: VerifyResult
        uid: azure-cognitiveservices-face.VerifyResult
      - name: '>>'
        fullName: '>>'
