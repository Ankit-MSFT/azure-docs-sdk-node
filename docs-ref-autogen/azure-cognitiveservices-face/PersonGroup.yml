### YamlMime:UniversalReference
items:
  - uid: azure-cognitiveservices-face.PersonGroup
    name: PersonGroup
    fullName: PersonGroup
    children:
      - azure-cognitiveservices-face.PersonGroup.create
      - azure-cognitiveservices-face.PersonGroup.create_1
      - azure-cognitiveservices-face.PersonGroup.create_2
      - azure-cognitiveservices-face.PersonGroup.createWithHttpOperationResponse
      - azure-cognitiveservices-face.PersonGroup.deleteMethod
      - azure-cognitiveservices-face.PersonGroup.deleteMethod_2
      - azure-cognitiveservices-face.PersonGroup.deleteMethod_1
      - >-
        azure-cognitiveservices-face.PersonGroup.deleteMethodWithHttpOperationResponse
      - azure-cognitiveservices-face.PersonGroup.get
      - azure-cognitiveservices-face.PersonGroup.get_2
      - azure-cognitiveservices-face.PersonGroup.get_1
      - azure-cognitiveservices-face.PersonGroup.getTrainingStatus
      - azure-cognitiveservices-face.PersonGroup.getTrainingStatus_1
      - azure-cognitiveservices-face.PersonGroup.getTrainingStatus_2
      - >-
        azure-cognitiveservices-face.PersonGroup.getTrainingStatusWithHttpOperationResponse
      - azure-cognitiveservices-face.PersonGroup.getWithHttpOperationResponse
      - azure-cognitiveservices-face.PersonGroup.list_1
      - azure-cognitiveservices-face.PersonGroup.list_2
      - azure-cognitiveservices-face.PersonGroup.list
      - azure-cognitiveservices-face.PersonGroup.listWithHttpOperationResponse
      - azure-cognitiveservices-face.PersonGroup.train
      - azure-cognitiveservices-face.PersonGroup.train_1
      - azure-cognitiveservices-face.PersonGroup.train_2
      - azure-cognitiveservices-face.PersonGroup.trainWithHttpOperationResponse
      - azure-cognitiveservices-face.PersonGroup.update
      - azure-cognitiveservices-face.PersonGroup.update_1
      - azure-cognitiveservices-face.PersonGroup.update_2
      - azure-cognitiveservices-face.PersonGroup.updateWithHttpOperationResponse
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.create
    name: create
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Create a new person group with specified personGroupId, name and
      user-provided userData.
    syntax:
      content: 'function create(personGroupId: string, options?: function)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            User-provided personGroupId as a string.
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.create_1
    name: create
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Create a new person group with specified personGroupId, name and
      user-provided userData.
    syntax:
      content: 'function create(personGroupId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.create_2
    name: create
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Create a new person group with specified personGroupId, name and
      user-provided userData.
    syntax:
      content: >-
        function create(personGroupId: string, options: function, callback:
        ServiceCallback<void>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - function
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.createWithHttpOperationResponse
    name: createWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Create a new person group with specified personGroupId, name and
      user-provided userData.
    syntax:
      content: >-
        function createWithHttpOperationResponse(personGroupId: string,
        options?: function)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            User-provided personGroupId as a string.
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.deleteMethod
    name: deleteMethod
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing person group. Persisted face images of all people in
      the

      person group will also be deleted.
    syntax:
      content: 'function deleteMethod(personGroupId: string, options?: function)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            The personGroupId of the person group to be
            deleted.
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.deleteMethod_2
    name: deleteMethod
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing person group. Persisted face images of all people in
      the

      person group will also be deleted.
    syntax:
      content: >-
        function deleteMethod(personGroupId: string, options: function,
        callback: ServiceCallback<void>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - function
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.deleteMethod_1
    name: deleteMethod
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing person group. Persisted face images of all people in
      the

      person group will also be deleted.
    syntax:
      content: >-
        function deleteMethod(personGroupId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.PersonGroup.deleteMethodWithHttpOperationResponse
    name: deleteMethodWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing person group. Persisted face images of all people in
      the

      person group will also be deleted.
    syntax:
      content: >-
        function deleteMethodWithHttpOperationResponse(personGroupId: string,
        options?: function)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            The personGroupId of the person group to be
            deleted.
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.get
    name: get
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the information of a person group, including its name and
      userData.
    syntax:
      content: 'function get(personGroupId: string, options?: function)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            personGroupId of the target person group.
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.PersonGroupResult>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.get_2
    name: get
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the information of a person group, including its name and
      userData.
    syntax:
      content: >-
        function get(personGroupId: string, options: function, callback:
        ServiceCallback<PersonGroupResult>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - function
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.PersonGroupResult>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.PersonGroupResult>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.get_1
    name: get
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the information of a person group, including its name and
      userData.
    syntax:
      content: >-
        function get(personGroupId: string, callback:
        ServiceCallback<PersonGroupResult>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.PersonGroupResult>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.PersonGroupResult>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.getTrainingStatus
    name: getTrainingStatus
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the training status of a person group (completed or ongoing).
    syntax:
      content: 'function getTrainingStatus(personGroupId: string, options?: function)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            personGroupId of target person group.
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.TrainingStatus1>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.getTrainingStatus_1
    name: getTrainingStatus
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the training status of a person group (completed or ongoing).
    syntax:
      content: >-
        function getTrainingStatus(personGroupId: string, callback:
        ServiceCallback<TrainingStatus1>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.TrainingStatus1>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.TrainingStatus1>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.getTrainingStatus_2
    name: getTrainingStatus
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the training status of a person group (completed or ongoing).
    syntax:
      content: >-
        function getTrainingStatus(personGroupId: string, options: function,
        callback: ServiceCallback<TrainingStatus1>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - function
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.TrainingStatus1>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.TrainingStatus1>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.PersonGroup.getTrainingStatusWithHttpOperationResponse
    name: getTrainingStatusWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the training status of a person group (completed or ongoing).
    syntax:
      content: >-
        function getTrainingStatusWithHttpOperationResponse(personGroupId:
        string, options?: function)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            personGroupId of target person group.
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.TrainingStatus1>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.getWithHttpOperationResponse
    name: getWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the information of a person group, including its name and
      userData.
    syntax:
      content: >-
        function getWithHttpOperationResponse(personGroupId: string, options?:
        function)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            personGroupId of the target person group.
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.PersonGroupResult>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.list_1
    name: list
    children: []
    type: method
    langs:
      - typeScript
    summary: List person groups and their information.
    syntax:
      content: 'function list(callback: ServiceCallback<PersonGroupResult[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.PersonGroupResult[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.PersonGroupResult[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.list_2
    name: list
    children: []
    type: method
    langs:
      - typeScript
    summary: List person groups and their information.
    syntax:
      content: >-
        function list(options: function, callback:
        ServiceCallback<PersonGroupResult[]>)
      parameters:
        - id: options
          type:
            - function
          description: ''
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.PersonGroupResult[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.PersonGroupResult[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.list
    name: list
    children: []
    type: method
    langs:
      - typeScript
    summary: List person groups and their information.
    syntax:
      content: 'function list(options?: function)'
      parameters:
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.PersonGroupResult[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.listWithHttpOperationResponse
    name: listWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: List person groups and their information.
    syntax:
      content: 'function listWithHttpOperationResponse(options?: function)'
      parameters:
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.PersonGroupResult[]>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.train
    name: train
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a person group training task, the training task may not be started
      immediately.
    syntax:
      content: 'function train(personGroupId: string, options?: function)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Target person group to be trained.
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.train_1
    name: train
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a person group training task, the training task may not be started
      immediately.
    syntax:
      content: 'function train(personGroupId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.train_2
    name: train
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a person group training task, the training task may not be started
      immediately.
    syntax:
      content: >-
        function train(personGroupId: string, options: function, callback:
        ServiceCallback<void>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - function
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.trainWithHttpOperationResponse
    name: trainWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a person group training task, the training task may not be started
      immediately.
    syntax:
      content: >-
        function trainWithHttpOperationResponse(personGroupId: string, options?:
        function)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            Target person group to be trained.
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.update
    name: update
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update an existing person group's display name and userData. The
      properties

      which does not appear in request body will not be updated.
    syntax:
      content: 'function update(personGroupId: string, options?: function)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            personGroupId of the person group to be
            updated.
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.update_1
    name: update
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update an existing person group's display name and userData. The
      properties

      which does not appear in request body will not be updated.
    syntax:
      content: 'function update(personGroupId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.update_2
    name: update
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update an existing person group's display name and userData. The
      properties

      which does not appear in request body will not be updated.
    syntax:
      content: >-
        function update(personGroupId: string, options: function, callback:
        ServiceCallback<void>)
      parameters:
        - id: personGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - function
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.PersonGroup.updateWithHttpOperationResponse
    name: updateWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update an existing person group's display name and userData. The
      properties

      which does not appear in request body will not be updated.
    syntax:
      content: >-
        function updateWithHttpOperationResponse(personGroupId: string,
        options?: function)
      parameters:
        - id: personGroupId
          type:
            - string
          description: |
            personGroupId of the person group to be
            updated.
        - id: options
          type:
            - function
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
references:
  - uid: Promise<azure-cognitiveservices-face.PersonGroupResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PersonGroupResult
        fullName: PersonGroupResult
        uid: azure-cognitiveservices-face.PersonGroupResult
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-cognitiveservices-face.PersonGroupResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PersonGroupResult
        fullName: PersonGroupResult
        uid: azure-cognitiveservices-face.PersonGroupResult
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-cognitiveservices-face.TrainingStatus1>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: TrainingStatus1
        fullName: TrainingStatus1
        uid: azure-cognitiveservices-face.TrainingStatus1
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-cognitiveservices-face.TrainingStatus1>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: TrainingStatus1
        fullName: TrainingStatus1
        uid: azure-cognitiveservices-face.TrainingStatus1
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-face.TrainingStatus1>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: TrainingStatus1
        fullName: TrainingStatus1
        uid: azure-cognitiveservices-face.TrainingStatus1
      - name: '>>'
        fullName: '>>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-face.PersonGroupResult>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: PersonGroupResult
        fullName: PersonGroupResult
        uid: azure-cognitiveservices-face.PersonGroupResult
      - name: '>>'
        fullName: '>>'
  - uid: 'Promise<azure-cognitiveservices-face.PersonGroupResult[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PersonGroupResult
        fullName: PersonGroupResult
        uid: azure-cognitiveservices-face.PersonGroupResult
      - name: '[]>'
        fullName: '[]>'
  - uid: 'ServiceCallback<azure-cognitiveservices-face.PersonGroupResult[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PersonGroupResult
        fullName: PersonGroupResult
        uid: azure-cognitiveservices-face.PersonGroupResult
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-face.PersonGroupResult[]>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: PersonGroupResult
        fullName: PersonGroupResult
        uid: azure-cognitiveservices-face.PersonGroupResult
      - name: '[]>>'
        fullName: '[]>>'
