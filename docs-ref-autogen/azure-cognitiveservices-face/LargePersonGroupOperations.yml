### YamlMime:UniversalReference
items:
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations
    name: LargePersonGroupOperations
    fullName: LargePersonGroupOperations
    children:
      - azure-cognitiveservices-face.LargePersonGroupOperations.create
      - azure-cognitiveservices-face.LargePersonGroupOperations.create_2
      - azure-cognitiveservices-face.LargePersonGroupOperations.create_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.createWithHttpOperationResponse
      - azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethod
      - azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethod_2
      - azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethod_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethodWithHttpOperationResponse
      - azure-cognitiveservices-face.LargePersonGroupOperations.get
      - azure-cognitiveservices-face.LargePersonGroupOperations.get_2
      - azure-cognitiveservices-face.LargePersonGroupOperations.get_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatus
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatus_2
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatus_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatusWithHttpOperationResponse
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.getWithHttpOperationResponse
      - azure-cognitiveservices-face.LargePersonGroupOperations.list
      - azure-cognitiveservices-face.LargePersonGroupOperations.list_2
      - azure-cognitiveservices-face.LargePersonGroupOperations.list_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.listWithHttpOperationResponse
      - azure-cognitiveservices-face.LargePersonGroupOperations.train
      - azure-cognitiveservices-face.LargePersonGroupOperations.train_2
      - azure-cognitiveservices-face.LargePersonGroupOperations.train_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.trainWithHttpOperationResponse
      - azure-cognitiveservices-face.LargePersonGroupOperations.update
      - azure-cognitiveservices-face.LargePersonGroupOperations.update_2
      - azure-cognitiveservices-face.LargePersonGroupOperations.update_1
      - >-
        azure-cognitiveservices-face.LargePersonGroupOperations.updateWithHttpOperationResponse
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.create
    name: 'create(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a new large person group with user-specified largePersonGroupId,

      name, an optional userData and recognitionModel.

      <br /> A large person group is the container of the uploaded person data,

      including face images and face recognition feature, and up to 1,000,000

      people.

      <br /> After creation, use [LargePersonGroup Person -

      Create](/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40)

      to add person into the group, and call [LargePersonGroup -

      Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4)

      to get this group ready for [Face -

      Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

      <br /> The person face, image, and userData will be stored on server until

      [LargePersonGroup Person -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2)

      or [LargePersonGroup -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f)

      is called.

      <br />

      * Free-tier subscription quota: 1,000 large person groups.

      * S0-tier subscription quota: 1,000,000 large person groups.

      <br />

      'recognitionModel' should be specified to associate with this large person

      group. The default value for 'recognitionModel' is 'recognition_01', if
      the

      latest model needed, please explicitly specify the model you need in this

      parameter. New faces that are added to an existing large person group will

      use the recognition model that's already associated with the collection.

      Existing face features in a large person group can't be updated to
      features

      extracted by another version of recognition model.
    syntax:
      content: 'function create(largePersonGroupId: string, options?: Object)'
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.create_2
    name: 'create(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a new large person group with user-specified largePersonGroupId,

      name, an optional userData and recognitionModel.

      <br /> A large person group is the container of the uploaded person data,

      including face images and face recognition feature, and up to 1,000,000

      people.

      <br /> After creation, use [LargePersonGroup Person -

      Create](/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40)

      to add person into the group, and call [LargePersonGroup -

      Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4)

      to get this group ready for [Face -

      Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

      <br /> The person face, image, and userData will be stored on server until

      [LargePersonGroup Person -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2)

      or [LargePersonGroup -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f)

      is called.

      <br />

      * Free-tier subscription quota: 1,000 large person groups.

      * S0-tier subscription quota: 1,000,000 large person groups.

      <br />

      'recognitionModel' should be specified to associate with this large person

      group. The default value for 'recognitionModel' is 'recognition_01', if
      the

      latest model needed, please explicitly specify the model you need in this

      parameter. New faces that are added to an existing large person group will

      use the recognition model that's already associated with the collection.

      Existing face features in a large person group can't be updated to
      features

      extracted by another version of recognition model.
    syntax:
      content: >-
        function create(largePersonGroupId: string, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.create_1
    name: 'create(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a new large person group with user-specified largePersonGroupId,

      name, an optional userData and recognitionModel.

      <br /> A large person group is the container of the uploaded person data,

      including face images and face recognition feature, and up to 1,000,000

      people.

      <br /> After creation, use [LargePersonGroup Person -

      Create](/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40)

      to add person into the group, and call [LargePersonGroup -

      Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4)

      to get this group ready for [Face -

      Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

      <br /> The person face, image, and userData will be stored on server until

      [LargePersonGroup Person -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2)

      or [LargePersonGroup -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f)

      is called.

      <br />

      * Free-tier subscription quota: 1,000 large person groups.

      * S0-tier subscription quota: 1,000,000 large person groups.

      <br />

      'recognitionModel' should be specified to associate with this large person

      group. The default value for 'recognitionModel' is 'recognition_01', if
      the

      latest model needed, please explicitly specify the model you need in this

      parameter. New faces that are added to an existing large person group will

      use the recognition model that's already associated with the collection.

      Existing face features in a large person group can't be updated to
      features

      extracted by another version of recognition model.
    syntax:
      content: >-
        function create(largePersonGroupId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.createWithHttpOperationResponse
    name: 'createWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a new large person group with user-specified largePersonGroupId,

      name, an optional userData and recognitionModel.

      <br /> A large person group is the container of the uploaded person data,

      including face images and face recognition feature, and up to 1,000,000

      people.

      <br /> After creation, use [LargePersonGroup Person -

      Create](/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40)

      to add person into the group, and call [LargePersonGroup -

      Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4)

      to get this group ready for [Face -

      Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).

      <br /> The person face, image, and userData will be stored on server until

      [LargePersonGroup Person -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2)

      or [LargePersonGroup -

      Delete](/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f)

      is called.

      <br />

      * Free-tier subscription quota: 1,000 large person groups.

      * S0-tier subscription quota: 1,000,000 large person groups.

      <br />

      'recognitionModel' should be specified to associate with this large person

      group. The default value for 'recognitionModel' is 'recognition_01', if
      the

      latest model needed, please explicitly specify the model you need in this

      parameter. New faces that are added to an existing large person group will

      use the recognition model that's already associated with the collection.

      Existing face features in a large person group can't be updated to
      features

      extracted by another version of recognition model.
    syntax:
      content: >-
        function createWithHttpOperationResponse(largePersonGroupId: string,
        options?: Object)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethod
    name: 'deleteMethod(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing large person group. Persisted face features of all
      people

      in the large person group will also be deleted.
    syntax:
      content: 'function deleteMethod(largePersonGroupId: string, options?: Object)'
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethod_2
    name: 'deleteMethod(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing large person group. Persisted face features of all
      people

      in the large person group will also be deleted.
    syntax:
      content: >-
        function deleteMethod(largePersonGroupId: string, options: Object,
        callback: ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethod_1
    name: 'deleteMethod(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing large person group. Persisted face features of all
      people

      in the large person group will also be deleted.
    syntax:
      content: >-
        function deleteMethod(largePersonGroupId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.deleteMethodWithHttpOperationResponse
    name: 'deleteMethodWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete an existing large person group. Persisted face features of all
      people

      in the large person group will also be deleted.
    syntax:
      content: >-
        function deleteMethodWithHttpOperationResponse(largePersonGroupId:
        string, options?: Object)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.get
    name: 'get(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the information of a large person group, including its name,

      userData and recognitionModel. This API returns large person group

      information only, use [LargePersonGroup Person -

      List](/docs/services/563879b61984550e40cbbe8d/operations/599adda06ac60f11b48b5aa1)

      instead to retrieve person information under the large person group.
    syntax:
      content: 'function get(largePersonGroupId: string, options?: Object)'
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.LargePersonGroup>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.get_2
    name: 'get(string, Object, ServiceCallback<LargePersonGroup>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the information of a large person group, including its name,

      userData and recognitionModel. This API returns large person group

      information only, use [LargePersonGroup Person -

      List](/docs/services/563879b61984550e40cbbe8d/operations/599adda06ac60f11b48b5aa1)

      instead to retrieve person information under the large person group.
    syntax:
      content: >-
        function get(largePersonGroupId: string, options: Object, callback:
        ServiceCallback<LargePersonGroup>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.LargePersonGroup>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.LargePersonGroup>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.get_1
    name: 'get(string, ServiceCallback<LargePersonGroup>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the information of a large person group, including its name,

      userData and recognitionModel. This API returns large person group

      information only, use [LargePersonGroup Person -

      List](/docs/services/563879b61984550e40cbbe8d/operations/599adda06ac60f11b48b5aa1)

      instead to retrieve person information under the large person group.
    syntax:
      content: >-
        function get(largePersonGroupId: string, callback:
        ServiceCallback<LargePersonGroup>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.LargePersonGroup>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.LargePersonGroup>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatus
    name: 'getTrainingStatus(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the training status of a large person group (completed or
      ongoing).
    syntax:
      content: 'function getTrainingStatus(largePersonGroupId: string, options?: Object)'
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<azure-cognitiveservices-face.TrainingStatus>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatus_2
    name: 'getTrainingStatus(string, Object, ServiceCallback<TrainingStatus>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the training status of a large person group (completed or
      ongoing).
    syntax:
      content: >-
        function getTrainingStatus(largePersonGroupId: string, options: Object,
        callback: ServiceCallback<TrainingStatus>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.TrainingStatus>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.TrainingStatus>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatus_1
    name: 'getTrainingStatus(string, ServiceCallback<TrainingStatus>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the training status of a large person group (completed or
      ongoing).
    syntax:
      content: >-
        function getTrainingStatus(largePersonGroupId: string, callback:
        ServiceCallback<TrainingStatus>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<azure-cognitiveservices-face.TrainingStatus>
          description: ''
      return:
        type:
          - Promise<azure-cognitiveservices-face.TrainingStatus>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.getTrainingStatusWithHttpOperationResponse
    name: 'getTrainingStatusWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the training status of a large person group (completed or
      ongoing).
    syntax:
      content: >-
        function getTrainingStatusWithHttpOperationResponse(largePersonGroupId:
        string, options?: Object)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.TrainingStatus>>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.getWithHttpOperationResponse
    name: 'getWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the information of a large person group, including its name,

      userData and recognitionModel. This API returns large person group

      information only, use [LargePersonGroup Person -

      List](/docs/services/563879b61984550e40cbbe8d/operations/599adda06ac60f11b48b5aa1)

      instead to retrieve person information under the large person group.
    syntax:
      content: >-
        function getWithHttpOperationResponse(largePersonGroupId: string,
        options?: Object)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.LargePersonGroup>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.list
    name: list(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List all existing large person groups’ largePersonGroupId, name, userData

      and recognitionModel.<br />

      * Large person groups are stored in alphabetical order of

      largePersonGroupId.

      * "start" parameter (string, optional) is a user-provided
      largePersonGroupId

      value that returned entries have larger ids by string comparison. "start"

      set to empty to indicate return from the first item.

      * "top" parameter (int, optional) specifies the number of entries to
      return.

      A maximal of 1000 entries can be returned in one call. To fetch more, you

      can specify "start" with the last returned entry’s Id of the current call.

      <br />

      For example, total 5 large person groups: "group1", ..., "group5".

      <br /> "start=&top=" will return all 5 groups.

      <br /> "start=&top=2" will return "group1", "group2".

      <br /> "start=group2&top=3" will return "group3", "group4", "group5".
    syntax:
      content: 'function list(options?: Object)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.LargePersonGroup[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.list_2
    name: 'list(Object, ServiceCallback<LargePersonGroup[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List all existing large person groups’ largePersonGroupId, name, userData

      and recognitionModel.<br />

      * Large person groups are stored in alphabetical order of

      largePersonGroupId.

      * "start" parameter (string, optional) is a user-provided
      largePersonGroupId

      value that returned entries have larger ids by string comparison. "start"

      set to empty to indicate return from the first item.

      * "top" parameter (int, optional) specifies the number of entries to
      return.

      A maximal of 1000 entries can be returned in one call. To fetch more, you

      can specify "start" with the last returned entry’s Id of the current call.

      <br />

      For example, total 5 large person groups: "group1", ..., "group5".

      <br /> "start=&top=" will return all 5 groups.

      <br /> "start=&top=2" will return "group1", "group2".

      <br /> "start=group2&top=3" will return "group3", "group4", "group5".
    syntax:
      content: >-
        function list(options: Object, callback:
        ServiceCallback<LargePersonGroup[]>)
      parameters:
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.LargePersonGroup[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.LargePersonGroup[]>'
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.list_1
    name: 'list(ServiceCallback<LargePersonGroup[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List all existing large person groups’ largePersonGroupId, name, userData

      and recognitionModel.<br />

      * Large person groups are stored in alphabetical order of

      largePersonGroupId.

      * "start" parameter (string, optional) is a user-provided
      largePersonGroupId

      value that returned entries have larger ids by string comparison. "start"

      set to empty to indicate return from the first item.

      * "top" parameter (int, optional) specifies the number of entries to
      return.

      A maximal of 1000 entries can be returned in one call. To fetch more, you

      can specify "start" with the last returned entry’s Id of the current call.

      <br />

      For example, total 5 large person groups: "group1", ..., "group5".

      <br /> "start=&top=" will return all 5 groups.

      <br /> "start=&top=2" will return "group1", "group2".

      <br /> "start=group2&top=3" will return "group3", "group4", "group5".
    syntax:
      content: 'function list(callback: ServiceCallback<LargePersonGroup[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<azure-cognitiveservices-face.LargePersonGroup[]>'
          description: ''
      return:
        type:
          - 'Promise<azure-cognitiveservices-face.LargePersonGroup[]>'
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.listWithHttpOperationResponse
    name: listWithHttpOperationResponse(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List all existing large person groups’ largePersonGroupId, name, userData

      and recognitionModel.<br />

      * Large person groups are stored in alphabetical order of

      largePersonGroupId.

      * "start" parameter (string, optional) is a user-provided
      largePersonGroupId

      value that returned entries have larger ids by string comparison. "start"

      set to empty to indicate return from the first item.

      * "top" parameter (int, optional) specifies the number of entries to
      return.

      A maximal of 1000 entries can be returned in one call. To fetch more, you

      can specify "start" with the last returned entry’s Id of the current call.

      <br />

      For example, total 5 large person groups: "group1", ..., "group5".

      <br /> "start=&top=" will return all 5 groups.

      <br /> "start=&top=2" will return "group1", "group2".

      <br /> "start=group2&top=3" will return "group3", "group4", "group5".
    syntax:
      content: 'function listWithHttpOperationResponse(options?: Object)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-cognitiveservices-face.LargePersonGroup[]>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.train
    name: 'train(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a large person group training task, the training task may not be
      started immediately.
    syntax:
      content: 'function train(largePersonGroupId: string, options?: Object)'
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.train_2
    name: 'train(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a large person group training task, the training task may not be
      started immediately.
    syntax:
      content: >-
        function train(largePersonGroupId: string, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.train_1
    name: 'train(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a large person group training task, the training task may not be
      started immediately.
    syntax:
      content: >-
        function train(largePersonGroupId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.trainWithHttpOperationResponse
    name: 'trainWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Queue a large person group training task, the training task may not be
      started immediately.
    syntax:
      content: >-
        function trainWithHttpOperationResponse(largePersonGroupId: string,
        options?: Object)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.update
    name: 'update(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Update an existing large person group's display name and userData. The
      properties which does not appear in request body will not be updated.
    syntax:
      content: 'function update(largePersonGroupId: string, options?: Object)'
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.update_2
    name: 'update(string, Object, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Update an existing large person group's display name and userData. The
      properties which does not appear in request body will not be updated.
    syntax:
      content: >-
        function update(largePersonGroupId: string, options: Object, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: options
          type:
            - Object
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: azure-cognitiveservices-face.LargePersonGroupOperations.update_1
    name: 'update(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Update an existing large person group's display name and userData. The
      properties which does not appear in request body will not be updated.
    syntax:
      content: >-
        function update(largePersonGroupId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: ''
        - id: callback
          type:
            - ServiceCallback<void>
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-cognitiveservices-face
  - uid: >-
      azure-cognitiveservices-face.LargePersonGroupOperations.updateWithHttpOperationResponse
    name: 'updateWithHttpOperationResponse(string, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Update an existing large person group's display name and userData. The
      properties which does not appear in request body will not be updated.
    syntax:
      content: >-
        function updateWithHttpOperationResponse(largePersonGroupId: string,
        options?: Object)
      parameters:
        - id: largePersonGroupId
          type:
            - string
          description: |
            Id referencing a particular large person
            group.
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse<void>>
    package: azure-cognitiveservices-face
references:
  - uid: Promise<azure-cognitiveservices-face.LargePersonGroup>
    name: LargePersonGroup>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: LargePersonGroup
        fullName: LargePersonGroup
        uid: azure-cognitiveservices-face.LargePersonGroup
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-cognitiveservices-face.LargePersonGroup>
    name: LargePersonGroup>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: LargePersonGroup
        fullName: LargePersonGroup
        uid: azure-cognitiveservices-face.LargePersonGroup
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-cognitiveservices-face.TrainingStatus>
    name: TrainingStatus>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: TrainingStatus
        fullName: TrainingStatus
        uid: azure-cognitiveservices-face.TrainingStatus
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<azure-cognitiveservices-face.TrainingStatus>
    name: TrainingStatus>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: TrainingStatus
        fullName: TrainingStatus
        uid: azure-cognitiveservices-face.TrainingStatus
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-face.TrainingStatus>>
    name: TrainingStatus>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: TrainingStatus
        fullName: TrainingStatus
        uid: azure-cognitiveservices-face.TrainingStatus
      - name: '>>'
        fullName: '>>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-face.LargePersonGroup>>
    name: LargePersonGroup>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: LargePersonGroup
        fullName: LargePersonGroup
        uid: azure-cognitiveservices-face.LargePersonGroup
      - name: '>>'
        fullName: '>>'
  - uid: 'Promise<azure-cognitiveservices-face.LargePersonGroup[]>'
    name: 'LargePersonGroup[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: LargePersonGroup
        fullName: LargePersonGroup
        uid: azure-cognitiveservices-face.LargePersonGroup
      - name: '[]>'
        fullName: '[]>'
  - uid: 'ServiceCallback<azure-cognitiveservices-face.LargePersonGroup[]>'
    name: 'LargePersonGroup[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: LargePersonGroup
        fullName: LargePersonGroup
        uid: azure-cognitiveservices-face.LargePersonGroup
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      Promise<HttpOperationResponse<azure-cognitiveservices-face.LargePersonGroup[]>>
    name: 'LargePersonGroup[]>>'
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: LargePersonGroup
        fullName: LargePersonGroup
        uid: azure-cognitiveservices-face.LargePersonGroup
      - name: '[]>>'
        fullName: '[]>>'
