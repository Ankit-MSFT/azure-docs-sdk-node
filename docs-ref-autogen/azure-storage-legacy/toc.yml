- uid: azure-storage-legacy.BatchServiceClient
  name: BatchServiceClient
  items:
    - uid: 'azure-storage-legacy.BatchServiceClient#beginBatch'
      name: beginBatch()
    - uid: 'azure-storage-legacy.BatchServiceClient#isInBatch'
      name: isInBatch()
    - uid: 'azure-storage-legacy.BatchServiceClient#rollback'
      name: rollback()
    - uid: 'azure-storage-legacy.BatchServiceClient#hasOperations'
      name: hasOperations()
    - uid: 'azure-storage-legacy.BatchServiceClient#addOperation'
      name: 'addOperation(webResource, outputData)'
    - uid: 'azure-storage-legacy.BatchServiceClient#commitBatch'
      name: 'commitBatch(options, callback)'
    - uid: 'azure-storage-legacy.BatchServiceClient#processResponse'
      name: processResponse(responseObject)
    - uid: 'azure-storage-legacy.BatchServiceClient#processOperation'
      name: 'processOperation(webResource, rawResponse)'
- uid: azure-storage-legacy.BlobService
  name: BlobService
  items:
    - uid: 'azure-storage-legacy.BlobService#getServiceProperties'
      name: 'getServiceProperties(options, callback)'
    - uid: 'azure-storage-legacy.BlobService#setServiceProperties'
      name: 'setServiceProperties(serviceProperties, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#listContainers'
      name: 'listContainers(options, callback)'
    - uid: 'azure-storage-legacy.BlobService#createContainer'
      name: 'createContainer(container, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#createContainerIfNotExists'
      name: 'createContainerIfNotExists(container, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#getContainerProperties'
      name: 'getContainerProperties(container, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#getContainerMetadata'
      name: 'getContainerMetadata(container, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#setContainerMetadata'
      name: 'setContainerMetadata(container, metadata, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#getContainerAcl'
      name: 'getContainerAcl(container, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#setContainerAcl'
      name: 'setContainerAcl(container, publicAccessLevel, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#deleteContainer'
      name: 'deleteContainer(container, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#listBlobs'
      name: 'listBlobs(container, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#createPageBlob'
      name: 'createPageBlob(container, blob, length, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#putBlockBlobFromFile'
      name: 'putBlockBlobFromFile(container, blob, localFilename, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#putBlockBlobFromStream'
      name: >-
        putBlockBlobFromStream(container, blob, (Stream), streamLength, options,
        callback)
    - uid: 'azure-storage-legacy.BlobService#createBlockBlobFromText'
      name: 'createBlockBlobFromText(container, blob, text, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#getBlobProperties'
      name: 'getBlobProperties(container, blob, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#getBlobMetadata'
      name: 'getBlobMetadata(container, blob, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#setBlobProperties'
      name: 'setBlobProperties(container, blob, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#setBlobMetadata'
      name: 'setBlobMetadata(container, blob, metadata, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#getBlob'
      name: 'getBlob(container, blob, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#getBlobToFile'
      name: 'getBlobToFile(container, blob, localFileName, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#getBlobToStream'
      name: 'getBlobToStream(container, blob, writeStream, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#getBlobToText'
      name: 'getBlobToText(container, blob, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#deleteBlob'
      name: 'deleteBlob(container, blob, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#createBlobSnapshot'
      name: 'createBlobSnapshot(container, blob, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#copyBlob'
      name: 'copyBlob(sourceUri, targetContainer, targetBlob, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#abortCopyBlob'
      name: 'abortCopyBlob(container, blob, copyId, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#statusOfCopyBlob'
      name: 'statusOfCopyBlob(targetContainer, targetBlob, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#acquireLease'
      name: 'acquireLease(container, blob, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#renewLease'
      name: 'renewLease(container, blob, leaseId, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#releaseLease'
      name: 'releaseLease(container, blob, leaseId, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#breakLease'
      name: 'breakLease(container, blob, leaseId, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#clearBlobPages'
      name: 'clearBlobPages(container, blob, rangeStart, rangeEnd, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#createBlobPagesFromStream'
      name: >-
        createBlobPagesFromStream(container, blob, readStream, rangeStart,
        rangeEnd, options, callback)
    - uid: 'azure-storage-legacy.BlobService#createBlobPagesFromText'
      name: >-
        createBlobPagesFromText(container, blob, text, rangeStart, rangeEnd,
        options, callback)
    - uid: 'azure-storage-legacy.BlobService#listBlobRegions'
      name: >-
        listBlobRegions(container, blob, rangeStart, rangeEnd, options,
        callback)
    - uid: 'azure-storage-legacy.BlobService#createBlobBlockFromText'
      name: >-
        createBlobBlockFromText(blockId, container, blob, content, options,
        callback)
    - uid: 'azure-storage-legacy.BlobService#createBlobBlockFromStream'
      name: >-
        createBlobBlockFromStream(blockId, container, blob, readStream,
        streamLength, options, callback)
    - uid: 'azure-storage-legacy.BlobService#commitBlobBlocks'
      name: 'commitBlobBlocks(container, blob, blockList, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#listBlobBlocks'
      name: 'listBlobBlocks(container, blob, blocklisttype, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#generateSharedAccessSignature'
      name: 'generateSharedAccessSignature(container, blob, sharedAccessPolicy)'
    - uid: 'azure-storage-legacy.BlobService#getBlobUrl'
      name: 'getBlobUrl(container, blob, sharedAccessPolicy)'
    - uid: 'azure-storage-legacy.BlobService#_leaseBlobImpl'
      name: '_leaseBlobImpl(container, blob, leaseId, leaseAction, options, callback)'
    - uid: 'azure-storage-legacy.BlobService#createBlob'
      name: 'createBlob(container, blob, blobType, optionsOrCallback, callback)'
    - uid: 'azure-storage-legacy.BlobService#createBlockBlobFromFile'
      name: >-
        createBlockBlobFromFile(container, blob, localFilename,
        optionsOrCallback, callback)
    - uid: 'azure-storage-legacy.BlobService#createBlockBlobFromStream'
      name: >-
        createBlockBlobFromStream(container, blob, (Stream), streamLength,
        optionsOrCallback, callback)
    - uid: 'azure-storage-legacy.BlobService#generateBlockIdPrefix'
      name: generateBlockIdPrefix()
    - uid: 'azure-storage-legacy.BlobService#getBlockId'
      name: getBlockId()
    - uid: 'azure-storage-legacy.BlobService#_getBlobToFile'
      name: >-
        _getBlobToFile(container, blob, localFileName, optionsOrCallback,
        callback)
    - uid: 'azure-storage-legacy.BlobService#createPageBlobFromFile'
      name: >-
        createPageBlobFromFile(container, blob, (string), optionsOrCallback,
        callback)
    - uid: 'azure-storage-legacy.BlobService#createPageBlobFromStream'
      name: >-
        createPageBlobFromStream(container, blob, (Stream), streamLength,
        optionsOrCallback, callback)
    - uid: 'azure-storage-legacy.BlobService#_createBlobFromStream'
      name: >-
        _createBlobFromStream(container, blob, blobType, (Stream), streamLength,
        optionsOrCallback, callback)
    - uid: 'azure-storage-legacy.BlobService#_createBlobFromChunkStream'
      name: >-
        _createBlobFromChunkStream(container, blob, blobType, (Stream),
        streamLength, optionsOrCallback, callback)
- uid: azure-storage-legacy.QueueService
  name: QueueService
  items:
    - uid: 'azure-storage-legacy.QueueService#getServiceProperties'
      name: 'getServiceProperties(options, callback)'
    - uid: 'azure-storage-legacy.QueueService#setServiceProperties'
      name: 'setServiceProperties(serviceProperties, options, callback)'
    - uid: 'azure-storage-legacy.QueueService#listQueues'
      name: 'listQueues(options, callback)'
    - uid: 'azure-storage-legacy.QueueService#createQueue'
      name: 'createQueue(queue, options, callback)'
    - uid: 'azure-storage-legacy.QueueService#createQueueIfNotExists'
      name: 'createQueueIfNotExists(queue, options, callback)'
    - uid: 'azure-storage-legacy.QueueService#deleteQueue'
      name: 'deleteQueue(queue, options, callback)'
    - uid: 'azure-storage-legacy.QueueService#getQueueMetadata'
      name: 'getQueueMetadata(queue, options, callback)'
    - uid: 'azure-storage-legacy.QueueService#setQueueMetadata'
      name: 'setQueueMetadata(queue, metadata, options, callback)'
    - uid: 'azure-storage-legacy.QueueService#createMessage'
      name: 'createMessage(queue, messageText, options, callback)'
    - uid: 'azure-storage-legacy.QueueService#getMessages'
      name: 'getMessages(queue, options, callback)'
    - uid: 'azure-storage-legacy.QueueService#peekMessages'
      name: 'peekMessages(queue, options, callback)'
    - uid: 'azure-storage-legacy.QueueService#deleteMessage'
      name: 'deleteMessage(queue, messageid, popreceipt, options, callback)'
    - uid: 'azure-storage-legacy.QueueService#clearMessages'
      name: 'clearMessages(queue, options, callback)'
    - uid: 'azure-storage-legacy.QueueService#updateMessage'
      name: >-
        updateMessage(queue, messageid, popreceipt, visibilitytimeout, options,
        callback)
- uid: azure-storage-legacy.SharedAccessSignature
  name: SharedAccessSignature
  items:
    - uid: 'azure-storage-legacy.SharedAccessSignature#generateSignedQueryString'
      name: 'generateSignedQueryString(path, sharedAccessPolicy)'
    - uid: 'azure-storage-legacy.SharedAccessSignature#signRequest'
      name: 'signRequest(The, callback)'
    - uid: 'azure-storage-legacy.SharedAccessSignature#_generateSignature'
      name: '_generateSignature(path, sharedAccessPolicy)'
    - uid: 'azure-storage-legacy.SharedAccessSignature#_permissionMatchesRequest'
      name: '_permissionMatchesRequest(sharedAccessSignature, requiredPermission)'
- uid: azure-storage-legacy.SharedKey
  name: SharedKey
  items:
    - uid: 'azure-storage-legacy.SharedKey#signRequest'
      name: 'signRequest(The, callback)'
- uid: azure-storage-legacy.SharedKeyLite
  name: SharedKeyLite
  items:
    - uid: 'azure-storage-legacy.SharedKeyLite#signRequest'
      name: 'signRequest(The, callback)'
- uid: azure-storage-legacy.SharedKeyLiteTable
  name: SharedKeyLiteTable
  items:
    - uid: 'azure-storage-legacy.SharedKeyLiteTable#signRequest'
      name: 'signRequest(The, callback)'
- uid: azure-storage-legacy.SharedKeyTable
  name: SharedKeyTable
  items:
    - uid: 'azure-storage-legacy.SharedKeyTable#signRequest'
      name: 'signRequest(The, callback)'
- uid: azure-storage-legacy.TableQuery
  name: TableQuery
  items:
    - uid: azure-storage-legacy.TableQuery.select
      name: select(fields)
    - uid: 'azure-storage-legacy.TableQuery#from'
      name: from(name)
    - uid: 'azure-storage-legacy.TableQuery#whereKeys'
      name: 'whereKeys(partitionKey, rowKey)'
    - uid: 'azure-storage-legacy.TableQuery#whereNextKeys'
      name: 'whereNextKeys(nextPartitionKey, nextRowKey)'
    - uid: 'azure-storage-legacy.TableQuery#where'
      name: 'where(condition, value)'
    - uid: 'azure-storage-legacy.TableQuery#and'
      name: 'and(condition, arguments)'
    - uid: 'azure-storage-legacy.TableQuery#or'
      name: 'or(condition, arguments)'
    - uid: 'azure-storage-legacy.TableQuery#top'
      name: top(top)
    - uid: 'azure-storage-legacy.TableQuery#toQueryObject'
      name: toQueryObject()
    - uid: 'azure-storage-legacy.TableQuery#toPath'
      name: toPath()
    - uid: 'azure-storage-legacy.TableQuery#_replaceOperators'
      name: _replaceOperators(whereClause)
- uid: azure-storage-legacy.TableService
  name: TableService
  items:
    - uid: 'azure-storage-legacy.TableService#getServiceProperties'
      name: 'getServiceProperties(options, callback)'
    - uid: 'azure-storage-legacy.TableService#setServiceProperties'
      name: 'setServiceProperties(serviceProperties, options, callback)'
    - uid: 'azure-storage-legacy.TableService#getTable'
      name: 'getTable(table, options, callback)'
    - uid: 'azure-storage-legacy.TableService#createTable'
      name: 'createTable(table, options, callback)'
    - uid: 'azure-storage-legacy.TableService#createTableIfNotExists'
      name: 'createTableIfNotExists(table, options, callback)'
    - uid: 'azure-storage-legacy.TableService#deleteTable'
      name: 'deleteTable(table, options, callback)'
    - uid: 'azure-storage-legacy.TableService#queryTables'
      name: 'queryTables(options, callback)'
    - uid: 'azure-storage-legacy.TableService#queryEntity'
      name: 'queryEntity(table, partitionKey, rowKey, options, callback)'
    - uid: 'azure-storage-legacy.TableService#queryEntities'
      name: 'queryEntities(tableQuery, options, callback)'
    - uid: 'azure-storage-legacy.TableService#insertEntity'
      name: 'insertEntity(table, entityDescriptor, options, callback)'
    - uid: 'azure-storage-legacy.TableService#insertOrReplaceEntity'
      name: 'insertOrReplaceEntity(table, entityDescriptor, options, callback)'
    - uid: 'azure-storage-legacy.TableService#updateEntity'
      name: 'updateEntity(table, entityDescriptor, options, callback)'
    - uid: 'azure-storage-legacy.TableService#mergeEntity'
      name: 'mergeEntity(table, entityDescriptor, options, callback)'
    - uid: 'azure-storage-legacy.TableService#insertOrMergeEntity'
      name: 'insertOrMergeEntity(table, entityDescriptor, options, callback)'
    - uid: 'azure-storage-legacy.TableService#deleteEntity'
      name: 'deleteEntity(table, entityDescriptor, options, callback)'
- uid: azure-storage-legacy.global
  name: GLOBAL
  items:
    - uid: azure-storage-legacy._global.createTableService
      name: >-
        createTableService(storageAccountOrConnectionString, storageAccessKey,
        host, authenticationProvider)
    - uid: azure-storage-legacy._global.createBlobService
      name: >-
        createBlobService(storageAccountOrConnectionString, storageAccessKey,
        host, authenticationProvider)
    - uid: azure-storage-legacy._global.createQueueService
      name: >-
        createQueueService(storageAccountOrConnectionString, storageAccessKey,
        host, authenticationProvider)
