### YamlMime:UniversalReference
items:
  - uid: azure-event-hubs.EventHubClient
    id: azure-event-hubs.EventHubClient
    name: EventHubClient
    summary: |-
      EventHubClient
      Describes the EventHub client.
    fullName: azure-event-hubs.EventHubClient
    type: Class
    children:
      - 'azure-event-hubs.EventHubClient.#ctor'
      - 'azure-event-hubs.EventHubClient#close'
      - 'azure-event-hubs.EventHubClient#send'
      - 'azure-event-hubs.EventHubClient#sendBatch'
      - 'azure-event-hubs.EventHubClient#receive'
      - 'azure-event-hubs.EventHubClient#receiveBatch'
      - 'azure-event-hubs.EventHubClient#getHubRuntimeInformation'
      - 'azure-event-hubs.EventHubClient#getPartitionIds'
      - 'azure-event-hubs.EventHubClient#getPartitionInformation'
      - azure-event-hubs.EventHubClient.createFromConnectionString
      - azure-event-hubs.EventHubClient.createFromIotHubConnectionString
      - azure-event-hubs.EventHubClient.createFromAadTokenCredentials
    langs:
      - js
  - id: 'azure-event-hubs.EventHubClient.#ctor'
    uid: 'azure-event-hubs.EventHubClient.#ctor'
    parent: azure-event-hubs.EventHubClient
    name: 'EventHubClient(config, tokenProvider)'
    fullName: 'azure-event-hubs.EventHubClient.EventHubClient(config, tokenProvider)'
    summary: >-
      Instantiates a client pointing to the Event Hub given by this
      configuration.
    type: Constructor
    syntax:
      parameters:
        - id: config
          type:
            - undefinedConnectionConfig
          description: The connection configuration to create the EventHub Client.
        - id: tokenProvider
          type:
            - undefinedTokenProvider
          description: |-
            The token provider that provides the token for authentication.
            Default value: SasTokenProvider.
          optional: true
      content: 'new EventHubClient(config, tokenProvider)'
    langs:
      - js
  - uid: 'azure-event-hubs.EventHubClient#close'
    id: 'azure-event-hubs.EventHubClient#close'
    parent: azure-event-hubs.EventHubClient
    name: close()
    summary: |-
      Closes the AMQP connection to the Event Hub for this client,
      returning a promise that will be resolved when disconnection is completed.
    fullName: azure-event-hubs.EventHubClient.close()
    type: Function
    syntax:
      return:
        type:
          - azure-event-hubs.Promise.<any>
        description: ''
      content: function close()
    langs:
      - js
  - uid: 'azure-event-hubs.EventHubClient#send'
    id: 'azure-event-hubs.EventHubClient#send'
    parent: azure-event-hubs.EventHubClient
    name: 'send(data, partitionId)'
    summary: Sends the given message to the EventHub.
    fullName: 'azure-event-hubs.EventHubClient.send(data, partitionId)'
    type: Function
    syntax:
      parameters:
        - id: data
          type:
            - azure-event-hubs.any
          description: Message to send.  Will be sent as UTF8-encoded JSON string.
        - id: partitionId
          type:
            - string
            - number
          description: >-
            Partition ID to which the event data needs to be sent. This should
            only be specified

            if you intend to send the event to a specific partition. When not
            specified EventHub will store the messages in a round-robin

            fashion amongst the different partitions in the EventHub.
          optional: true
      return:
        type:
          - azure-event-hubs.Promise.<Delivery>
        description: Promise<rheaPromise.Delivery>
      content: 'function send(data, partitionId)'
    langs:
      - js
  - uid: 'azure-event-hubs.EventHubClient#sendBatch'
    id: 'azure-event-hubs.EventHubClient#sendBatch'
    parent: azure-event-hubs.EventHubClient
    name: 'sendBatch(datas, partitionId)'
    summary: >-
      Send a batch of EventData to the EventHub. The "message_annotations",
      "application_properties" and "properties"

      of the first message will be set as that of the envelope (batch message).
    fullName: 'azure-event-hubs.EventHubClient.sendBatch(datas, partitionId)'
    type: Function
    syntax:
      parameters:
        - id: datas
          type:
            - azure-event-hubs.Array.<EventData>
          description: An array of EventData objects to be sent in a Batch message.
        - id: partitionId
          type:
            - string
            - number
          description: >-
            Partition ID to which the event data needs to be sent. This should
            only be specified

            if you intend to send the event to a specific partition. When not
            specified EventHub will store the messages in a round-robin

            fashion amongst the different partitions in the EventHub.
          optional: true
      return:
        type:
          - azure-event-hubs.Promise.<rheaPromise.Delivery>
        description: Promise<rheaPromise.Delivery>
      content: 'function sendBatch(datas, partitionId)'
    langs:
      - js
  - uid: 'azure-event-hubs.EventHubClient#receive'
    id: 'azure-event-hubs.EventHubClient#receive'
    parent: azure-event-hubs.EventHubClient
    name: 'receive(partitionId, onMessage, onError, options, name)'
    summary: >-
      Starts the receiver by establishing an AMQP session and an AMQP receiver
      link on the session. Messages will be passed to

      the provided onMessage handler and error will be passes to the provided
      onError handler.
    fullName: >-
      azure-event-hubs.EventHubClient.receive(partitionId, onMessage, onError,
      options, name)
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - string
            - number
          description: Partition ID from which to receive.
        - id: onMessage
          type:
            - azure-event-hubs.OnMessage
          description: The message handler to receive event data objects.
        - id: onError
          type:
            - azure-event-hubs.OnError
          description: |-
            The error handler to receive an error that occurs
            while receiving messages.
        - id: options
          type:
            - azure-event-hubs.ReceiveOptions
          description: Options for how you'd like to connect.
          optional: true
        - id: name
          type:
            - string
          description: |-
            The name of the receiver. If not provided
            then we will set a GUID by default.
          optional: true
        - id: options.consumerGroup
          type:
            - string
          description: Consumer group from which to receive.
          optional: true
        - id: options.prefetchCount
          type:
            - number
          description: >-
            The upper limit of events this receiver will

            actively receive regardless of whether a receive operation is
            pending.
          optional: true
        - id: options.enableReceiverRuntimeMetric
          type:
            - boolean
          description: >-
            Provides the approximate receiver runtime information

            for a logical partition of an Event Hub if the value is true.
            Default false.
          optional: true
        - id: options.epoch
          type:
            - number
          description: >-
            The epoch value that this receiver is currently

            using for partition ownership. A value of undefined means this
            receiver is not an epoch-based receiver.
          optional: true
        - id: options.eventPosition
          type:
            - azure-event-hubs.EventPosition
          description: >-
            The position of EventData in the EventHub parition from

            where the receiver should start receiving. Only one of offset,
            sequenceNumber, enqueuedTime, customFilter can be specified.

            `EventPosition.withCustomFilter()` should be used if you want more
            fine-grained control of the filtering.

            See
            https://github.com/Azure/amqpnetlite/wiki/Azure%20Service%20Bus%20Event%20Hubs
            for details.
          optional: true
      return:
        type:
          - azure-event-hubs.ReceiveHandler
        description: >-
          ReceiveHandler - An object that provides a mechanism to stop receiving
          more messages.
      content: 'function receive(partitionId, onMessage, onError, options, name)'
    langs:
      - js
  - uid: 'azure-event-hubs.EventHubClient#receiveBatch'
    id: 'azure-event-hubs.EventHubClient#receiveBatch'
    parent: azure-event-hubs.EventHubClient
    name: >-
      receiveBatch(partitionId, maxMessageCount, maxWaitTimeInSeconds, options,
      name)
    summary: >-
      Receives a batch of EventData objects from an EventHub partition for a
      given count and a given max wait time in seconds, whichever

      happens first. This method can be used directly after creating the
      receiver object and **MUST NOT** be used along with the `start()` method.
    fullName: >-
      azure-event-hubs.EventHubClient.receiveBatch(partitionId, maxMessageCount,
      maxWaitTimeInSeconds, options, name)
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - string
            - number
          description: Partition ID from which to receive.
        - id: maxMessageCount
          type:
            - number
          description: The maximum message count. Must be a value greater than 0.
        - id: maxWaitTimeInSeconds
          type:
            - number
          description: >-
            The maximum wait time in seconds for which the Receiver should wait

            to receiver the said amount of messages. If not provided, it
            defaults to 60 seconds.
          optional: true
        - id: options
          type:
            - azure-event-hubs.ReceiveOptions
          description: Options for how you'd like to connect.
          optional: true
        - id: name
          type:
            - string
          description: |-
            The name of the receiver. If not provided
            then we will set a GUID by default.
          optional: true
        - id: options.consumerGroup
          type:
            - string
          description: Consumer group from which to receive.
          optional: true
        - id: options.prefetchCount
          type:
            - number
          description: >-
            The upper limit of events this receiver will

            actively receive regardless of whether a receive operation is
            pending.
          optional: true
        - id: options.enableReceiverRuntimeMetric
          type:
            - boolean
          description: >-
            Provides the approximate receiver runtime information

            for a logical partition of an Event Hub if the value is true.
            Default false.
          optional: true
        - id: options.epoch
          type:
            - number
          description: >-
            The epoch value that this receiver is currently

            using for partition ownership. A value of undefined means this
            receiver is not an epoch-based receiver.
          optional: true
        - id: options.eventPosition
          type:
            - azure-event-hubs.EventPosition
          description: >-
            The position of EventData in the EventHub parition from

            where the receiver should start receiving. Only one of offset,
            sequenceNumber, enqueuedTime, customFilter can be specified.

            `EventPosition.withCustomFilter()` should be used if you want more
            fine-grained control of the filtering.

            See
            https://github.com/Azure/amqpnetlite/wiki/Azure%20Service%20Bus%20Event%20Hubs
            for details.
          optional: true
      return:
        type:
          - azure-event-hubs.Promise.<Array.<EventData>>
        description: A promise that resolves with an array of EventData objects.
      content: >-
        function receiveBatch(partitionId, maxMessageCount,
        maxWaitTimeInSeconds, options, name)
    langs:
      - js
  - uid: 'azure-event-hubs.EventHubClient#getHubRuntimeInformation'
    id: 'azure-event-hubs.EventHubClient#getHubRuntimeInformation'
    parent: azure-event-hubs.EventHubClient
    name: getHubRuntimeInformation()
    summary: Provides the eventhub runtime information.
    fullName: azure-event-hubs.EventHubClient.getHubRuntimeInformation()
    type: Function
    syntax:
      return:
        type:
          - azure-event-hubs.Promise.<EventHubRuntimeInformation>
        description: ''
      content: function getHubRuntimeInformation()
    langs:
      - js
  - uid: 'azure-event-hubs.EventHubClient#getPartitionIds'
    id: 'azure-event-hubs.EventHubClient#getPartitionIds'
    parent: azure-event-hubs.EventHubClient
    name: getPartitionIds()
    summary: Provides an array of partitionIds.
    fullName: azure-event-hubs.EventHubClient.getPartitionIds()
    type: Function
    syntax:
      return:
        type:
          - azure-event-hubs.Promise.<Array.<string>>
        description: ''
      content: function getPartitionIds()
    langs:
      - js
  - uid: 'azure-event-hubs.EventHubClient#getPartitionInformation'
    id: 'azure-event-hubs.EventHubClient#getPartitionInformation'
    parent: azure-event-hubs.EventHubClient
    name: getPartitionInformation(partitionId)
    summary: Provides information about the specified partition.
    fullName: azure-event-hubs.EventHubClient.getPartitionInformation(partitionId)
    type: Function
    syntax:
      parameters:
        - id: partitionId
          type:
            - string
            - number
          description: Partition ID for which partition information is required.
      content: function getPartitionInformation(partitionId)
    langs:
      - js
  - uid: azure-event-hubs.EventHubClient.createFromConnectionString
    id: azure-event-hubs.EventHubClient.createFromConnectionString
    parent: azure-event-hubs.EventHubClient
    name: 'createFromConnectionString(connectionString, path, options)'
    summary: Creates an EventHub Client from connection string.
    fullName: >-
      azure-event-hubs.EventHubClient.createFromConnectionString(connectionString,
      path, options)
    type: Function
    syntax:
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            Connection string of the form
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'
        - id: path
          type:
            - string
          description: EventHub path of the form 'my-event-hub-name'
          optional: true
        - id: options
          type:
            - azure-event-hubs.ClientOptions
          description: Options that can be provided during client creation.
          optional: true
        - id: options.tokenProvider
          type:
            - azure-event-hubs.TokenProvider
          description: >-
            An instance of the token provider that provides the token for
            authentication. Default value: SasTokenProvider.
          optional: true
      return:
        type:
          - azure-event-hubs.EventHubClient
        description: '- An instance of the eventhub client.'
      content: 'function createFromConnectionString(connectionString, path, options)'
    langs:
      - js
  - uid: azure-event-hubs.EventHubClient.createFromIotHubConnectionString
    id: azure-event-hubs.EventHubClient.createFromIotHubConnectionString
    parent: azure-event-hubs.EventHubClient
    name: 'createFromIotHubConnectionString(iothubConnectionString, options)'
    summary: Creates an EventHub Client from connection string.
    fullName: >-
      azure-event-hubs.EventHubClient.createFromIotHubConnectionString(iothubConnectionString,
      options)
    type: Function
    syntax:
      parameters:
        - id: iothubConnectionString
          type:
            - string
          description: >-
            Connection string of the form
            'HostName=iot-host-name;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'
        - id: options
          type:
            - azure-event-hubs.ClientOptions
          description: Options that can be provided during client creation.
          optional: true
        - id: options.tokenProvider
          type:
            - azure-event-hubs.TokenProvider
          description: >-
            An instance of the token provider that provides the token for
            authentication. Default value: SasTokenProvider.
          optional: true
      return:
        type:
          - azure-event-hubs.Promise.<EventHubClient>
        description: '- Promise<EventHubClient>.'
      content: >-
        function createFromIotHubConnectionString(iothubConnectionString,
        options)
    langs:
      - js
  - uid: azure-event-hubs.EventHubClient.createFromAadTokenCredentials
    id: azure-event-hubs.EventHubClient.createFromAadTokenCredentials
    parent: azure-event-hubs.EventHubClient
    name: 'createFromAadTokenCredentials(host, entityPath, credentials, options)'
    summary: Creates an EventHub Client from AADTokenCredentials.
    fullName: >-
      azure-event-hubs.EventHubClient.createFromAadTokenCredentials(host,
      entityPath, credentials, options)
    type: Function
    syntax:
      parameters:
        - id: host
          type:
            - string
          description: >-
            Fully qualified domain name for Event Hubs. Most likely,
            {yournamespace}.servicebus.windows.net
        - id: entityPath
          type:
            - string
          description: EventHub path of the form 'my-event-hub-name'
        - id: credentials
          type:
            - azure-event-hubs.TokenCredentials
          description: >-
            The AAD Token credentials. It can be one of the following:
            ApplicationTokenCredentials | UserTokenCredentials |
            DeviceTokenCredentials | MSITokenCredentials.
        - id: options
          type:
            - azure-event-hubs.ClientOptionsBase
          description: The options that can be provided during client creation.
      return:
        type:
          - azure-event-hubs.EventHubClient
        description: An instance of the Eventhub client.
      content: >-
        function createFromAadTokenCredentials(host, entityPath, credentials,
        options)
    langs:
      - js
references:
  - uid: azure-event-hubs.EventPosition
    name: EventPosition
    fullName: azure-event-hubs.EventPosition
    isExternal: false
  - uid: azure-event-hubs.ReceiveHandler
    name: ReceiveHandler
    fullName: azure-event-hubs.ReceiveHandler
    isExternal: false
