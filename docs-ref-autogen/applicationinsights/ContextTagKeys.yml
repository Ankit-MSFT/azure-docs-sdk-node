### YamlMime:UniversalReference
items:
  - uid: applicationinsights.ContextTagKeys
    name: ContextTagKeys
    fullName: ContextTagKeys
    children:
      - applicationinsights.ContextTagKeys.applicationVersion
      - applicationinsights.ContextTagKeys.cloudRole
      - applicationinsights.ContextTagKeys.cloudRoleInstance
      - applicationinsights.ContextTagKeys.constructor
      - applicationinsights.ContextTagKeys.deviceId
      - applicationinsights.ContextTagKeys.deviceLocale
      - applicationinsights.ContextTagKeys.deviceModel
      - applicationinsights.ContextTagKeys.deviceOEMName
      - applicationinsights.ContextTagKeys.deviceOSVersion
      - applicationinsights.ContextTagKeys.deviceType
      - applicationinsights.ContextTagKeys.internalAgentVersion
      - applicationinsights.ContextTagKeys.internalNodeName
      - applicationinsights.ContextTagKeys.internalSdkVersion
      - applicationinsights.ContextTagKeys.locationIp
      - applicationinsights.ContextTagKeys.operationCorrelationVector
      - applicationinsights.ContextTagKeys.operationId
      - applicationinsights.ContextTagKeys.operationName
      - applicationinsights.ContextTagKeys.operationParentId
      - applicationinsights.ContextTagKeys.operationSyntheticSource
      - applicationinsights.ContextTagKeys.sessionId
      - applicationinsights.ContextTagKeys.sessionIsFirst
      - applicationinsights.ContextTagKeys.userAccountId
      - applicationinsights.ContextTagKeys.userAuthUserId
      - applicationinsights.ContextTagKeys.userId
    langs:
      - typeScript
    type: class
    summary: ''
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.applicationVersion
    name: applicationVersion
    fullName: applicationVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Application version. Information in the application context fields is
      always about the application that is sending the telemetry.
    syntax:
      content: 'applicationVersion: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.cloudRole
    name: cloudRole
    fullName: cloudRole
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Name of the role the application is a part of. For Azure environment, this
      should be initialized with

      [Microsoft.WindowsAzure.ServiceRuntime.RoleEnvironment]::CurrentRoleInstance.Role.Name

      See more details here: https://dzone.com/articles/accessing-azure-role-0

      It is recommended that you initialize environment variable with this value
      during machine startup, and then set context field from environment
      variable

      appInsights.client.context.tags[appInsights.client.context.keys.cloudRole]
      = process.env.RoleName
    syntax:
      content: 'cloudRole: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.cloudRoleInstance
    name: cloudRoleInstance
    fullName: cloudRoleInstance
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Name of the instance where the application is running. For Azure
      environment, this should be initialized with

      [Microsoft.WindowsAzure.ServiceRuntime.RoleEnvironment]::CurrentRoleInstance.Id

      See more details here: https://dzone.com/articles/accessing-azure-role-0

      It is recommended that you initialize environment variable with this value
      during machine startup, and then set context field from environment
      variable

      appInsights.client.context.tags[appInsights.client.context.keys.cloudRoleInstance]
      = process.env.RoleInstanceId
    syntax:
      content: 'cloudRoleInstance: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.constructor
    name: ContextTagKeys()
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: new ContextTagKeys()
      parameters: []
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.deviceId
    name: deviceId
    fullName: deviceId
    children: []
    langs:
      - typeScript
    type: property
    summary: Unique client device id. Computer name in most cases.
    syntax:
      content: 'deviceId: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.deviceLocale
    name: deviceLocale
    fullName: deviceLocale
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Device locale using <language>-<REGION> pattern, following RFC 5646.
      Example 'en-US'.
    syntax:
      content: 'deviceLocale: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.deviceModel
    name: deviceModel
    fullName: deviceModel
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Model of the device the end user of the application is using. Used for
      client scenarios. If this field is empty then it is derived from the user
      agent.
    syntax:
      content: 'deviceModel: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.deviceOEMName
    name: deviceOEMName
    fullName: deviceOEMName
    children: []
    langs:
      - typeScript
    type: property
    summary: Client device OEM name taken from the browser.
    syntax:
      content: 'deviceOEMName: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.deviceOSVersion
    name: deviceOSVersion
    fullName: deviceOSVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Operating system name and version of the device the end user of the
      application is using. If this field is empty then it is derived from the
      user agent. Example 'Windows 10 Pro 10.0.10586.0'
    syntax:
      content: 'deviceOSVersion: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.deviceType
    name: deviceType
    fullName: deviceType
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The type of the device the end user of the application is using. Used
      primarily to distinguish JavaScript telemetry from server side telemetry.
      Examples: 'PC', 'Phone', 'Browser'. 'PC' is the default value.
    syntax:
      content: 'deviceType: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.internalAgentVersion
    name: internalAgentVersion
    fullName: internalAgentVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Agent version. Used to indicate the version of StatusMonitor installed on
      the computer if it is used for data collection.
    syntax:
      content: 'internalAgentVersion: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.internalNodeName
    name: internalNodeName
    fullName: internalNodeName
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      This is the node name used for billing purposes. Use it to override the
      standard detection of nodes.
    syntax:
      content: 'internalNodeName: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.internalSdkVersion
    name: internalSdkVersion
    fullName: internalSdkVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      SDK version. See
      https://github.com/Microsoft/ApplicationInsights-Home/blob/master/SDK-AUTHORING.md#sdk-version-specification
      for information.
    syntax:
      content: 'internalSdkVersion: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.locationIp
    name: locationIp
    fullName: locationIp
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The IP address of the client device. IPv4 and IPv6 are supported.
      Information in the location context fields is always about the end user.
      When telemetry is sent from a service, the location context is about the
      user that initiated the operation in the service.
    syntax:
      content: 'locationIp: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.operationCorrelationVector
    name: operationCorrelationVector
    fullName: operationCorrelationVector
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The correlation vector is a light weight vector clock which can be used to
      identify and order related events across clients and services.
    syntax:
      content: 'operationCorrelationVector: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.operationId
    name: operationId
    fullName: operationId
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A unique identifier for the operation instance. The operation.id is
      created by either a request or a page view. All other telemetry sets this
      to the value for the containing request or page view. Operation.id is used
      for finding all the telemetry items for a specific operation instance.
    syntax:
      content: 'operationId: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.operationName
    name: operationName
    fullName: operationName
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The name (group) of the operation. The operation.name is created by either
      a request or a page view. All other telemetry items set this to the value
      for the containing request or page view. Operation.name is used for
      finding all the telemetry items for a group of operations (i.e. 'GET
      Home/Index').
    syntax:
      content: 'operationName: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.operationParentId
    name: operationParentId
    fullName: operationParentId
    children: []
    langs:
      - typeScript
    type: property
    summary: The unique identifier of the telemetry item's immediate parent.
    syntax:
      content: 'operationParentId: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.operationSyntheticSource
    name: operationSyntheticSource
    fullName: operationSyntheticSource
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Name of synthetic source. Some telemetry from the application may
      represent a synthetic traffic. It may be web crawler indexing the web
      site, site availability tests or traces from diagnostic libraries like
      Application Insights SDK itself.
    syntax:
      content: 'operationSyntheticSource: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.sessionId
    name: sessionId
    fullName: sessionId
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Session ID - the instance of the user's interaction with the app.
      Information in the session context fields is always about the end user.
      When telemetry is sent from a service, the session context is about the
      user that initiated the operation in the service.
    syntax:
      content: 'sessionId: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.sessionIsFirst
    name: sessionIsFirst
    fullName: sessionIsFirst
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Boolean value indicating whether the session identified by ai.session.id
      is first for the user or not.
    syntax:
      content: 'sessionIsFirst: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.userAccountId
    name: userAccountId
    fullName: userAccountId
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      In multi-tenant applications this is the account ID or name which the user
      is acting with. Examples may be subscription ID for Azure portal or blog
      name blogging platform.
    syntax:
      content: 'userAccountId: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.userAuthUserId
    name: userAuthUserId
    fullName: userAuthUserId
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Authenticated user id. The opposite of ai.user.id, this represents the
      user with a friendly name. Since it's PII information it is not collected
      by default by most SDKs.
    syntax:
      content: 'userAuthUserId: string'
      return:
        type:
          - string
    package: applicationinsights
  - uid: applicationinsights.ContextTagKeys.userId
    name: userId
    fullName: userId
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Anonymous user id. Represents the end user of the application. When
      telemetry is sent from a service, the user context is about the user that
      initiated the operation in the service.
    syntax:
      content: 'userId: string'
      return:
        type:
          - string
    package: applicationinsights
