### YamlMime:UniversalReference
items:
  - uid: applicationinsights.NodeClient
    name: NodeClient
    fullName: NodeClient
    children:
      - applicationinsights.NodeClient.addTelemetryProcessor
      - applicationinsights.NodeClient.channel
      - applicationinsights.NodeClient.clearTelemetryProcessors
      - applicationinsights.NodeClient.commonProperties
      - applicationinsights.NodeClient.config
      - applicationinsights.NodeClient.context
      - applicationinsights.NodeClient.flush
      - applicationinsights.NodeClient.constructor
      - applicationinsights.NodeClient.quickPulseClient
      - applicationinsights.NodeClient.track
      - applicationinsights.NodeClient.trackDependency
      - applicationinsights.NodeClient.trackEvent
      - applicationinsights.NodeClient.trackException
      - applicationinsights.NodeClient.trackMetric
      - applicationinsights.NodeClient.trackNodeHttpDependency
      - applicationinsights.NodeClient.trackNodeHttpRequest
      - applicationinsights.NodeClient.trackNodeHttpRequestSync
      - applicationinsights.NodeClient.trackRequest
      - applicationinsights.NodeClient.trackTrace
    langs:
      - typeScript
    type: class
    summary: >-
      Application Insights Telemetry Client for Node.JS. Provides the
      Application Insights TelemetryClient API

      in addition to Node-specific helper functions.

      Construct a new TelemetryClient to have an instance with a different
      configuration than the default client.

      In most cases, `appInsights.defaultClient` should be used instead.
    extends:
      name: applicationinsights.TelemetryClient
    package: applicationinsights
  - uid: applicationinsights.NodeClient.addTelemetryProcessor
    name: >-
      addTelemetryProcessor((envelope: Envelope, contextObjects?: [key: string]:
      any) => boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Adds telemetry processor to the collection. Telemetry processors will be
      called one by one

      before telemetry item is pushed for sending and in the order they were
      added.
    syntax:
      content: >-
        function addTelemetryProcessor(telemetryProcessor: (envelope: Envelope,
        contextObjects?: [key: string]: any) => boolean)
      parameters:
        - id: telemetryProcessor
          type:
            - >-
              (envelope: Envelope, contextObjects?: [key: string]: any) =>
              boolean
          description: >
            function, takes Envelope, and optional context object and returns
            boolean
    package: applicationinsights
  - uid: applicationinsights.NodeClient.channel
    name: channel
    fullName: channel
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'channel: Channel'
      return:
        type:
          - applicationinsights.Channel
    package: applicationinsights
  - uid: applicationinsights.NodeClient.clearTelemetryProcessors
    name: clearTelemetryProcessors()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function clearTelemetryProcessors()
      parameters: []
    package: applicationinsights
  - uid: applicationinsights.NodeClient.commonProperties
    name: commonProperties
    fullName: commonProperties
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'commonProperties: [key: string]: string'
      return:
        type:
          - '[key: string]: string'
    package: applicationinsights
  - uid: applicationinsights.NodeClient.config
    name: config
    fullName: config
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'config: Config'
      return:
        type:
          - applicationinsights.Config
    package: applicationinsights
  - uid: applicationinsights.NodeClient.context
    name: context
    fullName: context
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'context: Context'
      return:
        type:
          - applicationinsights.Context
    package: applicationinsights
  - uid: applicationinsights.NodeClient.flush
    name: flush(FlushOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Immediately send all queued telemetry.
    syntax:
      content: 'function flush(options?: FlushOptions)'
      parameters:
        - id: options
          type:
            - applicationinsights.FlushOptions
          description: >
            Flush options, including indicator whether app is crashing and
            callback
          optional: true
    package: applicationinsights
  - uid: applicationinsights.NodeClient.constructor
    name: NodeClient(string)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Constructs a new client of the client
    syntax:
      content: 'new NodeClient(iKey?: string)'
      parameters:
        - id: iKey
          type:
            - string
          description: >
            the instrumentation key to use (read from environment variable if
            not specified)
          optional: true
    package: applicationinsights
  - uid: applicationinsights.NodeClient.quickPulseClient
    name: quickPulseClient
    fullName: quickPulseClient
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'quickPulseClient: QuickPulseStateManager'
      return:
        type:
          - applicationinsights.QuickPulseStateManager
    package: applicationinsights
  - uid: applicationinsights.NodeClient.track
    name: 'track(Telemetry, TelemetryType)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Generic track method for all telemetry types
    syntax:
      content: 'function track(telemetry: Telemetry, telemetryType: TelemetryType)'
      parameters:
        - id: telemetry
          type:
            - applicationinsights.Telemetry
          description: ''
        - id: telemetryType
          type:
            - applicationinsights.TelemetryType
          description: >
            specify the type of telemetry you are tracking from the list of
            Contracts.DataTypes
    package: applicationinsights
  - uid: applicationinsights.NodeClient.trackDependency
    name: trackDependency(DependencyTelemetry)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Log a dependency. Note that the default client will attempt to collect
      dependencies automatically so only use this for dependencies

      that aren't automatically captured or if you've disabled automatic
      dependency collection.
    syntax:
      content: 'function trackDependency(telemetry: DependencyTelemetry)'
      parameters:
        - id: telemetry
          type:
            - applicationinsights.DependencyTelemetry
          description: |
            Object encapsulating tracking option
    package: applicationinsights
  - uid: applicationinsights.NodeClient.trackEvent
    name: trackEvent(EventTelemetry)
    children: []
    type: method
    langs:
      - typeScript
    summary: Log a user action or other occurrence.
    syntax:
      content: 'function trackEvent(telemetry: EventTelemetry)'
      parameters:
        - id: telemetry
          type:
            - applicationinsights.EventTelemetry
          description: |
            Object encapsulating tracking options
    package: applicationinsights
  - uid: applicationinsights.NodeClient.trackException
    name: trackException(ExceptionTelemetry)
    children: []
    type: method
    langs:
      - typeScript
    summary: Log an exception
    syntax:
      content: 'function trackException(telemetry: ExceptionTelemetry)'
      parameters:
        - id: telemetry
          type:
            - applicationinsights.ExceptionTelemetry
          description: |
            Object encapsulating tracking options
    package: applicationinsights
  - uid: applicationinsights.NodeClient.trackMetric
    name: trackMetric(MetricTelemetry)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Log a numeric value that is not associated with a specific event.
      Typically used to send regular reports of performance indicators.

      To send a single measurement, use just the first two parameters. If you
      take measurements very frequently, you can reduce the

      telemetry bandwidth by aggregating multiple measurements and sending the
      resulting average at intervals.
    syntax:
      content: 'function trackMetric(telemetry: MetricTelemetry)'
      parameters:
        - id: telemetry
          type:
            - applicationinsights.MetricTelemetry
          description: |
            Object encapsulating tracking options
    package: applicationinsights
  - uid: applicationinsights.NodeClient.trackNodeHttpDependency
    name: trackNodeHttpDependency(NodeHttpDependencyTelemetry)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Log DependencyTelemetry from outgoing HTTP request. This method will
      instrument the outgoing request and append

      the specified headers and will log the telemetry when outgoing request is
      complete
    syntax:
      content: 'function trackNodeHttpDependency(telemetry: NodeHttpDependencyTelemetry)'
      parameters:
        - id: telemetry
          type:
            - applicationinsights.NodeHttpDependencyTelemetry
          description: |
            Object encapsulating outgoing request information
    package: applicationinsights
  - uid: applicationinsights.NodeClient.trackNodeHttpRequest
    name: trackNodeHttpRequest(NodeHttpRequestTelemetry)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Log RequestTelemetry from HTTP request and response. This method will
      `follow` the request to completion.

      Use trackNodeHttpRequestSync function to log telemetry immediately without
      waiting for request completion
    syntax:
      content: 'function trackNodeHttpRequest(telemetry: NodeHttpRequestTelemetry)'
      parameters:
        - id: telemetry
          type:
            - applicationinsights.NodeHttpRequestTelemetry
          description: |
            Object encapsulating incoming request and response information
    package: applicationinsights
  - uid: applicationinsights.NodeClient.trackNodeHttpRequestSync
    name: trackNodeHttpRequestSync(NodeHttpRequestTelemetry)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Log RequestTelemetry from HTTP request and response. This method will log
      immediately without waitng for request completion

      and it requires duration parameter to be specified on
      NodeHttpRequestTelemetry object.

      Use trackNodeHttpRequest function to log the telemetry after request
      completion
    syntax:
      content: 'function trackNodeHttpRequestSync(telemetry: NodeHttpRequestTelemetry)'
      parameters:
        - id: telemetry
          type:
            - applicationinsights.NodeHttpRequestTelemetry
          description: >
            Object encapsulating incoming request, response and duration
            information
    package: applicationinsights
  - uid: applicationinsights.NodeClient.trackRequest
    name: trackRequest(RequestTelemetry)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Log a request. Note that the default client will attempt to collect HTTP
      requests automatically so only use this for requests

      that aren't automatically captured or if you've disabled automatic request
      collection.
    syntax:
      content: 'function trackRequest(telemetry: RequestTelemetry)'
      parameters:
        - id: telemetry
          type:
            - applicationinsights.RequestTelemetry
          description: |
            Object encapsulating tracking options
    package: applicationinsights
  - uid: applicationinsights.NodeClient.trackTrace
    name: trackTrace(TraceTelemetry)
    children: []
    type: method
    langs:
      - typeScript
    summary: Log a trace message
    syntax:
      content: 'function trackTrace(telemetry: TraceTelemetry)'
      parameters:
        - id: telemetry
          type:
            - applicationinsights.TraceTelemetry
          description: |
            Object encapsulating tracking options
    package: applicationinsights
references:
  - uid: applicationinsights.TelemetryClient
    name: TelemetryClient
    spec.typeScript:
      - name: TelemetryClient
        fullName: TelemetryClient
        uid: applicationinsights.TelemetryClient
  - uid: applicationinsights.Channel
    name: Channel
    spec.typeScript:
      - name: Channel
        fullName: Channel
        uid: applicationinsights.Channel
  - uid: applicationinsights.Config
    name: Config
    spec.typeScript:
      - name: Config
        fullName: Config
        uid: applicationinsights.Config
  - uid: applicationinsights.Context
    name: Context
    spec.typeScript:
      - name: Context
        fullName: Context
        uid: applicationinsights.Context
  - uid: applicationinsights.QuickPulseStateManager
    name: QuickPulseStateManager
    spec.typeScript:
      - name: QuickPulseStateManager
        fullName: QuickPulseStateManager
        uid: applicationinsights.QuickPulseStateManager
  - uid: applicationinsights.FlushOptions
    name: FlushOptions
    spec.typeScript:
      - name: FlushOptions
        fullName: FlushOptions
        uid: applicationinsights.FlushOptions
  - uid: applicationinsights.Telemetry
    name: Telemetry
    spec.typeScript:
      - name: Telemetry
        fullName: Telemetry
        uid: applicationinsights.Telemetry
  - uid: applicationinsights.TelemetryType
    name: TelemetryType
    spec.typeScript:
      - name: TelemetryType
        fullName: TelemetryType
        uid: applicationinsights.TelemetryType
  - uid: applicationinsights.DependencyTelemetry
    name: DependencyTelemetry
    spec.typeScript:
      - name: DependencyTelemetry
        fullName: DependencyTelemetry
        uid: applicationinsights.DependencyTelemetry
  - uid: applicationinsights.EventTelemetry
    name: EventTelemetry
    spec.typeScript:
      - name: EventTelemetry
        fullName: EventTelemetry
        uid: applicationinsights.EventTelemetry
  - uid: applicationinsights.ExceptionTelemetry
    name: ExceptionTelemetry
    spec.typeScript:
      - name: ExceptionTelemetry
        fullName: ExceptionTelemetry
        uid: applicationinsights.ExceptionTelemetry
  - uid: applicationinsights.MetricTelemetry
    name: MetricTelemetry
    spec.typeScript:
      - name: MetricTelemetry
        fullName: MetricTelemetry
        uid: applicationinsights.MetricTelemetry
  - uid: applicationinsights.NodeHttpDependencyTelemetry
    name: NodeHttpDependencyTelemetry
    spec.typeScript:
      - name: NodeHttpDependencyTelemetry
        fullName: NodeHttpDependencyTelemetry
        uid: applicationinsights.NodeHttpDependencyTelemetry
  - uid: applicationinsights.NodeHttpRequestTelemetry
    name: NodeHttpRequestTelemetry
    spec.typeScript:
      - name: NodeHttpRequestTelemetry
        fullName: NodeHttpRequestTelemetry
        uid: applicationinsights.NodeHttpRequestTelemetry
  - uid: applicationinsights.RequestTelemetry
    name: RequestTelemetry
    spec.typeScript:
      - name: RequestTelemetry
        fullName: RequestTelemetry
        uid: applicationinsights.RequestTelemetry
  - uid: applicationinsights.TraceTelemetry
    name: TraceTelemetry
    spec.typeScript:
      - name: TraceTelemetry
        fullName: TraceTelemetry
        uid: applicationinsights.TraceTelemetry
