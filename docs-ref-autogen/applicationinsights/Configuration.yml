### YamlMime:UniversalReference
items:
  - uid: applicationinsights.Configuration
    name: Configuration
    fullName: Configuration
    children:
      - applicationinsights.Configuration.setAutoCollectConsole
      - applicationinsights.Configuration.setAutoCollectDependencies
      - applicationinsights.Configuration.setAutoCollectExceptions
      - applicationinsights.Configuration.setAutoCollectPerformance
      - applicationinsights.Configuration.setAutoCollectRequests
      - applicationinsights.Configuration.setAutoDependencyCorrelation
      - applicationinsights.Configuration.setDistributedTracingMode
      - applicationinsights.Configuration.setInternalLogging
      - applicationinsights.Configuration.setSendLiveMetrics
      - applicationinsights.Configuration.setUseDiskRetryCaching
      - applicationinsights.Configuration.start
    langs:
      - typeScript
    type: class
    summary: 'The active configuration for global SDK behaviors, such as autocollection.'
    package: applicationinsights
  - uid: applicationinsights.Configuration.setAutoCollectConsole
    name: 'setAutoCollectConsole(boolean, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the state of console and logger tracking (enabled by default for
      third-party loggers only)
    syntax:
      content: >-
        static function setAutoCollectConsole(value: boolean,
        collectConsoleLog?: boolean)
      parameters:
        - id: value
          type:
            - boolean
          description: if true logger activity will be sent to Application Insights
        - id: collectConsoleLog
          type:
            - boolean
          description: >-
            if true, logger autocollection will include console.log calls
            (default false)
          optional: true
      return:
        type:
          - applicationinsights.Configuration
    package: applicationinsights
  - uid: applicationinsights.Configuration.setAutoCollectDependencies
    name: setAutoCollectDependencies(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the state of dependency tracking (enabled by default)
    syntax:
      content: 'static function setAutoCollectDependencies(value: boolean)'
      parameters:
        - id: value
          type:
            - boolean
          description: if true dependencies will be sent to Application Insights
      return:
        type:
          - applicationinsights.Configuration
    package: applicationinsights
  - uid: applicationinsights.Configuration.setAutoCollectExceptions
    name: setAutoCollectExceptions(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the state of exception tracking (enabled by default)
    syntax:
      content: 'static function setAutoCollectExceptions(value: boolean)'
      parameters:
        - id: value
          type:
            - boolean
          description: if true uncaught exceptions will be sent to Application Insights
      return:
        type:
          - applicationinsights.Configuration
    package: applicationinsights
  - uid: applicationinsights.Configuration.setAutoCollectPerformance
    name: 'setAutoCollectPerformance(boolean, boolean | IDisabledExtendedMetrics)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the state of performance tracking (enabled by default)
    syntax:
      content: >-
        static function setAutoCollectPerformance(value: boolean,
        collectExtendedMetrics?: boolean | IDisabledExtendedMetrics)
      parameters:
        - id: value
          type:
            - boolean
          description: >-
            if true performance counters will be collected every second and sent
            to Application Insights
        - id: collectExtendedMetrics
          type:
            - boolean | applicationinsights.IDisabledExtendedMetrics
          description: >-
            if true, extended metrics counters will be collected every minute
            and sent to Application Insights
          optional: true
      return:
        type:
          - applicationinsights.Configuration
    package: applicationinsights
  - uid: applicationinsights.Configuration.setAutoCollectRequests
    name: setAutoCollectRequests(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the state of request tracking (enabled by default)
    syntax:
      content: 'static function setAutoCollectRequests(value: boolean)'
      parameters:
        - id: value
          type:
            - boolean
          description: if true requests will be sent to Application Insights
      return:
        type:
          - applicationinsights.Configuration
    package: applicationinsights
  - uid: applicationinsights.Configuration.setAutoDependencyCorrelation
    name: 'setAutoDependencyCorrelation(boolean, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the state of automatic dependency correlation (enabled by default)
    syntax:
      content: >-
        static function setAutoDependencyCorrelation(value: boolean,
        useAsyncHooks?: boolean)
      parameters:
        - id: value
          type:
            - boolean
          description: if true dependencies will be correlated with requests
        - id: useAsyncHooks
          type:
            - boolean
          description: >-
            if true, forces use of experimental async_hooks module to provide
            correlation. If false, instead uses only patching-based techniques.
            If left blank, the best option is chosen for you based on your
            version of Node.js.
          optional: true
      return:
        type:
          - applicationinsights.Configuration
    package: applicationinsights
  - uid: applicationinsights.Configuration.setDistributedTracingMode
    name: setDistributedTracingMode(DistributedTracingModes)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the distributed tracing modes. If W3C mode is enabled, W3C trace
      context

      headers (traceparent/tracestate) will be parsed in all incoming requests,
      and included in outgoing

      requests. In W3C mode, existing back-compatibility AI headers will also be
      parsed and included.

      Enabling W3C mode will not break existing correlation with other
      Application Insights instrumented

      services. Default=AI
    syntax:
      content: >-
        static function setDistributedTracingMode(value:
        DistributedTracingModes)
      parameters:
        - id: value
          type:
            - applicationinsights.DistributedTracingModes
          description: ''
      return:
        type:
          - applicationinsights.Configuration
    package: applicationinsights
  - uid: applicationinsights.Configuration.setInternalLogging
    name: 'setInternalLogging(boolean, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Enables debug and warning logging for AppInsights itself.
    syntax:
      content: >-
        static function setInternalLogging(enableDebugLogging?: boolean,
        enableWarningLogging?: boolean)
      parameters:
        - id: enableDebugLogging
          type:
            - boolean
          description: 'if true, enables debug logging'
          optional: true
        - id: enableWarningLogging
          type:
            - boolean
          description: 'if true, enables warning logging'
          optional: true
      return:
        type:
          - applicationinsights.Configuration
    package: applicationinsights
  - uid: applicationinsights.Configuration.setSendLiveMetrics
    name: setSendLiveMetrics(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: Enables communication with Application Insights Live Metrics.
    syntax:
      content: 'static function setSendLiveMetrics(enable?: boolean)'
      parameters:
        - id: enable
          type:
            - boolean
          description: |
            if true, enables communication with the live metrics service
          optional: true
      return:
        type:
          - applicationinsights.Configuration
    package: applicationinsights
  - uid: applicationinsights.Configuration.setUseDiskRetryCaching
    name: 'setUseDiskRetryCaching(boolean, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Enable or disable disk-backed retry caching to cache events when client is
      offline (enabled by default)

      Note that this method only applies to the default client. Disk-backed
      retry caching is disabled by default for additional clients.

      For enable for additional clients, use
      client.channel.setUseDiskRetryCaching(true).

      These cached events are stored in your system or user's temporary
      directory and access restricted to your user when possible.
    syntax:
      content: >-
        static function setUseDiskRetryCaching(value: boolean, resendInterval?:
        number, maxBytesOnDisk?: number)
      parameters:
        - id: value
          type:
            - boolean
          description: >-
            if true events that occured while client is offline will be cached
            on disk
        - id: resendInterval
          type:
            - number
          description: The wait interval for resending cached events.
          optional: true
        - id: maxBytesOnDisk
          type:
            - number
          description: >-
            The maximum size (in bytes) that the created temporary directory for
            cache events can grow to, before caching is disabled.
          optional: true
      return:
        type:
          - applicationinsights.Configuration
    package: applicationinsights
  - uid: applicationinsights.Configuration.start
    name: start
    fullName: start
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static start: start'
      return:
        type:
          - applicationinsights.start
    package: applicationinsights
references:
  - uid: applicationinsights.start
    name: start
    spec.typeScript:
      - name: start
        fullName: start
        uid: applicationinsights.start
  - uid: applicationinsights.Configuration
    name: Configuration
    spec.typeScript:
      - name: Configuration
        fullName: Configuration
        uid: applicationinsights.Configuration
  - uid: boolean | applicationinsights.IDisabledExtendedMetrics
    name: IDisabledExtendedMetrics
    spec.typeScript:
      - name: 'boolean | '
        fullName: 'boolean | '
      - name: IDisabledExtendedMetrics
        fullName: IDisabledExtendedMetrics
        uid: applicationinsights.IDisabledExtendedMetrics
  - uid: applicationinsights.DistributedTracingModes
    name: DistributedTracingModes
    spec.typeScript:
      - name: DistributedTracingModes
        fullName: DistributedTracingModes
        uid: applicationinsights.DistributedTracingModes
