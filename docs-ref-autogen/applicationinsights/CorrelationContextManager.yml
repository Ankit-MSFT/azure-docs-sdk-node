### YamlMime:UniversalReference
items:
  - uid: applicationinsights.CorrelationContextManager
    name: CorrelationContextManager
    fullName: CorrelationContextManager
    children:
      - applicationinsights.CorrelationContextManager.disable
      - applicationinsights.CorrelationContextManager.enable
      - applicationinsights.CorrelationContextManager.generateContextObject
      - applicationinsights.CorrelationContextManager.getCurrentContext
      - applicationinsights.CorrelationContextManager.isNodeVersionCompatible
      - applicationinsights.CorrelationContextManager.reset
      - applicationinsights.CorrelationContextManager.runWithContext
      - applicationinsights.CorrelationContextManager.shouldUseClsHooked
      - applicationinsights.CorrelationContextManager.wrapCallback
      - applicationinsights.CorrelationContextManager.wrapEmitter
    langs:
      - typeScript
    type: class
    summary: ''
    package: applicationinsights
  - uid: applicationinsights.CorrelationContextManager.disable
    name: disable()
    children: []
    type: method
    langs:
      - typeScript
    summary: Disables the CorrelationContextManager.
    syntax:
      content: static function disable()
      parameters: []
    package: applicationinsights
  - uid: applicationinsights.CorrelationContextManager.enable
    name: enable(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: Enables the CorrelationContextManager.
    syntax:
      content: 'static function enable(forceClsHooked?: boolean)'
      parameters:
        - id: forceClsHooked
          type:
            - boolean
          description: ''
          optional: true
    package: applicationinsights
  - uid: applicationinsights.CorrelationContextManager.generateContextObject
    name: >-
      generateContextObject(string, string, string, string, Traceparent,
      Tracestate)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A helper to generate objects conforming to the CorrelationContext
      interface
    syntax:
      content: >-
        static function generateContextObject(operationId: string, parentId?:
        string, operationName?: string, correlationContextHeader?: string,
        traceparent?: Traceparent, tracestate?: Tracestate)
      parameters:
        - id: operationId
          type:
            - string
          description: ''
        - id: parentId
          type:
            - string
          description: ''
          optional: true
        - id: operationName
          type:
            - string
          description: ''
          optional: true
        - id: correlationContextHeader
          type:
            - string
          description: ''
          optional: true
        - id: traceparent
          type:
            - applicationinsights.Traceparent
          description: ''
          optional: true
        - id: tracestate
          type:
            - applicationinsights.Tracestate
          description: ''
          optional: true
      return:
        type:
          - applicationinsights.CorrelationContext
    package: applicationinsights
  - uid: applicationinsights.CorrelationContextManager.getCurrentContext
    name: getCurrentContext()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Provides the current Context.
       The context is the most recent one entered into for the current
       logical chain of execution, including across asynchronous calls.
    syntax:
      content: static function getCurrentContext()
      parameters: []
      return:
        type:
          - applicationinsights.CorrelationContext
    package: applicationinsights
  - uid: applicationinsights.CorrelationContextManager.isNodeVersionCompatible
    name: isNodeVersionCompatible()
    children: []
    type: method
    langs:
      - typeScript
    summary: Reports if CorrelationContextManager is able to run in this environment
    syntax:
      content: static function isNodeVersionCompatible()
      parameters: []
      return:
        type:
          - boolean
    package: applicationinsights
  - uid: applicationinsights.CorrelationContextManager.reset
    name: reset()
    children: []
    type: method
    langs:
      - typeScript
    summary: Reset the namespace
    syntax:
      content: static function reset()
      parameters: []
    package: applicationinsights
  - uid: applicationinsights.CorrelationContextManager.runWithContext
    name: 'runWithContext(CorrelationContext, () => any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Runs a function inside a given Context.
       All logical children of the execution path that entered this Context
       will receive this Context object on calls to GetCurrentContext.
    syntax:
      content: >-
        static function runWithContext(context: CorrelationContext, fn: () =>
        any)
      parameters:
        - id: context
          type:
            - applicationinsights.CorrelationContext
          description: ''
        - id: fn
          type:
            - () => any
          description: ''
      return:
        type:
          - any
    package: applicationinsights
  - uid: applicationinsights.CorrelationContextManager.shouldUseClsHooked
    name: shouldUseClsHooked()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      We only want to use cls-hooked when it uses async_hooks api (8.2+), else
      use async-listener (plain -cls)
    syntax:
      content: static function shouldUseClsHooked()
      parameters: []
      return:
        type:
          - boolean
    package: applicationinsights
  - uid: applicationinsights.CorrelationContextManager.wrapCallback
    name: wrapCallback(T)
    children: []
    type: method
    langs:
      - typeScript
    summary: |2-
       Patches a callback to restore the correct Context when getCurrentContext
       is run within it. This is necessary if automatic correlation fails to work
       with user-included libraries.
       The supplied callback will be given the same context that was present for
       the call to wrapCallback.
    syntax:
      content: 'static function wrapCallback<T>(fn: T)'
      parameters:
        - id: fn
          type:
            - T
          description: ''
      return:
        type:
          - T
    package: applicationinsights
  - uid: applicationinsights.CorrelationContextManager.wrapEmitter
    name: wrapEmitter(events.EventEmitter)
    children: []
    type: method
    langs:
      - typeScript
    summary: Wrapper for cls-hooked bindEmitter method
    syntax:
      content: 'static function wrapEmitter(emitter: events.EventEmitter)'
      parameters:
        - id: emitter
          type:
            - events.EventEmitter
          description: ''
    package: applicationinsights
references:
  - uid: applicationinsights.Traceparent
    name: Traceparent
    spec.typeScript:
      - name: Traceparent
        fullName: Traceparent
        uid: applicationinsights.Traceparent
  - uid: applicationinsights.Tracestate
    name: Tracestate
    spec.typeScript:
      - name: Tracestate
        fullName: Tracestate
        uid: applicationinsights.Tracestate
  - uid: applicationinsights.CorrelationContext
    name: CorrelationContext
    spec.typeScript:
      - name: CorrelationContext
        fullName: CorrelationContext
        uid: applicationinsights.CorrelationContext
