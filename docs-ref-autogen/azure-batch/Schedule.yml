### YamlMime:UniversalReference
items:
  - uid: azure-batch.Schedule
    name: Schedule
    fullName: Schedule
    children:
      - azure-batch.Schedule.doNotRunAfter
      - azure-batch.Schedule.doNotRunUntil
      - azure-batch.Schedule.recurrenceInterval
      - azure-batch.Schedule.startWindow
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-batch
  - uid: azure-batch.Schedule.doNotRunAfter
    name: doNotRunAfter
    fullName: doNotRunAfter
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If you do not specify a doNotRunAfter time, and you are creating a
      recurring Job

      Schedule, the Job Schedule will remain active until you explicitly
      terminate it.
    optional: true
    syntax:
      content: 'doNotRunAfter?: Date'
      return:
        type:
          - Date
    package: azure-batch
  - uid: azure-batch.Schedule.doNotRunUntil
    name: doNotRunUntil
    fullName: doNotRunUntil
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If you do not specify a doNotRunUntil time, the schedule becomes ready to
      create

      Jobs immediately.
    optional: true
    syntax:
      content: 'doNotRunUntil?: Date'
      return:
        type:
          - Date
    package: azure-batch
  - uid: azure-batch.Schedule.recurrenceInterval
    name: recurrenceInterval
    fullName: recurrenceInterval
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Because a Job Schedule can have at most one active Job under it at any
      given

      time, if it is time to create a new Job under a Job Schedule, but the
      previous Job is still

      running, the Batch service will not create the new Job until the previous
      Job finishes. If the

      previous Job does not finish within the startWindow period of the new
      recurrenceInterval, then

      no new Job will be scheduled for that interval. For recurring Jobs, you
      should normally

      specify a jobManagerTask in the jobSpecification. If you do not use
      jobManagerTask, you will

      need an external process to monitor when Jobs are created, add Tasks to
      the Jobs and terminate

      the Jobs ready for the next recurrence. The default is that the schedule
      does not recur: one

      Job is created, within the startWindow after the doNotRunUntil time, and
      the schedule is

      complete as soon as that Job finishes. The minimum value is 1 minute. If
      you specify a lower

      value, the Batch service rejects the schedule with an error; if you are
      calling the REST API

      directly, the HTTP status code is 400 (Bad Request).
    optional: true
    syntax:
      content: 'recurrenceInterval?: Duration'
      return:
        type:
          - Duration
    package: azure-batch
  - uid: azure-batch.Schedule.startWindow
    name: startWindow
    fullName: startWindow
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If a Job is not created within the startWindow interval, then the
      'opportunity'

      is lost; no Job will be created until the next recurrence of the schedule.
      If the schedule is

      recurring, and the startWindow is longer than the recurrence interval,
      then this is equivalent

      to an infinite startWindow, because the Job that is 'due' in one
      recurrenceInterval is not

      carried forward into the next recurrence interval. The default is
      infinite. The minimum value

      is 1 minute. If you specify a lower value, the Batch service rejects the
      schedule with an

      error; if you are calling the REST API directly, the HTTP status code is
      400 (Bad Request).
    optional: true
    syntax:
      content: 'startWindow?: Duration'
      return:
        type:
          - Duration
    package: azure-batch
