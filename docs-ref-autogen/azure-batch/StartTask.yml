### YamlMime:UniversalReference
items:
  - uid: azure-batch.StartTask
    name: StartTask
    fullName: StartTask
    children:
      - azure-batch.StartTask.commandLine
      - azure-batch.StartTask.containerSettings
      - azure-batch.StartTask.environmentSettings
      - azure-batch.StartTask.maxTaskRetryCount
      - azure-batch.StartTask.resourceFiles
      - azure-batch.StartTask.userIdentity
      - azure-batch.StartTask.waitForSuccess
    langs:
      - typeScript
    type: interface
    summary: >-
      Batch will retry Tasks when a recovery operation is triggered on a Node.
      Examples

      of recovery operations include (but are not limited to) when an unhealthy
      Node is rebooted or a

      Compute Node disappeared due to host failure. Retries due to recovery
      operations are independent

      of and are not counted against the maxTaskRetryCount. Even if the
      maxTaskRetryCount is 0, an

      internal retry due to a recovery operation may occur. Because of this, all
      Tasks should be

      idempotent. This means Tasks need to tolerate being interrupted and
      restarted without causing

      any corruption or duplicate data. The best practice for long running Tasks
      is to use some form

      of checkpointing. In some cases the start Task may be re-run even though
      the Compute Node was

      not rebooted. Special care should be taken to avoid start Tasks which
      create breakaway process

      or install/launch services from the start Task working directory, as this
      will block Batch from

      being able to re-run the start Task.
    package: azure-batch
  - uid: azure-batch.StartTask.commandLine
    name: commandLine
    fullName: commandLine
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The command line does not run under a shell, and therefore cannot take
      advantage

      of shell features such as environment variable expansion. If you want to
      take advantage of

      such features, you should invoke the shell in the command line, for
      example using "cmd /c

      MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command
      line refers to file

      paths, it should use a relative path (relative to the Task working
      directory), or use the

      Batch provided environment variable

      (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
    syntax:
      content: 'commandLine: string'
      return:
        type:
          - string
    package: azure-batch
  - uid: azure-batch.StartTask.containerSettings
    name: containerSettings
    fullName: containerSettings
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      When this is specified, all directories recursively below the

      AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node)
      are mapped into the

      container, all Task environment variables are mapped into the container,
      and the Task command

      line is executed in the container. Files produced in the container outside
      of

      AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning
      that Batch file APIs

      will not be able to access those files.
    optional: true
    syntax:
      content: 'containerSettings?: TaskContainerSettings'
      return:
        type:
          - azure-batch.TaskContainerSettings
    package: azure-batch
  - uid: azure-batch.StartTask.environmentSettings
    name: environmentSettings
    fullName: environmentSettings
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'environmentSettings?: EnvironmentSetting[]'
      return:
        type:
          - 'azure-batch.EnvironmentSetting[]'
    package: azure-batch
  - uid: azure-batch.StartTask.maxTaskRetryCount
    name: maxTaskRetryCount
    fullName: maxTaskRetryCount
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The Batch service retries a Task if its exit code is nonzero. Note that
      this

      value specifically controls the number of retries. The Batch service will
      try the Task once,

      and may then retry up to this limit. For example, if the maximum retry
      count is 3, Batch tries

      the Task up to 4 times (one initial try and 3 retries). If the maximum
      retry count is 0, the

      Batch service does not retry the Task. If the maximum retry count is -1,
      the Batch service

      retries the Task without limit.
    optional: true
    syntax:
      content: 'maxTaskRetryCount?: number'
      return:
        type:
          - number
    package: azure-batch
  - uid: azure-batch.StartTask.resourceFiles
    name: resourceFiles
    fullName: resourceFiles
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Files listed under this element are located in the Task's working
      directory.
    optional: true
    syntax:
      content: 'resourceFiles?: ResourceFile[]'
      return:
        type:
          - 'azure-batch.ResourceFile[]'
    package: azure-batch
  - uid: azure-batch.StartTask.userIdentity
    name: userIdentity
    fullName: userIdentity
    children: []
    langs:
      - typeScript
    type: property
    summary: 'If omitted, the Task runs as a non-administrative user unique to the Task.'
    optional: true
    syntax:
      content: 'userIdentity?: UserIdentity'
      return:
        type:
          - azure-batch.UserIdentity
    package: azure-batch
  - uid: azure-batch.StartTask.waitForSuccess
    name: waitForSuccess
    fullName: waitForSuccess
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If true and the start Task fails on a Node, the Batch service retries the
      start

      Task up to its maximum retry count (maxTaskRetryCount). If the Task has
      still not completed

      successfully after all retries, then the Batch service marks the Node
      unusable, and will not

      schedule Tasks to it. This condition can be detected via the Compute Node
      state and failure

      info details. If false, the Batch service will not wait for the start Task
      to complete. In

      this case, other Tasks can start executing on the Compute Node while the
      start Task is still

      running; and even if the start Task fails, new Tasks will continue to be
      scheduled on the

      Compute Node. The default is false.
    optional: true
    syntax:
      content: 'waitForSuccess?: boolean'
      return:
        type:
          - boolean
    package: azure-batch
references:
  - uid: azure-batch.TaskContainerSettings
    name: TaskContainerSettings
    spec.typeScript:
      - name: TaskContainerSettings
        fullName: TaskContainerSettings
        uid: azure-batch.TaskContainerSettings
  - uid: 'azure-batch.EnvironmentSetting[]'
    name: 'EnvironmentSetting[]'
    spec.typeScript:
      - name: EnvironmentSetting
        fullName: EnvironmentSetting
        uid: azure-batch.EnvironmentSetting
      - name: '[]'
        fullName: '[]'
  - uid: 'azure-batch.ResourceFile[]'
    name: 'ResourceFile[]'
    spec.typeScript:
      - name: ResourceFile
        fullName: ResourceFile
        uid: azure-batch.ResourceFile
      - name: '[]'
        fullName: '[]'
  - uid: azure-batch.UserIdentity
    name: UserIdentity
    spec.typeScript:
      - name: UserIdentity
        fullName: UserIdentity
        uid: azure-batch.UserIdentity
