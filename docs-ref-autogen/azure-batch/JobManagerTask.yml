### YamlMime:UniversalReference
items:
  - uid: azure-batch.JobManagerTask
    name: JobManagerTask
    fullName: JobManagerTask
    children:
      - azure-batch.JobManagerTask.allowLowPriorityNode
      - azure-batch.JobManagerTask.applicationPackageReferences
      - azure-batch.JobManagerTask.authenticationTokenSettings
      - azure-batch.JobManagerTask.commandLine
      - azure-batch.JobManagerTask.constraints
      - azure-batch.JobManagerTask.containerSettings
      - azure-batch.JobManagerTask.displayName
      - azure-batch.JobManagerTask.environmentSettings
      - azure-batch.JobManagerTask.id
      - azure-batch.JobManagerTask.killJobOnCompletion
      - azure-batch.JobManagerTask.outputFiles
      - azure-batch.JobManagerTask.resourceFiles
      - azure-batch.JobManagerTask.runExclusive
      - azure-batch.JobManagerTask.userIdentity
    langs:
      - typeScript
    type: interface
    summary: >-
      The Job Manager Task is automatically started when the Job is created. The
      Batch

      service tries to schedule the Job Manager Task before any other Tasks in
      the Job. When shrinking

      a Pool, the Batch service tries to preserve Nodes where Job Manager Tasks
      are running for as

      long as possible (that is, Compute Nodes running 'normal' Tasks are
      removed before Compute Nodes

      running Job Manager Tasks). When a Job Manager Task fails and needs to be
      restarted, the system

      tries to schedule it at the highest priority. If there are no idle Compute
      Nodes available, the

      system may terminate one of the running Tasks in the Pool and return it to
      the queue in order to

      make room for the Job Manager Task to restart. Note that a Job Manager
      Task in one Job does not

      have priority over Tasks in other Jobs. Across Jobs, only Job level
      priorities are observed. For

      example, if a Job Manager in a priority 0 Job needs to be restarted, it
      will not displace Tasks

      of a priority 1 Job. Batch will retry Tasks when a recovery operation is
      triggered on a Node.

      Examples of recovery operations include (but are not limited to) when an
      unhealthy Node is

      rebooted or a Compute Node disappeared due to host failure. Retries due to
      recovery operations

      are independent of and are not counted against the maxTaskRetryCount. Even
      if the

      maxTaskRetryCount is 0, an internal retry due to a recovery operation may
      occur. Because of

      this, all Tasks should be idempotent. This means Tasks need to tolerate
      being interrupted and

      restarted without causing any corruption or duplicate data. The best
      practice for long running

      Tasks is to use some form of checkpointing.
    package: azure-batch
  - uid: azure-batch.JobManagerTask.allowLowPriorityNode
    name: allowLowPriorityNode
    fullName: allowLowPriorityNode
    children: []
    langs:
      - typeScript
    type: property
    summary: The default value is true.
    optional: true
    syntax:
      content: 'allowLowPriorityNode?: boolean'
      return:
        type:
          - boolean
    package: azure-batch
  - uid: azure-batch.JobManagerTask.applicationPackageReferences
    name: applicationPackageReferences
    fullName: applicationPackageReferences
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Application Packages are downloaded and deployed to a shared directory,
      not the

      Task working directory. Therefore, if a referenced Application Package is
      already on the

      Compute Node, and is up to date, then it is not re-downloaded; the
      existing copy on the

      Compute Compute Node is used. If a referenced Application Package cannot
      be installed, for

      example because the package has been deleted or because download failed,
      the Task fails.
    optional: true
    syntax:
      content: 'applicationPackageReferences?: ApplicationPackageReference[]'
      return:
        type:
          - 'azure-batch.ApplicationPackageReference[]'
    package: azure-batch
  - uid: azure-batch.JobManagerTask.authenticationTokenSettings
    name: authenticationTokenSettings
    fullName: authenticationTokenSettings
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If this property is set, the Batch service provides the Task with an

      authentication token which can be used to authenticate Batch service
      operations without

      requiring an Account access key. The token is provided via the
      AZ_BATCH_AUTHENTICATION_TOKEN

      environment variable. The operations that the Task can carry out using the
      token depend on the

      settings. For example, a Task can request Job permissions in order to add
      other Tasks to the

      Job, or check the status of the Job or of other Tasks under the Job.
    optional: true
    syntax:
      content: 'authenticationTokenSettings?: AuthenticationTokenSettings'
      return:
        type:
          - azure-batch.AuthenticationTokenSettings
    package: azure-batch
  - uid: azure-batch.JobManagerTask.commandLine
    name: commandLine
    fullName: commandLine
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The command line does not run under a shell, and therefore cannot take
      advantage

      of shell features such as environment variable expansion. If you want to
      take advantage of

      such features, you should invoke the shell in the command line, for
      example using "cmd /c

      MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command
      line refers to file

      paths, it should use a relative path (relative to the Task working
      directory), or use the

      Batch provided environment variable

      (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
    syntax:
      content: 'commandLine: string'
      return:
        type:
          - string
    package: azure-batch
  - uid: azure-batch.JobManagerTask.constraints
    name: constraints
    fullName: constraints
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'constraints?: TaskConstraints'
      return:
        type:
          - azure-batch.TaskConstraints
    package: azure-batch
  - uid: azure-batch.JobManagerTask.containerSettings
    name: containerSettings
    fullName: containerSettings
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If the Pool that will run this Task has containerConfiguration set, this
      must be

      set as well. If the Pool that will run this Task doesn't have
      containerConfiguration set, this

      must not be set. When this is specified, all directories recursively below
      the

      AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node)
      are mapped into the

      container, all Task environment variables are mapped into the container,
      and the Task command

      line is executed in the container. Files produced in the container outside
      of

      AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning
      that Batch file APIs

      will not be able to access those files.
    optional: true
    syntax:
      content: 'containerSettings?: TaskContainerSettings'
      return:
        type:
          - azure-batch.TaskContainerSettings
    package: azure-batch
  - uid: azure-batch.JobManagerTask.displayName
    name: displayName
    fullName: displayName
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      It need not be unique and can contain any Unicode characters up to a
      maximum

      length of 1024.
    optional: true
    syntax:
      content: 'displayName?: string'
      return:
        type:
          - string
    package: azure-batch
  - uid: azure-batch.JobManagerTask.environmentSettings
    name: environmentSettings
    fullName: environmentSettings
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'environmentSettings?: EnvironmentSetting[]'
      return:
        type:
          - 'azure-batch.EnvironmentSetting[]'
    package: azure-batch
  - uid: azure-batch.JobManagerTask.id
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The ID can contain any combination of alphanumeric characters including
      hyphens

      and underscores and cannot contain more than 64 characters.
    syntax:
      content: 'id: string'
      return:
        type:
          - string
    package: azure-batch
  - uid: azure-batch.JobManagerTask.killJobOnCompletion
    name: killJobOnCompletion
    fullName: killJobOnCompletion
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If true, when the Job Manager Task completes, the Batch service marks the
      Job as

      complete. If any Tasks are still running at this time (other than Job
      Release), those Tasks

      are terminated. If false, the completion of the Job Manager Task does not
      affect the Job

      status. In this case, you should either use the onAllTasksComplete
      attribute to terminate the

      Job, or have a client or user terminate the Job explicitly. An example of
      this is if the Job

      Manager creates a set of Tasks but then takes no further role in their
      execution. The default

      value is true. If you are using the onAllTasksComplete and onTaskFailure
      attributes to control

      Job lifetime, and using the Job Manager Task only to create the Tasks for
      the Job (not to

      monitor progress), then it is important to set killJobOnCompletion to
      false.
    optional: true
    syntax:
      content: 'killJobOnCompletion?: boolean'
      return:
        type:
          - boolean
    package: azure-batch
  - uid: azure-batch.JobManagerTask.outputFiles
    name: outputFiles
    fullName: outputFiles
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      For multi-instance Tasks, the files will only be uploaded from the Compute
      Node

      on which the primary Task is executed.
    optional: true
    syntax:
      content: 'outputFiles?: OutputFile[]'
      return:
        type:
          - 'azure-batch.OutputFile[]'
    package: azure-batch
  - uid: azure-batch.JobManagerTask.resourceFiles
    name: resourceFiles
    fullName: resourceFiles
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Files listed under this element are located in the Task's working
      directory.

      There is a maximum size for the list of resource files.  When the max size
      is exceeded, the

      request will fail and the response error code will be
      RequestEntityTooLarge. If this occurs,

      the collection of ResourceFiles must be reduced in size. This can be
      achieved using .zip

      files, Application Packages, or Docker Containers.
    optional: true
    syntax:
      content: 'resourceFiles?: ResourceFile[]'
      return:
        type:
          - 'azure-batch.ResourceFile[]'
    package: azure-batch
  - uid: azure-batch.JobManagerTask.runExclusive
    name: runExclusive
    fullName: runExclusive
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If true, no other Tasks will run on the same Node for as long as the Job
      Manager

      is running. If false, other Tasks can run simultaneously with the Job
      Manager on a Compute

      Node. The Job Manager Task counts normally against the Compute Node's
      concurrent Task limit,

      so this is only relevant if the Compute Node allows multiple concurrent
      Tasks. The default

      value is true.
    optional: true
    syntax:
      content: 'runExclusive?: boolean'
      return:
        type:
          - boolean
    package: azure-batch
  - uid: azure-batch.JobManagerTask.userIdentity
    name: userIdentity
    fullName: userIdentity
    children: []
    langs:
      - typeScript
    type: property
    summary: 'If omitted, the Task runs as a non-administrative user unique to the Task.'
    optional: true
    syntax:
      content: 'userIdentity?: UserIdentity'
      return:
        type:
          - azure-batch.UserIdentity
    package: azure-batch
references:
  - uid: 'azure-batch.ApplicationPackageReference[]'
    name: 'ApplicationPackageReference[]'
    spec.typeScript:
      - name: ApplicationPackageReference
        fullName: ApplicationPackageReference
        uid: azure-batch.ApplicationPackageReference
      - name: '[]'
        fullName: '[]'
  - uid: azure-batch.AuthenticationTokenSettings
    name: AuthenticationTokenSettings
    spec.typeScript:
      - name: AuthenticationTokenSettings
        fullName: AuthenticationTokenSettings
        uid: azure-batch.AuthenticationTokenSettings
  - uid: azure-batch.TaskConstraints
    name: TaskConstraints
    spec.typeScript:
      - name: TaskConstraints
        fullName: TaskConstraints
        uid: azure-batch.TaskConstraints
  - uid: azure-batch.TaskContainerSettings
    name: TaskContainerSettings
    spec.typeScript:
      - name: TaskContainerSettings
        fullName: TaskContainerSettings
        uid: azure-batch.TaskContainerSettings
  - uid: 'azure-batch.EnvironmentSetting[]'
    name: 'EnvironmentSetting[]'
    spec.typeScript:
      - name: EnvironmentSetting
        fullName: EnvironmentSetting
        uid: azure-batch.EnvironmentSetting
      - name: '[]'
        fullName: '[]'
  - uid: 'azure-batch.OutputFile[]'
    name: 'OutputFile[]'
    spec.typeScript:
      - name: OutputFile
        fullName: OutputFile
        uid: azure-batch.OutputFile
      - name: '[]'
        fullName: '[]'
  - uid: 'azure-batch.ResourceFile[]'
    name: 'ResourceFile[]'
    spec.typeScript:
      - name: ResourceFile
        fullName: ResourceFile
        uid: azure-batch.ResourceFile
      - name: '[]'
        fullName: '[]'
  - uid: azure-batch.UserIdentity
    name: UserIdentity
    spec.typeScript:
      - name: UserIdentity
        fullName: UserIdentity
        uid: azure-batch.UserIdentity
