### YamlMime:TSType
name: DataLakeDirectoryClient
uid: '@azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient'
package: '@azure/storage-file-datalake'
summary: A DataLakeDirectoryClient represents a URL to the Azure Storage directory.
fullName: DataLakeDirectoryClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'DataLakeDirectoryClient(string, Pipeline)'
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.constructor_1
    package: '@azure/storage-file-datalake'
    summary: Creates an instance of DataLakePathClient from url and pipeline.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new DataLakeDirectoryClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: >-
            A Client string pointing to Azure Storage data lake path (directory
            or file), such as
                                "https://myaccount.dfs.core.windows.net/filesystem/directory" or "https://myaccount.dfs.core.windows.net/filesystem/file".
                                You can append a SAS if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net/filesystem/directory?sasString".
        - id: pipeline
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.Pipeline"
            />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      DataLakeDirectoryClient(string, StorageSharedKeyCredential |
      AnonymousCredential | TokenCredential, StoragePipelineOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.constructor
    package: '@azure/storage-file-datalake'
    summary: Creates an instance of DataLakePathClient from url and credential.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new DataLakeDirectoryClient(url: string, credential?:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        options?: StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: >-
            A Client string pointing to Azure Storage data lake path (directory
            or file), such as
                                "https://myaccount.dfs.core.windows.net/filesystem/directory" or "https://myaccount.dfs.core.windows.net/filesystem/file".
                                You can append a SAS if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net/filesystem/directory?sasString".
        - id: credential
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.StorageSharedKeyCredential"
            /> | <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.AnonymousCredential"
            /> | TokenCredential
          description: ''
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.StoragePipelineOptions"
            />
          description: ''
properties:
  - name: accountName
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.accountName
    package: '@azure/storage-file-datalake'
    summary: ''
    fullName: accountName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        type: string
        description: ''
  - name: credential
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.credential
    package: '@azure/storage-file-datalake'
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the @azure/identity package to authenticate requests to the service.
      You can also provide an object that implements the TokenCredential
      interface. If not specified, AnonymousCredential is used.
    fullName: credential
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        type: >-
          <xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.StorageSharedKeyCredential"
          /> | <xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.AnonymousCredential"
          /> | TokenCredential
        description: ''
  - name: fileSystemName
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.fileSystemName
    package: '@azure/storage-file-datalake'
    summary: Name of current file system.
    fullName: fileSystemName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string fileSystemName
      return:
        type: string
        description: ''
  - name: name
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.name
    package: '@azure/storage-file-datalake'
    summary: Name of current path (directory or file).
    fullName: name
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string name
      return:
        type: string
        description: ''
  - name: url
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.url
    package: '@azure/storage-file-datalake'
    summary: Encoded URL string value.
    fullName: url
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        type: string
        description: ''
methods:
  - name: create(DirectoryCreateOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.create_1
    package: '@azure/storage-file-datalake'
    summary: Create a directory.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function create(options?: DirectoryCreateOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.DirectoryCreateOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.DirectoryCreateResponse"
          />&gt;
        description: ''
  - name: 'create(PathResourceType, PathCreateOptions)'
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.create
    package: '@azure/storage-file-datalake'
    summary: Create a directory.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(resourceType: PathResourceType, options?:
        PathCreateOptions)
      parameters:
        - id: resourceType
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathResourceType"
            />
          description: 'Resource type, must be "directory" for DataLakeDirectoryClient.'
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathCreateOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.PathCreateResponse"
          />&gt;
        description: ''
  - name: createIfNotExists(DirectoryCreateIfNotExistsOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.createIfNotExists_1
    package: '@azure/storage-file-datalake'
    summary: Create a directory if it doesn't already exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createIfNotExists(options?: DirectoryCreateIfNotExistsOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.DirectoryCreateIfNotExistsOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.DirectoryCreateIfNotExistsResponse"
          />&gt;
        description: ''
  - name: 'createIfNotExists(PathResourceType, PathCreateIfNotExistsOptions)'
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.createIfNotExists
    package: '@azure/storage-file-datalake'
    summary: Create a directory if it doesn't already exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createIfNotExists(resourceType: PathResourceType, options?:
        PathCreateIfNotExistsOptions)
      parameters:
        - id: resourceType
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathResourceType"
            />
          description: 'Resource type, must be "directory" for DataLakeDirectoryClient.'
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathCreateIfNotExistsOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.PathCreateIfNotExistsResponse"
          />&gt;
        description: ''
  - name: 'delete(boolean, PathDeleteOptions)'
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.delete
    package: '@azure/storage-file-datalake'
    summary: Delete current path (directory or file).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delete(recursive?: boolean, options?: PathDeleteOptions)'
      parameters:
        - id: recursive
          type: boolean
          description: ''
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathDeleteOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.PathDeleteResponse"
          />&gt;
        description: ''
  - name: 'deleteIfExists(boolean, PathDeleteOptions)'
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.deleteIfExists
    package: '@azure/storage-file-datalake'
    summary: Delete current path (directory or file) if it exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteIfExists(recursive?: boolean, options?:
        PathDeleteOptions)
      parameters:
        - id: recursive
          type: boolean
          description: ''
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathDeleteOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.PathDeleteIfExistsResponse"
          />&gt;
        description: ''
  - name: exists(PathExistsOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.exists
    package: '@azure/storage-file-datalake'
    summary: >
      Returns true if the Data Lake file represented by this client exists;
      false otherwise.

      NOTE: use this function with care since an existing file might be deleted
      by other clients or

      applications. Vice versa new files might be added by other clients or
      applications after this

      function completes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function exists(options?: PathExistsOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathExistsOptions"
            />
          description: ''
      return:
        type: Promise&lt;boolean&gt;
        description: ''
  - name: getAccessControl(PathGetAccessControlOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.getAccessControl
    package: '@azure/storage-file-datalake'
    summary: Returns the access control data for a path (directory of file).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getAccessControl(options?: PathGetAccessControlOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathGetAccessControlOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.PathGetAccessControlResponse"
          />&gt;
        description: ''
  - name: getDataLakeLeaseClient(string)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.getDataLakeLeaseClient
    package: '@azure/storage-file-datalake'
    summary: >-
      Get a <xref:DataLakeLeaseClient> that manages leases on the path
      (directory or file).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getDataLakeLeaseClient(proposeLeaseId?: string)'
      parameters:
        - id: proposeLeaseId
          type: string
          description: ''
      return:
        type: >-
          <xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.DataLakeLeaseClient"
          />
        description: ''
  - name: getFileClient(string)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.getFileClient
    package: '@azure/storage-file-datalake'
    summary: 'Creates a <xref:DataLakeFileClient> object under current directory.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getFileClient(fileName: string)'
      parameters:
        - id: fileName
          type: string
          description: ''
      return:
        type: >-
          <xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileClient"
          />
        description: ''
  - name: getProperties(PathGetPropertiesOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.getProperties
    package: '@azure/storage-file-datalake'
    summary: >
      Returns all user-defined metadata, standard HTTP properties, and system
      properties

      for the path (directory or file).

      WARNING: The `metadata` object returned in the response will have its keys
      in lowercase, even if

      they originally contained uppercase characters. This differs from the
      metadata keys returned by

      the methods of <xref:DataLakeFileSystemClient> that list paths using the
      `includeMetadata` option, which

      will retain their original casing.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getProperties(options?: PathGetPropertiesOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathGetPropertiesOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.PathGetPropertiesResponse"
          />&gt;
        description: ''
  - name: getSubdirectoryClient(string)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.getSubdirectoryClient
    package: '@azure/storage-file-datalake'
    summary: 'Creates a <xref:DataLakeDirectoryClient> object under current directory.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getSubdirectoryClient(subdirectoryName: string)'
      parameters:
        - id: subdirectoryName
          type: string
          description: Subdirectory name.
      return:
        type: >-
          <xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient"
          />
        description: ''
  - name: 'move(string, PathMoveOptions)'
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.move
    package: '@azure/storage-file-datalake'
    summary: Move directory or file within same file system.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function move(destinationPath: string, options?: PathMoveOptions)'
      parameters:
        - id: destinationPath
          type: string
          description: >-
            Destination directory path like "directory" or file path
            "directory/file"
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathMoveOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.PathMoveResponse"
          />&gt;
        description: ''
  - name: 'move(string, string, PathMoveOptions)'
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.move_1
    package: '@azure/storage-file-datalake'
    summary: Move directory or file to another file system.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function move(destinationFileSystem: string, destinationPath: string,
        options?: PathMoveOptions)
      parameters:
        - id: destinationFileSystem
          type: string
          description: Destination file system like "filesystem".
        - id: destinationPath
          type: string
          description: >-
            Destination directory path like "directory" or file path
            "directory/file"
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathMoveOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.PathMoveResponse"
          />&gt;
        description: ''
  - name: 'setAccessControl(PathAccessControlItem[], PathSetAccessControlOptions)'
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.setAccessControl
    package: '@azure/storage-file-datalake'
    summary: Set the access control data for a path (directory of file).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setAccessControl(acl: PathAccessControlItem[], options?:
        PathSetAccessControlOptions)
      parameters:
        - id: acl
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathAccessControlItem"
            />[]
          description: The POSIX access control list for the file or directory.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathSetAccessControlOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.PathSetAccessControlResponse"
          />&gt;
        description: ''
  - name: 'setHttpHeaders(PathHttpHeaders, PathSetHttpHeadersOptions)'
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.setHttpHeaders
    package: '@azure/storage-file-datalake'
    summary: >-
      Sets system properties on the path (directory or file).

      If no value provided, or no value provided for the specified blob HTTP
      headers,

      these blob HTTP headers without a value will be cleared.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setHttpHeaders(httpHeaders: PathHttpHeaders, options?:
        PathSetHttpHeadersOptions)
      parameters:
        - id: httpHeaders
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathHttpHeaders"
            />
          description: ''
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathSetHttpHeadersOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.PathSetHttpHeadersResponse"
          />&gt;
        description: ''
  - name: 'setMetadata(Metadata, PathSetMetadataOptions)'
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.setMetadata
    package: '@azure/storage-file-datalake'
    summary: >
      Sets user-defined metadata for the specified path (directory of file) as
      one or more name-value pairs.

      If no option provided, or no metadata defined in the parameter, the path

      metadata will be removed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        PathSetMetadataOptions)
      parameters:
        - id: metadata
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.Metadata"
            />
          description: ''
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathSetMetadataOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.PathSetMetadataResponse"
          />&gt;
        description: ''
  - name: 'setPermissions(PathPermissions, PathSetPermissionsOptions)'
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.setPermissions
    package: '@azure/storage-file-datalake'
    summary: Sets the file permissions on a path.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setPermissions(permissions: PathPermissions, options?:
        PathSetPermissionsOptions)
      parameters:
        - id: permissions
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathPermissions"
            />
          description: >-
            The POSIX access permissions for the file owner, the file owning
            group, and others.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PathSetPermissionsOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.PathSetAccessControlResponse"
          />&gt;
        description: ''
  - name: toDirectoryClient()
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.toDirectoryClient
    package: '@azure/storage-file-datalake'
    summary: >-
      Convert current DataLakePathClient to DataLakeDirectoryClient if current
      path is a directory.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function toDirectoryClient()
      return:
        type: >-
          <xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient"
          />
        description: ''
  - name: toFileClient()
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient.toFileClient
    package: '@azure/storage-file-datalake'
    summary: >-
      Convert current DataLakePathClient to DataLakeFileClient if current path
      is a file.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function toFileClient()
      return:
        type: >-
          <xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileClient"
          />
        description: ''
extends: >-
  <xref
  uid="@azure/storage-file-datalake.storage-file-datalake.d.DataLakePathClient"
  />
