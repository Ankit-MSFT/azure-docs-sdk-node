### YamlMime:TSType
name: DataLakeFileSystemClient
uid: '@azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient'
package: '@azure/storage-file-datalake'
summary: |-
  A DataLakeFileSystemClient represents a URL to the Azure Storage file system
  allowing you to manipulate its directories and files.
fullName: DataLakeFileSystemClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'DataLakeFileSystemClient(string, Pipeline)'
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.constructor_1
    package: '@azure/storage-file-datalake'
    summary: Creates an instance of DataLakeFileSystemClient from url and pipeline.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new DataLakeFileSystemClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: >-
            A Client string pointing to Azure Storage data lake file system,
            such as
                                "https://myaccount.dfs.core.windows.net/filesystem". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net/filesystem?sasString".
        - id: pipeline
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.Pipeline"
            />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      DataLakeFileSystemClient(string, StorageSharedKeyCredential |
      AnonymousCredential | TokenCredential, StoragePipelineOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.constructor
    package: '@azure/storage-file-datalake'
    summary: Creates an instance of DataLakeFileSystemClient from url and credential.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new DataLakeFileSystemClient(url: string, credential?:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        options?: StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: >-
            A Client string pointing to Azure Storage data lake file system,
            such as
                                "https://myaccount.dfs.core.windows.net/filesystem". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net/filesystem?sasString".
        - id: credential
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.StorageSharedKeyCredential"
            /> | <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.AnonymousCredential"
            /> | TokenCredential
          description: ''
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.StoragePipelineOptions"
            />
          description: ''
properties:
  - name: accountName
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.accountName
    package: '@azure/storage-file-datalake'
    summary: ''
    fullName: accountName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        type: string
        description: ''
  - name: credential
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.credential
    package: '@azure/storage-file-datalake'
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the @azure/identity package to authenticate requests to the service.
      You can also provide an object that implements the TokenCredential
      interface. If not specified, AnonymousCredential is used.
    fullName: credential
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        type: >-
          <xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.StorageSharedKeyCredential"
          /> | <xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.AnonymousCredential"
          /> | TokenCredential
        description: ''
  - name: name
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.name
    package: '@azure/storage-file-datalake'
    summary: Name of current file system.
    fullName: name
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string name
      return:
        type: string
        description: ''
  - name: url
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.url
    package: '@azure/storage-file-datalake'
    summary: Encoded URL string value.
    fullName: url
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        type: string
        description: ''
methods:
  - name: create(FileSystemCreateOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.create
    package: '@azure/storage-file-datalake'
    summary: >-
      Creates a new file system under the specified account. If the file system
      with

      the same name already exists, the operation fails.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function create(options?: FileSystemCreateOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemCreateOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemCreateResponse"
          />&gt;
        description: ''
  - name: createIfNotExists(FileSystemCreateOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.createIfNotExists
    package: '@azure/storage-file-datalake'
    summary: >-
      Creates a new file system under the specified account. If the file system
      with

      the same name already exists, it is not changed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createIfNotExists(options?: FileSystemCreateOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemCreateOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemCreateIfNotExistsResponse"
          />&gt;
        description: ''
  - name: delete(FileSystemDeleteOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.delete
    package: '@azure/storage-file-datalake'
    summary: Delete current file system.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delete(options?: FileSystemDeleteOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemDeleteOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemDeleteResponse"
          />&gt;
        description: ''
  - name: deleteIfExists(FileSystemDeleteOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.deleteIfExists
    package: '@azure/storage-file-datalake'
    summary: Delete current file system if it exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteIfExists(options?: FileSystemDeleteOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemDeleteOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemDeleteIfExistsResponse"
          />&gt;
        description: ''
  - name: exists(FileSystemExistsOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.exists
    package: '@azure/storage-file-datalake'
    summary: >
      Returns true if the File system represented by this client exists; false
      otherwise.

      NOTE: use this function with care since an existing file system might be
      deleted by other clients or

      applications. Vice versa new file system with the same name might be added
      by other clients or

      applications after this function completes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function exists(options?: FileSystemExistsOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemExistsOptions"
            />
          description: ''
      return:
        type: Promise&lt;boolean&gt;
        description: ''
  - name: getAccessPolicy(FileSystemGetAccessPolicyOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.getAccessPolicy
    package: '@azure/storage-file-datalake'
    summary: >
      Gets the permissions for the specified file system. The permissions
      indicate

      whether file system data may be accessed publicly.

      WARNING: JavaScript Date will potentially lose precision when parsing
      startsOn and expiresOn strings.

      For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will
      get "2018-12-31T03:44:23.882Z".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getAccessPolicy(options?: FileSystemGetAccessPolicyOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemGetAccessPolicyOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemGetAccessPolicyResponse"
          />&gt;
        description: ''
  - name: getDataLakeLeaseClient(string)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.getDataLakeLeaseClient
    package: '@azure/storage-file-datalake'
    summary: 'Get a <xref:DataLakeLeaseClient> that manages leases on the file system.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getDataLakeLeaseClient(proposeLeaseId?: string)'
      parameters:
        - id: proposeLeaseId
          type: string
          description: ''
      return:
        type: >-
          <xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.DataLakeLeaseClient"
          />
        description: ''
  - name: getDirectoryClient(string)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.getDirectoryClient
    package: '@azure/storage-file-datalake'
    summary: 'Creates a <xref:DataLakeDirectoryClient> object under current file system.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getDirectoryClient(directoryName: string)'
      parameters:
        - id: directoryName
          type: string
          description: ''
      return:
        type: >-
          <xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.DataLakeDirectoryClient"
          />
        description: ''
  - name: getFileClient(string)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.getFileClient
    package: '@azure/storage-file-datalake'
    summary: 'Creates a <xref:DataLakeFileClient> object under current file system.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getFileClient(fileName: string)'
      parameters:
        - id: fileName
          type: string
          description: ''
      return:
        type: >-
          <xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileClient"
          />
        description: ''
  - name: getProperties(FileSystemGetPropertiesOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.getProperties
    package: '@azure/storage-file-datalake'
    summary: >
      Returns all user-defined metadata and system properties for the specified

      file system.

      WARNING: The `metadata` object returned in the response will have its keys
      in lowercase, even if

      they originally contained uppercase characters. This differs from the
      metadata keys returned by

      the `listFileSystems` method of <xref:DataLakeServiceClient> using the
      `includeMetadata` option, which

      will retain their original casing.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getProperties(options?: FileSystemGetPropertiesOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemGetPropertiesOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemGetPropertiesResponse"
          />&gt;
        description: ''
  - name: listPaths(ListPathsOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.listPaths
    package: '@azure/storage-file-datalake'
    summary: >
      Returns an async iterable iterator to list all the paths (directories and
      files)

      under the specified file system.

      .byPage() returns an async iterable iterator to list the paths in pages.


      Example using `for await` syntax:


      ```js

      // Get the fileSystemClient before you run these snippets,

      // Can be obtained from
      `serviceClient.getFileSystemClient("<your-filesystem-name>");`

      let i = 1;

      for await (const path of fileSystemClient.listPaths()) {
        console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      let iter = fileSystemClient.listPaths();

      let pathItem = await iter.next();

      while (!pathItem.done) {
        console.log(`Path ${i++}: ${pathItem.value.name}, isDirectory?: ${pathItem.value.isDirectory}`);
        pathItem = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const response of fileSystemClient.listPaths().byPage({
      maxPageSize: 20 })) {
        for (const path of response.pathItems) {
          console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = fileSystemClient.listPaths().byPage({ maxPageSize: 2 });

      let response = (await iterator.next()).value;


      // Prints 2 path names

      for (const path of response.pathItems) {
        console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);
      }


      // Gets next marker

      let marker = response.continuationToken;


      // Passing next marker as continuationToken


      iterator = fileSystemClient.listPaths().byPage({ continuationToken:
      marker, maxPageSize: 10 });

      response = (await iterator.next()).value;


      // Prints 10 path names

      for (const path of response.pathItems) {
        console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);
      }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listPaths(options?: ListPathsOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.ListPathsOptions"
            />
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.Path" />,
          <xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemListPathsResponse"
          />&gt;
        description: ''
  - name: >-
      setAccessPolicy(PublicAccessType, SignedIdentifier<AccessPolicy>[],
      FileSystemSetAccessPolicyOptions)
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.setAccessPolicy
    package: '@azure/storage-file-datalake'
    summary: >
      Sets the permissions for the specified file system. The permissions
      indicate

      whether directories or files in a file system may be accessed publicly.

      When you set permissions for a file system, the existing permissions are
      replaced.

      If no access or containerAcl provided, the existing file system ACL will
      be

      removed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setAccessPolicy(access?: PublicAccessType, fileSystemAcl?:
        SignedIdentifier<AccessPolicy>[], options?:
        FileSystemSetAccessPolicyOptions)
      parameters:
        - id: access
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.PublicAccessType"
            />
          description: ''
        - id: fileSystemAcl
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.SignedIdentifier"
            />&lt;<xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.AccessPolicy"
            />&gt;[]
          description: ''
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemSetAccessPolicyOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemSetAccessPolicyResponse"
          />&gt;
        description: ''
  - name: 'setMetadata(Metadata, FileSystemSetMetadataOptions)'
    uid: >-
      @azure/storage-file-datalake.storage-file-datalake.d.DataLakeFileSystemClient.setMetadata
    package: '@azure/storage-file-datalake'
    summary: >
      Sets one or more user-defined name-value pairs for the specified file
      system.

      If no option provided, or no metadata defined in the parameter, the file
      system

      metadata will be removed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        FileSystemSetMetadataOptions)
      parameters:
        - id: metadata
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.Metadata"
            />
          description: ''
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemSetMetadataOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.storage-file-datalake.d.FileSystemSetMetadataResponse"
          />&gt;
        description: ''
extends: >-
  <xref uid="@azure/storage-file-datalake.storage-file-datalake.d.StorageClient"
  />
