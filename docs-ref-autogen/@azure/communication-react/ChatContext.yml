### YamlMime:TSType
name: ChatContext
uid: '@azure/communication-react.ChatContext'
package: '@azure/communication-react'
summary: ''
fullName: ChatContext
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: ChatContext(number)
    uid: '@azure/communication-react.ChatContext.constructor'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new ChatContext(maxListeners?: number)'
      parameters:
        - id: maxListeners
          type: number
          description: ''
methods:
  - name: 'addReadReceipt(string, ChatMessageReadReceipt)'
    uid: '@azure/communication-react.ChatContext.addReadReceipt'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addReadReceipt(threadId: string, readReceipt:
        ChatMessageReadReceipt)
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: readReceipt
          type: ChatMessageReadReceipt
          description: ''
  - name: 'addTypingIndicator(string, TypingIndicatorReceivedEvent)'
    uid: '@azure/communication-react.ChatContext.addTypingIndicator'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addTypingIndicator(threadId: string, typingIndicator:
        TypingIndicatorReceivedEvent)
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: typingIndicator
          type: TypingIndicatorReceivedEvent
          description: ''
  - name: >-
      asyncTeeErrorToState<T>(() => Promise<T>, ChatErrorTargets,
      ChatErrorTargets[])
    uid: '@azure/communication-react.ChatContext.asyncTeeErrorToState'
    package: '@azure/communication-react'
    summary: |
      Tees any errors encountered in an async function to the state.
      If the function succeeds, clears associated errors from the state.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function asyncTeeErrorToState<T>(f: () => Promise<T>, target:
        ChatErrorTargets, clearTargets?: ChatErrorTargets[])
      parameters:
        - id: f
          type: () =&gt; Promise&lt;T&gt;
          description: Async function to execute.
        - id: target
          type: <xref uid="@azure/communication-react.ChatErrorTargets" />
          description: The error target to tee error to.
        - id: clearTargets
          type: '<xref uid="@azure/communication-react.ChatErrorTargets" />[]'
          description: >-
            The error targets to clear errors for if the function succeeds. By
            default, clears errors for `target.
      return:
        type: Promise&lt;T&gt;
        description: Result of calling `f`. Also re-raises any exceptions thrown from `f`.
  - name: batch(() => void)
    uid: '@azure/communication-react.ChatContext.batch'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function batch(batchFunc: () => void)'
      parameters:
        - id: batchFunc
          type: () =&gt; void
          description: ''
  - name: 'createThread(string, ChatThreadProperties)'
    uid: '@azure/communication-react.ChatContext.createThread'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createThread(threadId: string, properties?:
        ChatThreadProperties)
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: properties
          type: <xref uid="@azure/communication-react.ChatThreadProperties" />
          description: ''
  - name: 'createThreadIfNotExist(string, ChatThreadProperties)'
    uid: '@azure/communication-react.ChatContext.createThreadIfNotExist'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createThreadIfNotExist(threadId: string, properties?:
        ChatThreadProperties)
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: properties
          type: <xref uid="@azure/communication-react.ChatThreadProperties" />
          description: ''
      return:
        type: boolean
        description: ''
  - name: 'deleteLocalMessage(string, string)'
    uid: '@azure/communication-react.ChatContext.deleteLocalMessage'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteLocalMessage(threadId: string, localId: string)'
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: localId
          type: string
          description: ''
      return:
        type: boolean
        description: ''
  - name: 'deleteMessage(string, string)'
    uid: '@azure/communication-react.ChatContext.deleteMessage'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteMessage(threadId: string, id: string)'
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: id
          type: string
          description: ''
  - name: 'deleteParticipant(string, CommunicationIdentifierKind)'
    uid: '@azure/communication-react.ChatContext.deleteParticipant'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteParticipant(threadId: string, participantId:
        CommunicationIdentifierKind)
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: participantId
          type: CommunicationIdentifierKind
          description: ''
  - name: 'deleteParticipants(string, CommunicationIdentifierKind[])'
    uid: '@azure/communication-react.ChatContext.deleteParticipants'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteParticipants(threadId: string, participantIds:
        CommunicationIdentifierKind[])
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: participantIds
          type: 'CommunicationIdentifierKind[]'
          description: ''
  - name: deleteThread(string)
    uid: '@azure/communication-react.ChatContext.deleteThread'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteThread(threadId: string)'
      parameters:
        - id: threadId
          type: string
          description: ''
  - name: getState()
    uid: '@azure/communication-react.ChatContext.getState'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getState()
      return:
        type: <xref uid="@azure/communication-react.ChatClientState" />
        description: ''
  - name: 'offStateChange((state: ChatClientState) => void)'
    uid: '@azure/communication-react.ChatContext.offStateChange'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function offStateChange(handler: (state: ChatClientState) => void)'
      parameters:
        - id: handler
          type: '(state: ChatClientState) =&gt; void'
          description: ''
  - name: 'onStateChange((state: ChatClientState) => void)'
    uid: '@azure/communication-react.ChatContext.onStateChange'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onStateChange(handler: (state: ChatClientState) => void)'
      parameters:
        - id: handler
          type: '(state: ChatClientState) =&gt; void'
          description: ''
  - name: 'setChatMessage(string, ChatMessageWithStatus)'
    uid: '@azure/communication-react.ChatContext.setChatMessage'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setChatMessage(threadId: string, message:
        ChatMessageWithStatus)
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: message
          type: <xref uid="@azure/communication-react.ChatMessageWithStatus" />
          description: ''
  - name: 'setChatMessages(string, [key: string]: ChatMessageWithStatus)'
    uid: '@azure/communication-react.ChatContext.setChatMessages'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setChatMessages(threadId: string, messages: [key: string]:
        ChatMessageWithStatus)
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: messages
          type: >-
            [key: string]\: <xref
            uid="@azure/communication-react.ChatMessageWithStatus" />
          description: ''
  - name: 'setParticipant(string, ChatParticipant)'
    uid: '@azure/communication-react.ChatContext.setParticipant'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setParticipant(threadId: string, participant: ChatParticipant)'
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: participant
          type: ChatParticipant
          description: ''
  - name: 'setParticipants(string, ChatParticipant[])'
    uid: '@azure/communication-react.ChatContext.setParticipants'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setParticipants(threadId: string, participants:
        ChatParticipant[])
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: participants
          type: 'ChatParticipant[]'
          description: ''
  - name: setState(ChatClientState)
    uid: '@azure/communication-react.ChatContext.setState'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setState(state: ChatClientState)'
      parameters:
        - id: state
          type: <xref uid="@azure/communication-react.ChatClientState" />
          description: ''
  - name: 'setThread(string, ChatThreadClientState)'
    uid: '@azure/communication-react.ChatContext.setThread'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setThread(threadId: string, threadState: ChatThreadClientState)'
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: threadState
          type: <xref uid="@azure/communication-react.ChatThreadClientState" />
          description: ''
  - name: 'updateChatConfig(CommunicationIdentifierKind, string)'
    uid: '@azure/communication-react.ChatContext.updateChatConfig'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateChatConfig(userId: CommunicationIdentifierKind,
        displayName: string)
      parameters:
        - id: userId
          type: CommunicationIdentifierKind
          description: ''
        - id: displayName
          type: string
          description: ''
  - name: 'updateChatMessageContent(string, string, string | undefined)'
    uid: '@azure/communication-react.ChatContext.updateChatMessageContent'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateChatMessageContent(threadId: string, messagesId: string,
        content: string | undefined)
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: messagesId
          type: string
          description: ''
        - id: content
          type: string | undefined
          description: ''
  - name: 'updateThread(string, ChatThreadProperties)'
    uid: '@azure/communication-react.ChatContext.updateThread'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateThread(threadId: string, properties?:
        ChatThreadProperties)
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: properties
          type: <xref uid="@azure/communication-react.ChatThreadProperties" />
          description: ''
  - name: 'updateThreadTopic(string, string)'
    uid: '@azure/communication-react.ChatContext.updateThreadTopic'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function updateThreadTopic(threadId: string, topic?: string)'
      parameters:
        - id: threadId
          type: string
          description: ''
        - id: topic
          type: string
          description: ''
