### YamlMime:TSType
name: Databases
uid: '@azure/arm-redisenterprisecache.Databases'
package: '@azure/arm-redisenterprisecache'
summary: Class representing a Databases.
fullName: Databases
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: Databases(RedisEnterpriseManagementClientContext)
    uid: '@azure/arm-redisenterprisecache.Databases.constructor'
    package: '@azure/arm-redisenterprisecache'
    summary: Create a Databases.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new Databases(client: RedisEnterpriseManagementClientContext)'
      parameters:
        - id: client
          type: >-
            <xref
            uid="@azure/arm-redisenterprisecache.RedisEnterpriseManagementClientContext"
            />
          description: |
            Reference to the service client.
methods:
  - name: 'beginCreate(string, string, string, Database, msRest.RequestOptionsBase)'
    uid: '@azure/arm-redisenterprisecache.Databases.beginCreate'
    package: '@azure/arm-redisenterprisecache'
    summary: Creates a database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreate(resourceGroupName: string, clusterName: string,
        databaseName: string, parameters: Database, options?:
        msRest.RequestOptionsBase): Promise<LROPoller>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: parameters
          type: <xref uid="@azure/arm-redisenterprisecache.Database" />
          description: Parameters supplied to the create or update database operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRestAzure.LROPoller>
        type: Promise&lt;LROPoller&gt;
  - name: 'beginDeleteMethod(string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-redisenterprisecache.Databases.beginDeleteMethod'
    package: '@azure/arm-redisenterprisecache'
    summary: Deletes a single database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMethod(resourceGroupName: string, clusterName:
        string, databaseName: string, options?: msRest.RequestOptionsBase):
        Promise<LROPoller>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRestAzure.LROPoller>
        type: Promise&lt;LROPoller&gt;
  - name: >-
      beginExportMethod(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-redisenterprisecache.Databases.beginExportMethod'
    package: '@azure/arm-redisenterprisecache'
    summary: Exports a database file from target database.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginExportMethod(resourceGroupName: string, clusterName:
        string, databaseName: string, sasUri: string, options?:
        msRest.RequestOptionsBase): Promise<LROPoller>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: sasUri
          type: string
          description: SAS URI for the target directory to export to
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRestAzure.LROPoller>
        type: Promise&lt;LROPoller&gt;
  - name: >-
      beginImportMethod(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-redisenterprisecache.Databases.beginImportMethod'
    package: '@azure/arm-redisenterprisecache'
    summary: Imports a database file to target database.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginImportMethod(resourceGroupName: string, clusterName:
        string, databaseName: string, sasUri: string, options?:
        msRest.RequestOptionsBase): Promise<LROPoller>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: sasUri
          type: string
          description: SAS URI for the target blob to import from
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRestAzure.LROPoller>
        type: Promise&lt;LROPoller&gt;
  - name: >-
      beginRegenerateKey(string, string, string, Models.AccessKeyType,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-redisenterprisecache.Databases.beginRegenerateKey'
    package: '@azure/arm-redisenterprisecache'
    summary: Regenerates the RedisEnterprise database's access keys.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRegenerateKey(resourceGroupName: string, clusterName:
        string, databaseName: string, keyType: Models.AccessKeyType, options?:
        msRest.RequestOptionsBase): Promise<LROPoller>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: keyType
          type: <xref uid="Models.AccessKeyType" />
          description: >-
            Which access key to regenerate. Possible values include: 'Primary',
            'Secondary'
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRestAzure.LROPoller>
        type: Promise&lt;LROPoller&gt;
  - name: >-
      beginUpdate(string, string, string, DatabaseUpdate,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-redisenterprisecache.Databases.beginUpdate'
    package: '@azure/arm-redisenterprisecache'
    summary: Updates a database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdate(resourceGroupName: string, clusterName: string,
        databaseName: string, parameters: DatabaseUpdate, options?:
        msRest.RequestOptionsBase): Promise<LROPoller>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: parameters
          type: <xref uid="@azure/arm-redisenterprisecache.DatabaseUpdate" />
          description: Parameters supplied to the create or update database operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRestAzure.LROPoller>
        type: Promise&lt;LROPoller&gt;
  - name: 'create(string, string, string, Database, msRest.RequestOptionsBase)'
    uid: '@azure/arm-redisenterprisecache.Databases.create'
    package: '@azure/arm-redisenterprisecache'
    summary: Creates a database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(resourceGroupName: string, clusterName: string,
        databaseName: string, parameters: Database, options?:
        msRest.RequestOptionsBase): Promise<Models.DatabasesCreateResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: parameters
          type: <xref uid="@azure/arm-redisenterprisecache.Database" />
          description: Parameters supplied to the create or update database operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.DatabasesCreateResponse>
        type: Promise&lt;<xref uid="Models.DatabasesCreateResponse" />&gt;
  - name: 'deleteMethod(string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-redisenterprisecache.Databases.deleteMethod'
    package: '@azure/arm-redisenterprisecache'
    summary: Deletes a single database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, clusterName: string,
        databaseName: string, options?: msRest.RequestOptionsBase):
        Promise<RestResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;RestResponse&gt;
  - name: 'exportMethod(string, string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-redisenterprisecache.Databases.exportMethod'
    package: '@azure/arm-redisenterprisecache'
    summary: Exports a database file from target database.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportMethod(resourceGroupName: string, clusterName: string,
        databaseName: string, sasUri: string, options?:
        msRest.RequestOptionsBase): Promise<RestResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: sasUri
          type: string
          description: SAS URI for the target directory to export to
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;RestResponse&gt;
  - name: 'get(string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-redisenterprisecache.Databases.get'
    package: '@azure/arm-redisenterprisecache'
    summary: Gets information about a database in a RedisEnterprise cluster.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, clusterName: string,
        databaseName: string, options?: msRest.RequestOptionsBase):
        Promise<Models.DatabasesGetResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.DatabasesGetResponse>
        type: Promise&lt;<xref uid="Models.DatabasesGetResponse" />&gt;
  - name: 'get(string, string, string, RequestOptionsBase, ServiceCallback<Database>)'
    uid: '@azure/arm-redisenterprisecache.Databases.get_2'
    package: '@azure/arm-redisenterprisecache'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, clusterName: string,
        databaseName: string, options: RequestOptionsBase, callback:
        ServiceCallback<Database>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-redisenterprisecache.Database" />&gt;
          description: |
            The callback
  - name: 'get(string, string, string, ServiceCallback<Database>)'
    uid: '@azure/arm-redisenterprisecache.Databases.get_1'
    package: '@azure/arm-redisenterprisecache'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, clusterName: string,
        databaseName: string, callback: ServiceCallback<Database>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-redisenterprisecache.Database" />&gt;
          description: |
            The callback
  - name: 'importMethod(string, string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-redisenterprisecache.Databases.importMethod'
    package: '@azure/arm-redisenterprisecache'
    summary: Imports a database file to target database.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function importMethod(resourceGroupName: string, clusterName: string,
        databaseName: string, sasUri: string, options?:
        msRest.RequestOptionsBase): Promise<RestResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: sasUri
          type: string
          description: SAS URI for the target blob to import from
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;RestResponse&gt;
  - name: 'listByCluster(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-redisenterprisecache.Databases.listByCluster'
    package: '@azure/arm-redisenterprisecache'
    summary: Gets all databases in the specified RedisEnterprise cluster.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByCluster(resourceGroupName: string, clusterName: string,
        options?: msRest.RequestOptionsBase):
        Promise<Models.DatabasesListByClusterResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.DatabasesListByClusterResponse>
        type: Promise&lt;<xref uid="Models.DatabasesListByClusterResponse" />&gt;
  - name: >-
      listByCluster(string, string, RequestOptionsBase,
      ServiceCallback<DatabaseList>)
    uid: '@azure/arm-redisenterprisecache.Databases.listByCluster_2'
    package: '@azure/arm-redisenterprisecache'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByCluster(resourceGroupName: string, clusterName: string,
        options: RequestOptionsBase, callback: ServiceCallback<DatabaseList>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-redisenterprisecache.DatabaseList" />&gt;
          description: |
            The callback
  - name: 'listByCluster(string, string, ServiceCallback<DatabaseList>)'
    uid: '@azure/arm-redisenterprisecache.Databases.listByCluster_1'
    package: '@azure/arm-redisenterprisecache'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByCluster(resourceGroupName: string, clusterName: string,
        callback: ServiceCallback<DatabaseList>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-redisenterprisecache.DatabaseList" />&gt;
          description: |
            The callback
  - name: 'listByClusterNext(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-redisenterprisecache.Databases.listByClusterNext'
    package: '@azure/arm-redisenterprisecache'
    summary: Gets all databases in the specified RedisEnterprise cluster.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByClusterNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase):
        Promise<Models.DatabasesListByClusterNextResponse>
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.DatabasesListByClusterNextResponse>
        type: >-
          Promise&lt;<xref uid="Models.DatabasesListByClusterNextResponse"
          />&gt;
  - name: >-
      listByClusterNext(string, RequestOptionsBase,
      ServiceCallback<DatabaseList>)
    uid: '@azure/arm-redisenterprisecache.Databases.listByClusterNext_2'
    package: '@azure/arm-redisenterprisecache'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByClusterNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DatabaseList>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-redisenterprisecache.DatabaseList" />&gt;
          description: |
            The callback
  - name: 'listByClusterNext(string, ServiceCallback<DatabaseList>)'
    uid: '@azure/arm-redisenterprisecache.Databases.listByClusterNext_1'
    package: '@azure/arm-redisenterprisecache'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByClusterNext(nextPageLink: string, callback:
        ServiceCallback<DatabaseList>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-redisenterprisecache.DatabaseList" />&gt;
          description: |
            The callback
  - name: 'listKeys(string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-redisenterprisecache.Databases.listKeys'
    package: '@azure/arm-redisenterprisecache'
    summary: Retrieves the access keys for the RedisEnterprise database.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listKeys(resourceGroupName: string, clusterName: string,
        databaseName: string, options?: msRest.RequestOptionsBase):
        Promise<Models.DatabasesListKeysResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.DatabasesListKeysResponse>
        type: Promise&lt;<xref uid="Models.DatabasesListKeysResponse" />&gt;
  - name: >-
      listKeys(string, string, string, RequestOptionsBase,
      ServiceCallback<AccessKeys>)
    uid: '@azure/arm-redisenterprisecache.Databases.listKeys_2'
    package: '@azure/arm-redisenterprisecache'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listKeys(resourceGroupName: string, clusterName: string,
        databaseName: string, options: RequestOptionsBase, callback:
        ServiceCallback<AccessKeys>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-redisenterprisecache.AccessKeys" />&gt;
          description: |
            The callback
  - name: 'listKeys(string, string, string, ServiceCallback<AccessKeys>)'
    uid: '@azure/arm-redisenterprisecache.Databases.listKeys_1'
    package: '@azure/arm-redisenterprisecache'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listKeys(resourceGroupName: string, clusterName: string,
        databaseName: string, callback: ServiceCallback<AccessKeys>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-redisenterprisecache.AccessKeys" />&gt;
          description: |
            The callback
  - name: >-
      regenerateKey(string, string, string, Models.AccessKeyType,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-redisenterprisecache.Databases.regenerateKey'
    package: '@azure/arm-redisenterprisecache'
    summary: Regenerates the RedisEnterprise database's access keys.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function regenerateKey(resourceGroupName: string, clusterName: string,
        databaseName: string, keyType: Models.AccessKeyType, options?:
        msRest.RequestOptionsBase):
        Promise<Models.DatabasesRegenerateKeyResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: keyType
          type: <xref uid="Models.AccessKeyType" />
          description: >-
            Which access key to regenerate. Possible values include: 'Primary',
            'Secondary'
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.DatabasesRegenerateKeyResponse>
        type: Promise&lt;<xref uid="Models.DatabasesRegenerateKeyResponse" />&gt;
  - name: 'update(string, string, string, DatabaseUpdate, msRest.RequestOptionsBase)'
    uid: '@azure/arm-redisenterprisecache.Databases.update'
    package: '@azure/arm-redisenterprisecache'
    summary: Updates a database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, clusterName: string,
        databaseName: string, parameters: DatabaseUpdate, options?:
        msRest.RequestOptionsBase): Promise<Models.DatabasesUpdateResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: The name of the RedisEnterprise cluster.
        - id: databaseName
          type: string
          description: The name of the database.
        - id: parameters
          type: <xref uid="@azure/arm-redisenterprisecache.DatabaseUpdate" />
          description: Parameters supplied to the create or update database operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.DatabasesUpdateResponse>
        type: Promise&lt;<xref uid="Models.DatabasesUpdateResponse" />&gt;
