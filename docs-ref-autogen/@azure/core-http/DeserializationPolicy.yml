### YamlMime:TSType
name: DeserializationPolicy
uid: '@azure/core-http.DeserializationPolicy'
package: '@azure/core-http'
summary: >-
  A RequestPolicy that will deserialize HTTP response bodies and headers as they
  pass through the

  HTTP pipeline.
fullName: DeserializationPolicy
type: class
constructors:
  - name: >-
      DeserializationPolicy(RequestPolicy, DeserializationContentTypes |
      undefined, RequestPolicyOptions)
    uid: '@azure/core-http.DeserializationPolicy.constructor'
    package: '@azure/core-http'
    summary: ''
    syntax:
      content: >-
        new DeserializationPolicy(nextPolicy: RequestPolicy,
        deserializationContentTypes: DeserializationContentTypes | undefined,
        options: RequestPolicyOptions)
      parameters:
        - id: nextPolicy
          type: <xref uid="@azure/core-http.RequestPolicy" />
          description: ''
        - id: deserializationContentTypes
          type: >-
            <xref uid="@azure/core-http.DeserializationContentTypes" /> |
            undefined
          description: ''
        - id: options
          type: <xref uid="@azure/core-http.RequestPolicyOptions" />
          description: ''
properties:
  - name: jsonContentTypes
    uid: '@azure/core-http.DeserializationPolicy.jsonContentTypes'
    package: '@azure/core-http'
    summary: ''
    fullName: jsonContentTypes
    syntax:
      content: 'jsonContentTypes: string[]'
      return:
        type: 'string[]'
        description: ''
  - name: xmlContentTypes
    uid: '@azure/core-http.DeserializationPolicy.xmlContentTypes'
    package: '@azure/core-http'
    summary: ''
    fullName: xmlContentTypes
    syntax:
      content: 'xmlContentTypes: string[]'
      return:
        type: 'string[]'
        description: ''
methods:
  - name: 'log(HttpPipelineLogLevel, string)'
    uid: '@azure/core-http.DeserializationPolicy.log'
    package: '@azure/core-http'
    summary: >-
      Attempt to log the provided message to the provided logger. If no logger
      was provided or if

      the log level does not meat the logger's threshold, then nothing will be
      logged.
    syntax:
      content: 'function log(logLevel: HttpPipelineLogLevel, message: string)'
      parameters:
        - id: logLevel
          type: <xref uid="@azure/core-http.HttpPipelineLogLevel" />
          description: The log level of this log.
        - id: message
          type: string
          description: |
            The message of this log.
  - name: sendRequest(WebResourceLike)
    uid: '@azure/core-http.DeserializationPolicy.sendRequest'
    package: '@azure/core-http'
    summary: ''
    syntax:
      content: 'function sendRequest(request: WebResourceLike)'
      parameters:
        - id: request
          type: <xref uid="@azure/core-http.WebResourceLike" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/core-http.HttpOperationResponse" />&gt;
        description: ''
  - name: shouldLog(HttpPipelineLogLevel)
    uid: '@azure/core-http.DeserializationPolicy.shouldLog'
    package: '@azure/core-http'
    summary: Get whether or not a log with the provided log level should be logged.
    syntax:
      content: 'function shouldLog(logLevel: HttpPipelineLogLevel)'
      parameters:
        - id: logLevel
          type: <xref uid="@azure/core-http.HttpPipelineLogLevel" />
          description: The log level of the log that will be logged.
      return:
        type: boolean
        description: Whether or not a log with the provided log level should be logged.
extends: <xref uid="@azure/core-http.BaseRequestPolicy" />
