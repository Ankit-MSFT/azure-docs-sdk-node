### YamlMime:UniversalReference
items:
  - uid: '@azure/core-lro.PollerLike'
    name: PollerLike
    fullName: PollerLike<TState>
    children:
      - '@azure/core-lro.PollerLike.cancelOperation'
      - '@azure/core-lro.PollerLike.getOperationState'
      - '@azure/core-lro.PollerLike.getResult'
      - '@azure/core-lro.PollerLike.isDone'
      - '@azure/core-lro.PollerLike.isStopped'
      - '@azure/core-lro.PollerLike.onProgress'
      - '@azure/core-lro.PollerLike.poll'
      - '@azure/core-lro.PollerLike.pollUntilDone'
      - '@azure/core-lro.PollerLike.stopPolling'
      - '@azure/core-lro.PollerLike.toString'
    langs:
      - typeScript
    type: interface
    summary: >-
      Abstract representation of a poller, intended to expose just the minimal
      API that the user needs to work with.
    package: '@azure/core-lro'
  - uid: '@azure/core-lro.PollerLike.cancelOperation'
    name: cancelOperation(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: Attempts to cancel the underlying operation.
    syntax:
      content: 'function cancelOperation(options?: Object)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/core-lro'
  - uid: '@azure/core-lro.PollerLike.getOperationState'
    name: getOperationState()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns the state of the operation.
      The TState defined in PollerLike can be a subset of the TState defined in
      the Poller implementation.
    syntax:
      content: function getOperationState()
      parameters: []
      return:
        type:
          - TState
        description: ''
    package: '@azure/core-lro'
  - uid: '@azure/core-lro.PollerLike.getResult'
    name: getResult()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns the result value of the operation,
      regardless of the state of the poller.
      It can return undefined or an incomplete form of the final TResult value
      depending on the implementation.
    syntax:
      content: function getResult()
      parameters: []
      return:
        type:
          - TResult | undefined
        description: ''
    package: '@azure/core-lro'
  - uid: '@azure/core-lro.PollerLike.isDone'
    name: isDone()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns true if the poller has finished polling.
    syntax:
      content: function isDone()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: '@azure/core-lro'
  - uid: '@azure/core-lro.PollerLike.isStopped'
    name: isStopped()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns true if the poller is stopped.
    syntax:
      content: function isStopped()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: '@azure/core-lro'
  - uid: '@azure/core-lro.PollerLike.onProgress'
    name: 'onProgress((state: TState) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Invokes the provided callback after each polling is completed,

      sending the current state of the poller's operation.

      It returns a method that can be used to stop receiving updates on the
      given callback function.
    syntax:
      content: 'function onProgress(callback: (state: TState) => void)'
      parameters:
        - id: callback
          type:
            - '(state: TState) => void'
          description: ''
      return:
        type:
          - '@azure/core-lro.CancelOnProgress'
        description: ''
    package: '@azure/core-lro'
  - uid: '@azure/core-lro.PollerLike.poll'
    name: poll(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a promise that will resolve once a single polling request
      finishes.

      It does this by calling the update method of the Poller's operation.
    syntax:
      content: 'function poll(options?: Object)'
      parameters:
        - id: options
          type:
            - Object
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/core-lro'
  - uid: '@azure/core-lro.PollerLike.pollUntilDone'
    name: pollUntilDone()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a promise that will resolve once the underlying operation is
      completed.
    syntax:
      content: function pollUntilDone()
      parameters: []
      return:
        type:
          - Promise<TResult>
        description: ''
    package: '@azure/core-lro'
  - uid: '@azure/core-lro.PollerLike.stopPolling'
    name: stopPolling()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Stops the poller. After this, no manual or automated requests can be sent.'
    syntax:
      content: function stopPolling()
      parameters: []
    package: '@azure/core-lro'
  - uid: '@azure/core-lro.PollerLike.toString'
    name: toString()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns a serialized version of the poller's operation
      by invoking the operation's toString method.
    syntax:
      content: function toString()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: '@azure/core-lro'
references:
  - uid: '@azure/core-lro.CancelOnProgress'
    name: CancelOnProgress
    spec.typeScript:
      - name: CancelOnProgress
        fullName: CancelOnProgress
        uid: '@azure/core-lro.CancelOnProgress'
