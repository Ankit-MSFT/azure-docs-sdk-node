### YamlMime:UniversalReference
items:
  - uid: '@azure/keyvault-secrets.SecretsClient'
    name: SecretsClient
    fullName: SecretsClient
    children:
      - '@azure/keyvault-secrets.SecretsClient.backupSecret'
      - '@azure/keyvault-secrets.SecretsClient.deleteSecret'
      - '@azure/keyvault-secrets.SecretsClient.getDefaultPipeline'
      - '@azure/keyvault-secrets.SecretsClient.getDeletedSecret'
      - '@azure/keyvault-secrets.SecretsClient.getSecret'
      - '@azure/keyvault-secrets.SecretsClient.listDeletedSecrets'
      - '@azure/keyvault-secrets.SecretsClient.listSecrets'
      - '@azure/keyvault-secrets.SecretsClient.listSecretVersions'
      - '@azure/keyvault-secrets.SecretsClient.pipeline'
      - '@azure/keyvault-secrets.SecretsClient.purgeDeletedSecret'
      - '@azure/keyvault-secrets.SecretsClient.recoverDeletedSecret'
      - '@azure/keyvault-secrets.SecretsClient.restoreSecret'
      - '@azure/keyvault-secrets.SecretsClient.constructor'
      - '@azure/keyvault-secrets.SecretsClient.setSecret'
      - '@azure/keyvault-secrets.SecretsClient.updateSecretAttributes'
      - '@azure/keyvault-secrets.SecretsClient.vaultBaseUrl'
    langs:
      - typeScript
    type: class
    summary: The client to interact with the KeyVault secrets functionality
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.backupSecret'
    name: 'backupSecret(string, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Requests that a backup of the specified secret be downloaded to the
      client. All versions of the

      secret will be downloaded. This operation requires the secrets/backup
      permission.
    syntax:
      content: 'function backupSecret(secretName: string, options?: RequestOptionsBase)'
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Uint8Array>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.deleteSecret'
    name: 'deleteSecret(string, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The DELETE operation applies to any secret stored in Azure Key Vault.
      DELETE cannot be applied

      to an individual version of a secret. This operation requires the
      secrets/delete permission.
    syntax:
      content: 'function deleteSecret(secretName: string, options?: RequestOptionsBase)'
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.DeletedSecret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.getDefaultPipeline'
    name: >-
      getDefaultPipeline(ServiceClientCredentials | TokenCredential,
      NewPipelineOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A static method used to create a new Pipeline object with the provided
      Credential.
    syntax:
      content: >-
        static function getDefaultPipeline(credential: ServiceClientCredentials
        | TokenCredential, pipelineOptions?: NewPipelineOptions)
      parameters:
        - id: credential
          type:
            - ServiceClientCredentials | TokenCredential
          description: ''
        - id: pipelineOptions
          type:
            - '@azure/keyvault-secrets.NewPipelineOptions'
          description: ''
          optional: true
      return:
        type:
          - ServiceClientOptions
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.getDeletedSecret'
    name: 'getDeletedSecret(string, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Deleted Secret operation returns the specified deleted secret
      along with its attributes.

      This operation requires the secrets/get permission.
    syntax:
      content: >-
        function getDeletedSecret(secretName: string, options?:
        RequestOptionsBase)
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.DeletedSecret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.getSecret'
    name: 'getSecret(string, GetSecretOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GET operation is applicable to any secret stored in Azure Key Vault.
      This operation requires

      the secrets/get permission.
    syntax:
      content: 'function getSecret(secretName: string, options?: GetSecretOptions)'
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - '@azure/keyvault-secrets.GetSecretOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.Secret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.listDeletedSecrets'
    name: listDeletedSecrets(GetSecretsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates the deleted secrets in the vault.  The full secret identifier and
      attributes are provided

      in the response. No values are returned for the secrets. This operations
      requires the secrets/list permission.
    syntax:
      content: 'function listDeletedSecrets(options?: GetSecretsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-secrets.GetSecretsOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-secrets.SecretAttributes,
            @azure/keyvault-secrets.SecretAttributes[]>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.listSecrets'
    name: listSecrets(GetSecretsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates the latest version of all secrets in the vault.  The full secret
      identifier and attributes are provided

      in the response. No values are returned for the secrets. This operations
      requires the secrets/list permission.
    syntax:
      content: 'function listSecrets(options?: GetSecretsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-secrets.GetSecretsOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-secrets.SecretAttributes,
            @azure/keyvault-secrets.SecretAttributes[]>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.listSecretVersions'
    name: 'listSecretVersions(string, GetSecretsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates all versions of the given secret in the vault. The full secret
      identifier and attributes are provided

      in the response. No values are returned for the secrets. This operations
      requires the secrets/list permission.
    syntax:
      content: >-
        function listSecretVersions(secretName: string, options?:
        GetSecretsOptions)
      parameters:
        - id: secretName
          type:
            - string
          description: Name of the secret to fetch versions for
        - id: options
          type:
            - '@azure/keyvault-secrets.GetSecretsOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-secrets.SecretAttributes,
            @azure/keyvault-secrets.SecretAttributes[]>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.pipeline'
    name: pipeline
    fullName: pipeline
    children: []
    langs:
      - typeScript
    type: property
    summary: The options to create the connection to the service
    syntax:
      content: 'pipeline: ServiceClientOptions'
      return:
        type:
          - ServiceClientOptions
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.purgeDeletedSecret'
    name: 'purgeDeletedSecret(string, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The purge deleted secret operation removes the secret permanently, without
      the possibility of

      recovery. This operation can only be enabled on a soft-delete enabled
      vault. This operation

      requires the secrets/purge permission.
    syntax:
      content: >-
        function purgeDeletedSecret(secretName: string, options?:
        RequestOptionsBase)
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.recoverDeletedSecret'
    name: 'recoverDeletedSecret(string, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recovers the deleted secret in the specified vault. This operation can
      only be performed on a

      soft-delete enabled vault. This operation requires the secrets/recover
      permission.
    syntax:
      content: >-
        function recoverDeletedSecret(secretName: string, options?:
        RequestOptionsBase)
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the deleted secret.
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.Secret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.restoreSecret'
    name: 'restoreSecret(Uint8Array, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restores a backed up secret, and all its versions, to a vault. This
      operation requires the

      secrets/restore permission.
    syntax:
      content: >-
        function restoreSecret(secretBundleBackup: Uint8Array, options?:
        RequestOptionsBase)
      parameters:
        - id: secretBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a secret bundle.
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.Secret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.constructor'
    name: >-
      SecretsClient(string, ServiceClientCredentials | TokenCredential,
      ServiceClientOptions | NewPipelineOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of SecretsClient.
    syntax:
      content: >-
        new SecretsClient(url: string, credential: ServiceClientCredentials |
        TokenCredential, pipelineOrOptions?: ServiceClientOptions |
        NewPipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: the base url to the key vault.
        - id: credential
          type:
            - ServiceClientCredentials | TokenCredential
          description: ''
        - id: pipelineOrOptions
          type:
            - ServiceClientOptions | @azure/keyvault-secrets.NewPipelineOptions
          description: ''
          optional: true
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.setSecret'
    name: 'setSecret(string, string, SetSecretOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The SET operation adds a secret to the Azure Key Vault. If the named
      secret already exists,

      Azure Key Vault creates a new version of that secret. This operation
      requires the secrets/set

      permission.
    syntax:
      content: >-
        function setSecret(secretName: string, value: string, options?:
        SetSecretOptions)
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: value
          type:
            - string
          description: The value of the secret.
        - id: options
          type:
            - '@azure/keyvault-secrets.SetSecretOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.Secret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.updateSecretAttributes'
    name: 'updateSecretAttributes(string, string, UpdateSecretOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The UPDATE operation changes specified attributes of an existing stored
      secret. Attributes that

      are not specified in the request are left unchanged. The value of a secret
      itself cannot be

      changed. This operation requires the secrets/set permission.
    syntax:
      content: >-
        function updateSecretAttributes(secretName: string, secretVersion:
        string, options?: UpdateSecretOptions)
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: secretVersion
          type:
            - string
          description: The version of the secret.
        - id: options
          type:
            - '@azure/keyvault-secrets.UpdateSecretOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.Secret>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretsClient.vaultBaseUrl'
    name: vaultBaseUrl
    fullName: vaultBaseUrl
    children: []
    langs:
      - typeScript
    type: property
    summary: The base URL to the vault
    syntax:
      content: 'vaultBaseUrl: string'
      return:
        type:
          - string
    package: '@azure/keyvault-secrets'
references:
  - uid: ServiceClientOptions | @azure/keyvault-secrets.NewPipelineOptions
    name: NewPipelineOptions
    spec.typeScript:
      - name: 'ServiceClientOptions | '
        fullName: 'ServiceClientOptions | '
      - name: NewPipelineOptions
        fullName: NewPipelineOptions
        uid: '@azure/keyvault-secrets.NewPipelineOptions'
  - uid: Promise<@azure/keyvault-secrets.DeletedSecret>
    name: DeletedSecret>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DeletedSecret
        fullName: DeletedSecret
        uid: '@azure/keyvault-secrets.DeletedSecret'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.GetSecretOptions'
    name: GetSecretOptions
    spec.typeScript:
      - name: GetSecretOptions
        fullName: GetSecretOptions
        uid: '@azure/keyvault-secrets.GetSecretOptions'
  - uid: Promise<@azure/keyvault-secrets.Secret>
    name: Secret>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Secret
        fullName: Secret
        uid: '@azure/keyvault-secrets.Secret'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.GetSecretsOptions'
    name: GetSecretsOptions
    spec.typeScript:
      - name: GetSecretsOptions
        fullName: GetSecretsOptions
        uid: '@azure/keyvault-secrets.GetSecretsOptions'
  - uid: >-
      PagedAsyncIterableIterator<@azure/keyvault-secrets.SecretAttributes,
      @azure/keyvault-secrets.SecretAttributes[]>
    name: 'SecretAttributes[]>'
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: SecretAttributes
        fullName: SecretAttributes
        uid: '@azure/keyvault-secrets.SecretAttributes'
      - name: ', '
        fullName: ', '
      - name: SecretAttributes
        fullName: SecretAttributes
        uid: '@azure/keyvault-secrets.SecretAttributes'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/keyvault-secrets.SetSecretOptions'
    name: SetSecretOptions
    spec.typeScript:
      - name: SetSecretOptions
        fullName: SetSecretOptions
        uid: '@azure/keyvault-secrets.SetSecretOptions'
  - uid: '@azure/keyvault-secrets.UpdateSecretOptions'
    name: UpdateSecretOptions
    spec.typeScript:
      - name: UpdateSecretOptions
        fullName: UpdateSecretOptions
        uid: '@azure/keyvault-secrets.UpdateSecretOptions'
  - uid: '@azure/keyvault-secrets.NewPipelineOptions'
    name: NewPipelineOptions
    spec.typeScript:
      - name: NewPipelineOptions
        fullName: NewPipelineOptions
        uid: '@azure/keyvault-secrets.NewPipelineOptions'
