### YamlMime:UniversalReference
items:
  - uid: '@azure/keyvault-secrets.KeyVaultClient'
    name: KeyVaultClient
    fullName: KeyVaultClient
    children:
      - '@azure/keyvault-secrets.KeyVaultClient.acceptLanguage'
      - '@azure/keyvault-secrets.KeyVaultClient.apiVersion'
      - '@azure/keyvault-secrets.KeyVaultClient.backupCertificate'
      - '@azure/keyvault-secrets.KeyVaultClient.backupCertificate_2'
      - '@azure/keyvault-secrets.KeyVaultClient.backupCertificate_1'
      - '@azure/keyvault-secrets.KeyVaultClient.backupKey'
      - '@azure/keyvault-secrets.KeyVaultClient.backupKey_2'
      - '@azure/keyvault-secrets.KeyVaultClient.backupKey_1'
      - '@azure/keyvault-secrets.KeyVaultClient.backupSecret'
      - '@azure/keyvault-secrets.KeyVaultClient.backupSecret_2'
      - '@azure/keyvault-secrets.KeyVaultClient.backupSecret_1'
      - '@azure/keyvault-secrets.KeyVaultClient.backupStorageAccount'
      - '@azure/keyvault-secrets.KeyVaultClient.backupStorageAccount_2'
      - '@azure/keyvault-secrets.KeyVaultClient.backupStorageAccount_1'
      - '@azure/keyvault-secrets.KeyVaultClient.beginLongRunningRequest'
      - '@azure/keyvault-secrets.KeyVaultClient.createCertificate_2'
      - '@azure/keyvault-secrets.KeyVaultClient.createCertificate'
      - '@azure/keyvault-secrets.KeyVaultClient.createCertificate_1'
      - '@azure/keyvault-secrets.KeyVaultClient.createKey_2'
      - '@azure/keyvault-secrets.KeyVaultClient.createKey'
      - '@azure/keyvault-secrets.KeyVaultClient.createKey_1'
      - '@azure/keyvault-secrets.KeyVaultClient.credentials'
      - '@azure/keyvault-secrets.KeyVaultClient.decrypt'
      - '@azure/keyvault-secrets.KeyVaultClient.decrypt_2'
      - '@azure/keyvault-secrets.KeyVaultClient.decrypt_1'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteCertificate'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteCertificate_2'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteCertificate_1'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateContacts'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateContacts_2'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateContacts_1'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateIssuer'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateIssuer_2'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateIssuer_1'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateOperation'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateOperation_2'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateOperation_1'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteKey'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteKey_2'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteKey_1'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteSasDefinition'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteSasDefinition_2'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteSasDefinition_1'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteSecret'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteSecret_2'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteSecret_1'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteStorageAccount'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteStorageAccount_2'
      - '@azure/keyvault-secrets.KeyVaultClient.deleteStorageAccount_1'
      - '@azure/keyvault-secrets.KeyVaultClient.encrypt'
      - '@azure/keyvault-secrets.KeyVaultClient.encrypt_2'
      - '@azure/keyvault-secrets.KeyVaultClient.encrypt_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificate'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificate_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificate_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateContacts'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateContacts_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateContacts_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuer'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuer_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuer_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuers_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuers'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuers_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuersNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuersNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuersNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateOperation'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateOperation_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateOperation_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificatePolicy'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificatePolicy_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificatePolicy_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificates_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificates'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificates_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificatesNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificatesNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificatesNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateVersions_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateVersions'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateVersions_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateVersionsNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateVersionsNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getCertificateVersionsNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificate'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificate_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificate_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificates_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificates'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificates_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificatesNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificatesNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificatesNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedKey'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedKey_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedKey_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedKeys_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedKeys'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedKeys_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedKeysNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedKeysNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedKeysNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinition'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinition_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinition_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinitions_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinitions'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinitions_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinitionsNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinitionsNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinitionsNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecret'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecret_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecret_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecrets_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecrets'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecrets_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecretsNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecretsNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecretsNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccount'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccount_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccount_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccounts_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccounts'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccounts_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccountsNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccountsNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccountsNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getKey'
      - '@azure/keyvault-secrets.KeyVaultClient.getKey_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getKey_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getKeys_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getKeys'
      - '@azure/keyvault-secrets.KeyVaultClient.getKeys_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getKeysNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getKeysNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getKeysNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getKeyVersions_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getKeyVersions'
      - '@azure/keyvault-secrets.KeyVaultClient.getKeyVersions_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getKeyVersionsNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getKeyVersionsNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getKeyVersionsNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getSasDefinition'
      - '@azure/keyvault-secrets.KeyVaultClient.getSasDefinition_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getSasDefinition_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getSasDefinitions_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getSasDefinitions'
      - '@azure/keyvault-secrets.KeyVaultClient.getSasDefinitions_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getSasDefinitionsNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getSasDefinitionsNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getSasDefinitionsNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecret'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecret_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecret_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecrets_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecrets'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecrets_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecretsNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecretsNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecretsNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecretVersions_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecretVersions'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecretVersions_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecretVersionsNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecretVersionsNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getSecretVersionsNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getStorageAccount'
      - '@azure/keyvault-secrets.KeyVaultClient.getStorageAccount_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getStorageAccount_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getStorageAccounts_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getStorageAccounts'
      - '@azure/keyvault-secrets.KeyVaultClient.getStorageAccounts_1'
      - '@azure/keyvault-secrets.KeyVaultClient.getStorageAccountsNext'
      - '@azure/keyvault-secrets.KeyVaultClient.getStorageAccountsNext_2'
      - '@azure/keyvault-secrets.KeyVaultClient.getStorageAccountsNext_1'
      - '@azure/keyvault-secrets.KeyVaultClient.importCertificate_2'
      - '@azure/keyvault-secrets.KeyVaultClient.importCertificate'
      - '@azure/keyvault-secrets.KeyVaultClient.importCertificate_1'
      - '@azure/keyvault-secrets.KeyVaultClient.importKey_2'
      - '@azure/keyvault-secrets.KeyVaultClient.importKey'
      - '@azure/keyvault-secrets.KeyVaultClient.importKey_1'
      - '@azure/keyvault-secrets.KeyVaultClient.constructor'
      - '@azure/keyvault-secrets.KeyVaultClient.longRunningOperationRetryTimeout'
      - '@azure/keyvault-secrets.KeyVaultClient.mergeCertificate_2'
      - '@azure/keyvault-secrets.KeyVaultClient.mergeCertificate'
      - '@azure/keyvault-secrets.KeyVaultClient.mergeCertificate_1'
      - '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedCertificate'
      - '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedCertificate_2'
      - '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedCertificate_1'
      - '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedKey'
      - '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedKey_2'
      - '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedKey_1'
      - '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedSecret'
      - '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedSecret_2'
      - '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedSecret_1'
      - '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedStorageAccount'
      - '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedStorageAccount_2'
      - '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedStorageAccount_1'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedCertificate'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedCertificate_2'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedCertificate_1'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedKey'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedKey_2'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedKey_1'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedSasDefinition'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedSasDefinition_2'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedSasDefinition_1'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedSecret'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedSecret_2'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedSecret_1'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedStorageAccount'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedStorageAccount_2'
      - '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedStorageAccount_1'
      - '@azure/keyvault-secrets.KeyVaultClient.regenerateStorageAccountKey'
      - '@azure/keyvault-secrets.KeyVaultClient.regenerateStorageAccountKey_2'
      - '@azure/keyvault-secrets.KeyVaultClient.regenerateStorageAccountKey_1'
      - '@azure/keyvault-secrets.KeyVaultClient.restoreCertificate'
      - '@azure/keyvault-secrets.KeyVaultClient.restoreCertificate_2'
      - '@azure/keyvault-secrets.KeyVaultClient.restoreCertificate_1'
      - '@azure/keyvault-secrets.KeyVaultClient.restoreKey'
      - '@azure/keyvault-secrets.KeyVaultClient.restoreKey_2'
      - '@azure/keyvault-secrets.KeyVaultClient.restoreKey_1'
      - '@azure/keyvault-secrets.KeyVaultClient.restoreLROPoller'
      - '@azure/keyvault-secrets.KeyVaultClient.restoreSecret'
      - '@azure/keyvault-secrets.KeyVaultClient.restoreSecret_2'
      - '@azure/keyvault-secrets.KeyVaultClient.restoreSecret_1'
      - '@azure/keyvault-secrets.KeyVaultClient.restoreStorageAccount'
      - '@azure/keyvault-secrets.KeyVaultClient.restoreStorageAccount_2'
      - '@azure/keyvault-secrets.KeyVaultClient.restoreStorageAccount_1'
      - '@azure/keyvault-secrets.KeyVaultClient.sendLongRunningRequest'
      - '@azure/keyvault-secrets.KeyVaultClient.sendLRORequest'
      - '@azure/keyvault-secrets.KeyVaultClient.sendOperationRequest'
      - '@azure/keyvault-secrets.KeyVaultClient.sendRequest'
      - '@azure/keyvault-secrets.KeyVaultClient.setCertificateContacts'
      - '@azure/keyvault-secrets.KeyVaultClient.setCertificateContacts_2'
      - '@azure/keyvault-secrets.KeyVaultClient.setCertificateContacts_1'
      - '@azure/keyvault-secrets.KeyVaultClient.setCertificateIssuer_2'
      - '@azure/keyvault-secrets.KeyVaultClient.setCertificateIssuer'
      - '@azure/keyvault-secrets.KeyVaultClient.setCertificateIssuer_1'
      - '@azure/keyvault-secrets.KeyVaultClient.setSasDefinition_2'
      - '@azure/keyvault-secrets.KeyVaultClient.setSasDefinition'
      - '@azure/keyvault-secrets.KeyVaultClient.setSasDefinition_1'
      - '@azure/keyvault-secrets.KeyVaultClient.setSecret_2'
      - '@azure/keyvault-secrets.KeyVaultClient.setSecret'
      - '@azure/keyvault-secrets.KeyVaultClient.setSecret_1'
      - '@azure/keyvault-secrets.KeyVaultClient.setStorageAccount_2'
      - '@azure/keyvault-secrets.KeyVaultClient.setStorageAccount'
      - '@azure/keyvault-secrets.KeyVaultClient.setStorageAccount_1'
      - '@azure/keyvault-secrets.KeyVaultClient.sign'
      - '@azure/keyvault-secrets.KeyVaultClient.sign_2'
      - '@azure/keyvault-secrets.KeyVaultClient.sign_1'
      - '@azure/keyvault-secrets.KeyVaultClient.unwrapKey'
      - '@azure/keyvault-secrets.KeyVaultClient.unwrapKey_2'
      - '@azure/keyvault-secrets.KeyVaultClient.unwrapKey_1'
      - '@azure/keyvault-secrets.KeyVaultClient.updateCertificate_2'
      - '@azure/keyvault-secrets.KeyVaultClient.updateCertificate'
      - '@azure/keyvault-secrets.KeyVaultClient.updateCertificate_1'
      - '@azure/keyvault-secrets.KeyVaultClient.updateCertificateIssuer_2'
      - '@azure/keyvault-secrets.KeyVaultClient.updateCertificateIssuer'
      - '@azure/keyvault-secrets.KeyVaultClient.updateCertificateIssuer_1'
      - '@azure/keyvault-secrets.KeyVaultClient.updateCertificateOperation'
      - '@azure/keyvault-secrets.KeyVaultClient.updateCertificateOperation_2'
      - '@azure/keyvault-secrets.KeyVaultClient.updateCertificateOperation_1'
      - '@azure/keyvault-secrets.KeyVaultClient.updateCertificatePolicy'
      - '@azure/keyvault-secrets.KeyVaultClient.updateCertificatePolicy_2'
      - '@azure/keyvault-secrets.KeyVaultClient.updateCertificatePolicy_1'
      - '@azure/keyvault-secrets.KeyVaultClient.updateKey_2'
      - '@azure/keyvault-secrets.KeyVaultClient.updateKey'
      - '@azure/keyvault-secrets.KeyVaultClient.updateKey_1'
      - '@azure/keyvault-secrets.KeyVaultClient.updateSasDefinition_2'
      - '@azure/keyvault-secrets.KeyVaultClient.updateSasDefinition'
      - '@azure/keyvault-secrets.KeyVaultClient.updateSasDefinition_1'
      - '@azure/keyvault-secrets.KeyVaultClient.updateSecret_2'
      - '@azure/keyvault-secrets.KeyVaultClient.updateSecret'
      - '@azure/keyvault-secrets.KeyVaultClient.updateSecret_1'
      - '@azure/keyvault-secrets.KeyVaultClient.updateStorageAccount_2'
      - '@azure/keyvault-secrets.KeyVaultClient.updateStorageAccount'
      - '@azure/keyvault-secrets.KeyVaultClient.updateStorageAccount_1'
      - '@azure/keyvault-secrets.KeyVaultClient.verify'
      - '@azure/keyvault-secrets.KeyVaultClient.verify_2'
      - '@azure/keyvault-secrets.KeyVaultClient.verify_1'
      - '@azure/keyvault-secrets.KeyVaultClient.wrapKey'
      - '@azure/keyvault-secrets.KeyVaultClient.wrapKey_2'
      - '@azure/keyvault-secrets.KeyVaultClient.wrapKey_1'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/keyvault-secrets.KeyVaultClientContext'
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.acceptLanguage'
    name: acceptLanguage
    fullName: acceptLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'acceptLanguage: string'
      return:
        type:
          - string
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.apiVersion'
    name: apiVersion
    fullName: apiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'apiVersion?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.backupCertificate'
    name: 'backupCertificate(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Requests that a backup of the specified certificate be downloaded to the
      client. All versions of

      the certificate will be downloaded. This operation requires the
      certificates/backup permission.
    syntax:
      content: >-
        function backupCertificate(vaultBaseUrl: string, certificateName:
        string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BackupCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.backupCertificate_2'
    name: >-
      backupCertificate(string, string, RequestOptionsBase,
      ServiceCallback<BackupCertificateResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function backupCertificate(vaultBaseUrl: string, certificateName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<BackupCertificateResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.BackupCertificateResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BackupCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.backupCertificate_1'
    name: >-
      backupCertificate(string, string,
      ServiceCallback<BackupCertificateResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function backupCertificate(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<BackupCertificateResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.BackupCertificateResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BackupCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.backupKey'
    name: 'backupKey(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Key Backup operation exports a key from Azure Key Vault in a protected
      form. Note that this

      operation does NOT return key material in a form that can be used outside
      the Azure Key Vault

      system, the returned key material is either protected to a Azure Key Vault
      HSM or to Azure Key

      Vault itself. The intent of this operation is to allow a client to
      GENERATE a key in one Azure

      Key Vault instance, BACKUP the key, and then RESTORE it into another Azure
      Key Vault instance.

      The BACKUP operation may be used to export, in protected form, any key
      type from Azure Key

      Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE
      can be performed

      within geographical boundaries only; meaning that a BACKUP from one
      geographical area cannot be

      restored to another geographical area. For example, a backup from the US
      geographical area

      cannot be restored in an EU geographical area. This operation requires the
      key/backup

      permission.
    syntax:
      content: >-
        function backupKey(vaultBaseUrl: string, keyName: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BackupKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.backupKey_2'
    name: >-
      backupKey(string, string, RequestOptionsBase,
      ServiceCallback<BackupKeyResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function backupKey(vaultBaseUrl: string, keyName: string, options:
        RequestOptionsBase, callback: ServiceCallback<BackupKeyResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.BackupKeyResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BackupKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.backupKey_1'
    name: 'backupKey(string, string, ServiceCallback<BackupKeyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function backupKey(vaultBaseUrl: string, keyName: string, callback:
        ServiceCallback<BackupKeyResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.BackupKeyResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BackupKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.backupSecret'
    name: 'backupSecret(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Requests that a backup of the specified secret be downloaded to the
      client. All versions of the

      secret will be downloaded. This operation requires the secrets/backup
      permission.
    syntax:
      content: >-
        function backupSecret(vaultBaseUrl: string, secretName: string,
        options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BackupSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.backupSecret_2'
    name: >-
      backupSecret(string, string, RequestOptionsBase,
      ServiceCallback<BackupSecretResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function backupSecret(vaultBaseUrl: string, secretName: string, options:
        RequestOptionsBase, callback: ServiceCallback<BackupSecretResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.BackupSecretResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BackupSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.backupSecret_1'
    name: 'backupSecret(string, string, ServiceCallback<BackupSecretResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function backupSecret(vaultBaseUrl: string, secretName: string,
        callback: ServiceCallback<BackupSecretResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.BackupSecretResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BackupSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.backupStorageAccount'
    name: 'backupStorageAccount(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Requests that a backup of the specified storage account be downloaded to
      the client. This

      operation requires the storage/backup permission.
    syntax:
      content: >-
        function backupStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BackupStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.backupStorageAccount_2'
    name: >-
      backupStorageAccount(string, string, RequestOptionsBase,
      ServiceCallback<BackupStorageResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function backupStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<BackupStorageResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.BackupStorageResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BackupStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.backupStorageAccount_1'
    name: 'backupStorageAccount(string, string, ServiceCallback<BackupStorageResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function backupStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, callback: ServiceCallback<BackupStorageResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.BackupStorageResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.BackupStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.beginLongRunningRequest'
    name: >-
      beginLongRunningRequest(RequestPrepareOptions | WebResource,
      RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Send the initial request of a LRO (long running operation) and get back an

      HttpLongRunningOperationResponse that provides methods for polling the LRO
      and checking if the

      LRO is finished.
    syntax:
      content: >-
        function beginLongRunningRequest(request: RequestPrepareOptions |
        WebResource, options?: RequestOptionsBase)
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: The request object
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.createCertificate_2'
    name: >-
      createCertificate(string, string,
      KeyVaultClientCreateCertificateOptionalParams,
      ServiceCallback<CertificateOperation>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createCertificate(vaultBaseUrl: string, certificateName:
        string, options: KeyVaultClientCreateCertificateOptionalParams,
        callback: ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientCreateCertificateOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateOperation>
          description: |
            The callback
      return:
        type:
          - Promise<Models.CreateCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.createCertificate'
    name: >-
      createCertificate(string, string,
      Models.KeyVaultClientCreateCertificateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If this is the first version, the certificate resource is created. This
      operation requires the

      certificates/create permission.
    syntax:
      content: >-
        function createCertificate(vaultBaseUrl: string, certificateName:
        string, options?: Models.KeyVaultClientCreateCertificateOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - Models.KeyVaultClientCreateCertificateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CreateCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.createCertificate_1'
    name: 'createCertificate(string, string, ServiceCallback<CertificateOperation>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createCertificate(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateOperation>
          description: |
            The callback
      return:
        type:
          - Promise<Models.CreateCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.createKey_2'
    name: >-
      createKey(string, string, Models.JsonWebKeyType,
      KeyVaultClientCreateKeyOptionalParams, ServiceCallback<KeyBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createKey(vaultBaseUrl: string, keyName: string, kty:
        Models.JsonWebKeyType, options: KeyVaultClientCreateKeyOptionalParams,
        callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: >-
            The name for the new key. The system will generate the version name
            for the new

            key.
        - id: kty
          type:
            - Models.JsonWebKeyType
          description: >-
            The type of key to create. For valid values, see JsonWebKeyType.
            Possible values

            include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
        - id: options
          type:
            - '@azure/keyvault-secrets.KeyVaultClientCreateKeyOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.CreateKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.createKey'
    name: >-
      createKey(string, string, Models.JsonWebKeyType,
      Models.KeyVaultClientCreateKeyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The create key operation can be used to create any key type in Azure Key
      Vault. If the named key

      already exists, Azure Key Vault creates a new version of the key. It
      requires the keys/create

      permission.
    syntax:
      content: >-
        function createKey(vaultBaseUrl: string, keyName: string, kty:
        Models.JsonWebKeyType, options?:
        Models.KeyVaultClientCreateKeyOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: >-
            The name for the new key. The system will generate the version name
            for the new

            key.
        - id: kty
          type:
            - Models.JsonWebKeyType
          description: >-
            The type of key to create. For valid values, see JsonWebKeyType.
            Possible values

            include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
        - id: options
          type:
            - Models.KeyVaultClientCreateKeyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CreateKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.createKey_1'
    name: >-
      createKey(string, string, Models.JsonWebKeyType,
      ServiceCallback<KeyBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createKey(vaultBaseUrl: string, keyName: string, kty:
        Models.JsonWebKeyType, callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: >-
            The name for the new key. The system will generate the version name
            for the new

            key.
        - id: kty
          type:
            - Models.JsonWebKeyType
          description: >-
            The type of key to create. For valid values, see JsonWebKeyType.
            Possible values

            include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.CreateKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.credentials'
    name: credentials
    fullName: credentials
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'credentials: TokenCredential'
      return:
        type:
          - TokenCredential
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.decrypt'
    name: >-
      decrypt(string, string, string, Models.JsonWebKeyEncryptionAlgorithm,
      Uint8Array, coreHttp.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The DECRYPT operation decrypts a well-formed block of ciphertext using the
      target encryption key

      and specified algorithm. This operation is the reverse of the ENCRYPT
      operation; only a single

      block of data may be decrypted, the size of this block is dependent on the
      target key and the

      algorithm to be used. The DECRYPT operation applies to asymmetric and
      symmetric keys stored in

      Azure Key Vault since it uses the private portion of the key. This
      operation requires the

      keys/decrypt permission.
    syntax:
      content: >-
        function decrypt(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value:
        Uint8Array, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeyEncryptionAlgorithm
          description: >-
            algorithm identifier. Possible values include: 'RSA-OAEP',
            'RSA-OAEP-256',

            'RSA1_5'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DecryptResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.decrypt_2'
    name: >-
      decrypt(string, string, string, Models.JsonWebKeyEncryptionAlgorithm,
      Uint8Array, RequestOptionsBase, ServiceCallback<KeyOperationResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function decrypt(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value:
        Uint8Array, options: RequestOptionsBase, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeyEncryptionAlgorithm
          description: >-
            algorithm identifier. Possible values include: 'RSA-OAEP',
            'RSA-OAEP-256',

            'RSA1_5'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyOperationResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DecryptResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.decrypt_1'
    name: >-
      decrypt(string, string, string, Models.JsonWebKeyEncryptionAlgorithm,
      Uint8Array, ServiceCallback<KeyOperationResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function decrypt(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value:
        Uint8Array, callback: ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeyEncryptionAlgorithm
          description: >-
            algorithm identifier. Possible values include: 'RSA-OAEP',
            'RSA-OAEP-256',

            'RSA1_5'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyOperationResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DecryptResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteCertificate'
    name: 'deleteCertificate(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes all versions of a certificate object along with its associated
      policy. Delete

      certificate cannot be used to remove individual versions of a certificate
      object. This operation

      requires the certificates/delete permission.
    syntax:
      content: >-
        function deleteCertificate(vaultBaseUrl: string, certificateName:
        string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeleteCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteCertificate_2'
    name: >-
      deleteCertificate(string, string, RequestOptionsBase,
      ServiceCallback<DeletedCertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteCertificate(vaultBaseUrl: string, certificateName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<DeletedCertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedCertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteCertificate_1'
    name: >-
      deleteCertificate(string, string,
      ServiceCallback<DeletedCertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteCertificate(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<DeletedCertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedCertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateContacts'
    name: 'deleteCertificateContacts(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes the certificate contacts for a specified key vault certificate.
      This operation requires

      the certificates/managecontacts permission.
    syntax:
      content: >-
        function deleteCertificateContacts(vaultBaseUrl: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeleteCertificateContactsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateContacts_2'
    name: >-
      deleteCertificateContacts(string, RequestOptionsBase,
      ServiceCallback<Contacts>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteCertificateContacts(vaultBaseUrl: string, options:
        RequestOptionsBase, callback: ServiceCallback<Contacts>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.Contacts>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteCertificateContactsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateContacts_1'
    name: 'deleteCertificateContacts(string, ServiceCallback<Contacts>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteCertificateContacts(vaultBaseUrl: string, callback:
        ServiceCallback<Contacts>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.Contacts>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteCertificateContactsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateIssuer'
    name: 'deleteCertificateIssuer(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The DeleteCertificateIssuer operation permanently removes the specified
      certificate issuer from

      the vault. This operation requires the
      certificates/manageissuers/deleteissuers permission.
    syntax:
      content: >-
        function deleteCertificateIssuer(vaultBaseUrl: string, issuerName:
        string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeleteCertificateIssuerResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateIssuer_2'
    name: >-
      deleteCertificateIssuer(string, string, RequestOptionsBase,
      ServiceCallback<IssuerBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteCertificateIssuer(vaultBaseUrl: string, issuerName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.IssuerBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteCertificateIssuerResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateIssuer_1'
    name: 'deleteCertificateIssuer(string, string, ServiceCallback<IssuerBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteCertificateIssuer(vaultBaseUrl: string, issuerName:
        string, callback: ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.IssuerBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteCertificateIssuerResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateOperation'
    name: 'deleteCertificateOperation(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes the creation operation for a specified certificate that is in the
      process of being

      created. The certificate is no longer created. This operation requires the
      certificates/update

      permission.
    syntax:
      content: >-
        function deleteCertificateOperation(vaultBaseUrl: string,
        certificateName: string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeleteCertificateOperationResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateOperation_2'
    name: >-
      deleteCertificateOperation(string, string, RequestOptionsBase,
      ServiceCallback<CertificateOperation>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteCertificateOperation(vaultBaseUrl: string,
        certificateName: string, options: RequestOptionsBase, callback:
        ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateOperation>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteCertificateOperationResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteCertificateOperation_1'
    name: >-
      deleteCertificateOperation(string, string,
      ServiceCallback<CertificateOperation>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteCertificateOperation(vaultBaseUrl: string,
        certificateName: string, callback:
        ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateOperation>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteCertificateOperationResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteKey'
    name: 'deleteKey(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The delete key operation cannot be used to remove individual versions of a
      key. This operation

      removes the cryptographic material associated with the key, which means
      the key is not usable

      for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation
      requires the

      keys/delete permission.
    syntax:
      content: >-
        function deleteKey(vaultBaseUrl: string, keyName: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key to delete.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeleteKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteKey_2'
    name: >-
      deleteKey(string, string, RequestOptionsBase,
      ServiceCallback<DeletedKeyBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteKey(vaultBaseUrl: string, keyName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeletedKeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key to delete.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedKeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteKey_1'
    name: 'deleteKey(string, string, ServiceCallback<DeletedKeyBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteKey(vaultBaseUrl: string, keyName: string, callback:
        ServiceCallback<DeletedKeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key to delete.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedKeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteSasDefinition'
    name: 'deleteSasDefinition(string, string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes a SAS definition from a specified storage account. This operation
      requires the

      storage/deletesas permission.
    syntax:
      content: >-
        function deleteSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeleteSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteSasDefinition_2'
    name: >-
      deleteSasDefinition(string, string, string, RequestOptionsBase,
      ServiceCallback<DeletedSasDefinitionBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, options: RequestOptionsBase,
        callback: ServiceCallback<DeletedSasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.DeletedSasDefinitionBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteSasDefinition_1'
    name: >-
      deleteSasDefinition(string, string, string,
      ServiceCallback<DeletedSasDefinitionBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, callback:
        ServiceCallback<DeletedSasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.DeletedSasDefinitionBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteSecret'
    name: 'deleteSecret(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The DELETE operation applies to any secret stored in Azure Key Vault.
      DELETE cannot be applied

      to an individual version of a secret. This operation requires the
      secrets/delete permission.
    syntax:
      content: >-
        function deleteSecret(vaultBaseUrl: string, secretName: string,
        options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeleteSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteSecret_2'
    name: >-
      deleteSecret(string, string, RequestOptionsBase,
      ServiceCallback<DeletedSecretBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteSecret(vaultBaseUrl: string, secretName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeletedSecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedSecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteSecret_1'
    name: 'deleteSecret(string, string, ServiceCallback<DeletedSecretBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteSecret(vaultBaseUrl: string, secretName: string,
        callback: ServiceCallback<DeletedSecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedSecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteStorageAccount'
    name: 'deleteStorageAccount(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes a storage account. This operation requires the storage/delete
      permission.
    syntax:
      content: >-
        function deleteStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeleteStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteStorageAccount_2'
    name: >-
      deleteStorageAccount(string, string, RequestOptionsBase,
      ServiceCallback<DeletedStorageBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<DeletedStorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedStorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.deleteStorageAccount_1'
    name: >-
      deleteStorageAccount(string, string,
      ServiceCallback<DeletedStorageBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, callback: ServiceCallback<DeletedStorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedStorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.DeleteStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.encrypt'
    name: >-
      encrypt(string, string, string, Models.JsonWebKeyEncryptionAlgorithm,
      Uint8Array, coreHttp.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The ENCRYPT operation encrypts an arbitrary sequence of bytes using an
      encryption key that is

      stored in Azure Key Vault. Note that the ENCRYPT operation only supports a
      single block of data,

      the size of which is dependent on the target key and the encryption
      algorithm to be used. The

      ENCRYPT operation is only strictly necessary for symmetric keys stored in
      Azure Key Vault since

      protection with an asymmetric key can be performed using public portion of
      the key. This

      operation is supported for asymmetric keys as a convenience for callers
      that have a

      key-reference but do not have access to the public key material. This
      operation requires the

      keys/encrypt permission.
    syntax:
      content: >-
        function encrypt(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value:
        Uint8Array, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeyEncryptionAlgorithm
          description: >-
            algorithm identifier. Possible values include: 'RSA-OAEP',
            'RSA-OAEP-256',

            'RSA1_5'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.EncryptResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.encrypt_2'
    name: >-
      encrypt(string, string, string, Models.JsonWebKeyEncryptionAlgorithm,
      Uint8Array, RequestOptionsBase, ServiceCallback<KeyOperationResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function encrypt(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value:
        Uint8Array, options: RequestOptionsBase, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeyEncryptionAlgorithm
          description: >-
            algorithm identifier. Possible values include: 'RSA-OAEP',
            'RSA-OAEP-256',

            'RSA1_5'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyOperationResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EncryptResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.encrypt_1'
    name: >-
      encrypt(string, string, string, Models.JsonWebKeyEncryptionAlgorithm,
      Uint8Array, ServiceCallback<KeyOperationResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function encrypt(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value:
        Uint8Array, callback: ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeyEncryptionAlgorithm
          description: >-
            algorithm identifier. Possible values include: 'RSA-OAEP',
            'RSA-OAEP-256',

            'RSA1_5'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyOperationResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.EncryptResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificate'
    name: 'getCertificate(string, string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets information about a specific certificate. This operation requires the
      certificates/get

      permission.
    syntax:
      content: >-
        function getCertificate(vaultBaseUrl: string, certificateName: string,
        certificateVersion: string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate in the given vault.
        - id: certificateVersion
          type:
            - string
          description: The version of the certificate.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificate_2'
    name: >-
      getCertificate(string, string, string, RequestOptionsBase,
      ServiceCallback<CertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificate(vaultBaseUrl: string, certificateName: string,
        certificateVersion: string, options: RequestOptionsBase, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate in the given vault.
        - id: certificateVersion
          type:
            - string
          description: The version of the certificate.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificate_1'
    name: 'getCertificate(string, string, string, ServiceCallback<CertificateBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificate(vaultBaseUrl: string, certificateName: string,
        certificateVersion: string, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate in the given vault.
        - id: certificateVersion
          type:
            - string
          description: The version of the certificate.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateContacts'
    name: 'getCertificateContacts(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GetCertificateContacts operation returns the set of certificate
      contact resources in the

      specified key vault. This operation requires the
      certificates/managecontacts permission.
    syntax:
      content: >-
        function getCertificateContacts(vaultBaseUrl: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetCertificateContactsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateContacts_2'
    name: >-
      getCertificateContacts(string, RequestOptionsBase,
      ServiceCallback<Contacts>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateContacts(vaultBaseUrl: string, options:
        RequestOptionsBase, callback: ServiceCallback<Contacts>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.Contacts>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateContactsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateContacts_1'
    name: 'getCertificateContacts(string, ServiceCallback<Contacts>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateContacts(vaultBaseUrl: string, callback:
        ServiceCallback<Contacts>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.Contacts>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateContactsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuer'
    name: 'getCertificateIssuer(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GetCertificateIssuer operation returns the specified certificate
      issuer resources in the

      specified key vault. This operation requires the
      certificates/manageissuers/getissuers

      permission.
    syntax:
      content: >-
        function getCertificateIssuer(vaultBaseUrl: string, issuerName: string,
        options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetCertificateIssuerResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuer_2'
    name: >-
      getCertificateIssuer(string, string, RequestOptionsBase,
      ServiceCallback<IssuerBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateIssuer(vaultBaseUrl: string, issuerName: string,
        options: RequestOptionsBase, callback: ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.IssuerBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateIssuerResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuer_1'
    name: 'getCertificateIssuer(string, string, ServiceCallback<IssuerBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateIssuer(vaultBaseUrl: string, issuerName: string,
        callback: ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.IssuerBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateIssuerResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuers_2'
    name: >-
      getCertificateIssuers(string,
      KeyVaultClientGetCertificateIssuersOptionalParams,
      ServiceCallback<CertificateIssuerListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateIssuers(vaultBaseUrl: string, options:
        KeyVaultClientGetCertificateIssuersOptionalParams, callback:
        ServiceCallback<CertificateIssuerListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientGetCertificateIssuersOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.CertificateIssuerListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateIssuersResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuers'
    name: >-
      getCertificateIssuers(string,
      Models.KeyVaultClientGetCertificateIssuersOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GetCertificateIssuers operation returns the set of certificate issuer
      resources in the

      specified key vault. This operation requires the
      certificates/manageissuers/getissuers

      permission.
    syntax:
      content: >-
        function getCertificateIssuers(vaultBaseUrl: string, options?:
        Models.KeyVaultClientGetCertificateIssuersOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - Models.KeyVaultClientGetCertificateIssuersOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetCertificateIssuersResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuers_1'
    name: >-
      getCertificateIssuers(string,
      ServiceCallback<CertificateIssuerListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateIssuers(vaultBaseUrl: string, callback:
        ServiceCallback<CertificateIssuerListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.CertificateIssuerListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateIssuersResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuersNext'
    name: 'getCertificateIssuersNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GetCertificateIssuers operation returns the set of certificate issuer
      resources in the

      specified key vault. This operation requires the
      certificates/manageissuers/getissuers

      permission.
    syntax:
      content: >-
        function getCertificateIssuersNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetCertificateIssuersNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuersNext_2'
    name: >-
      getCertificateIssuersNext(string, RequestOptionsBase,
      ServiceCallback<CertificateIssuerListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateIssuersNext(nextPageLink: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<CertificateIssuerListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.CertificateIssuerListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateIssuersNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateIssuersNext_1'
    name: >-
      getCertificateIssuersNext(string,
      ServiceCallback<CertificateIssuerListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateIssuersNext(nextPageLink: string, callback:
        ServiceCallback<CertificateIssuerListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.CertificateIssuerListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateIssuersNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateOperation'
    name: 'getCertificateOperation(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the creation operation associated with a specified certificate. This
      operation requires the

      certificates/get permission.
    syntax:
      content: >-
        function getCertificateOperation(vaultBaseUrl: string, certificateName:
        string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetCertificateOperationResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateOperation_2'
    name: >-
      getCertificateOperation(string, string, RequestOptionsBase,
      ServiceCallback<CertificateOperation>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateOperation(vaultBaseUrl: string, certificateName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateOperation>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateOperationResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateOperation_1'
    name: >-
      getCertificateOperation(string, string,
      ServiceCallback<CertificateOperation>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateOperation(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateOperation>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateOperationResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificatePolicy'
    name: 'getCertificatePolicy(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GetCertificatePolicy operation returns the specified certificate
      policy resources in the

      specified key vault. This operation requires the certificates/get
      permission.
    syntax:
      content: >-
        function getCertificatePolicy(vaultBaseUrl: string, certificateName:
        string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate in a given key vault.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetCertificatePolicyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificatePolicy_2'
    name: >-
      getCertificatePolicy(string, string, RequestOptionsBase,
      ServiceCallback<CertificatePolicy>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificatePolicy(vaultBaseUrl: string, certificateName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<CertificatePolicy>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate in a given key vault.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificatePolicy>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificatePolicyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificatePolicy_1'
    name: 'getCertificatePolicy(string, string, ServiceCallback<CertificatePolicy>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificatePolicy(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<CertificatePolicy>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate in a given key vault.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificatePolicy>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificatePolicyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificates_2'
    name: >-
      getCertificates(string, KeyVaultClientGetCertificatesOptionalParams,
      ServiceCallback<CertificateListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificates(vaultBaseUrl: string, options:
        KeyVaultClientGetCertificatesOptionalParams, callback:
        ServiceCallback<CertificateListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientGetCertificatesOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificatesResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificates'
    name: >-
      getCertificates(string,
      Models.KeyVaultClientGetCertificatesOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GetCertificates operation returns the set of certificates resources in
      the specified key

      vault. This operation requires the certificates/list permission.
    syntax:
      content: >-
        function getCertificates(vaultBaseUrl: string, options?:
        Models.KeyVaultClientGetCertificatesOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - Models.KeyVaultClientGetCertificatesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetCertificatesResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificates_1'
    name: 'getCertificates(string, ServiceCallback<CertificateListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificates(vaultBaseUrl: string, callback:
        ServiceCallback<CertificateListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificatesResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificatesNext'
    name: 'getCertificatesNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GetCertificates operation returns the set of certificates resources in
      the specified key

      vault. This operation requires the certificates/list permission.
    syntax:
      content: >-
        function getCertificatesNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetCertificatesNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificatesNext_2'
    name: >-
      getCertificatesNext(string, RequestOptionsBase,
      ServiceCallback<CertificateListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificatesNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<CertificateListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificatesNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificatesNext_1'
    name: 'getCertificatesNext(string, ServiceCallback<CertificateListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificatesNext(nextPageLink: string, callback:
        ServiceCallback<CertificateListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificatesNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateVersions_2'
    name: >-
      getCertificateVersions(string, string,
      KeyVaultClientGetCertificateVersionsOptionalParams,
      ServiceCallback<CertificateListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateVersions(vaultBaseUrl: string, certificateName:
        string, options: KeyVaultClientGetCertificateVersionsOptionalParams,
        callback: ServiceCallback<CertificateListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientGetCertificateVersionsOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateVersionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateVersions'
    name: >-
      getCertificateVersions(string, string,
      Models.KeyVaultClientGetCertificateVersionsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GetCertificateVersions operation returns the versions of a certificate
      in the specified key

      vault. This operation requires the certificates/list permission.
    syntax:
      content: >-
        function getCertificateVersions(vaultBaseUrl: string, certificateName:
        string, options?:
        Models.KeyVaultClientGetCertificateVersionsOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - Models.KeyVaultClientGetCertificateVersionsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetCertificateVersionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateVersions_1'
    name: >-
      getCertificateVersions(string, string,
      ServiceCallback<CertificateListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateVersions(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<CertificateListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateVersionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateVersionsNext'
    name: 'getCertificateVersionsNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GetCertificateVersions operation returns the versions of a certificate
      in the specified key

      vault. This operation requires the certificates/list permission.
    syntax:
      content: >-
        function getCertificateVersionsNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetCertificateVersionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateVersionsNext_2'
    name: >-
      getCertificateVersionsNext(string, RequestOptionsBase,
      ServiceCallback<CertificateListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateVersionsNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<CertificateListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateVersionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getCertificateVersionsNext_1'
    name: 'getCertificateVersionsNext(string, ServiceCallback<CertificateListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getCertificateVersionsNext(nextPageLink: string, callback:
        ServiceCallback<CertificateListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetCertificateVersionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificate'
    name: 'getDeletedCertificate(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GetDeletedCertificate operation retrieves the deleted certificate
      information plus its

      attributes, such as retention interval, scheduled permanent deletion and
      the current deletion

      recovery level. This operation requires the certificates/get permission.
    syntax:
      content: >-
        function getDeletedCertificate(vaultBaseUrl: string, certificateName:
        string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificate_2'
    name: >-
      getDeletedCertificate(string, string, RequestOptionsBase,
      ServiceCallback<DeletedCertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedCertificate(vaultBaseUrl: string, certificateName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<DeletedCertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedCertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificate_1'
    name: >-
      getDeletedCertificate(string, string,
      ServiceCallback<DeletedCertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedCertificate(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<DeletedCertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedCertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificates_2'
    name: >-
      getDeletedCertificates(string,
      KeyVaultClientGetDeletedCertificatesOptionalParams,
      ServiceCallback<DeletedCertificateListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedCertificates(vaultBaseUrl: string, options:
        KeyVaultClientGetDeletedCertificatesOptionalParams, callback:
        ServiceCallback<DeletedCertificateListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientGetDeletedCertificatesOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.DeletedCertificateListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedCertificatesResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificates'
    name: >-
      getDeletedCertificates(string,
      Models.KeyVaultClientGetDeletedCertificatesOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GetDeletedCertificates operation retrieves the certificates in the
      current vault which are

      in a deleted state and ready for recovery or purging. This operation
      includes deletion-specific

      information. This operation requires the certificates/get/list permission.
      This operation can

      only be enabled on soft-delete enabled vaults.
    syntax:
      content: >-
        function getDeletedCertificates(vaultBaseUrl: string, options?:
        Models.KeyVaultClientGetDeletedCertificatesOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - Models.KeyVaultClientGetDeletedCertificatesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedCertificatesResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificates_1'
    name: >-
      getDeletedCertificates(string,
      ServiceCallback<DeletedCertificateListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedCertificates(vaultBaseUrl: string, callback:
        ServiceCallback<DeletedCertificateListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.DeletedCertificateListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedCertificatesResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificatesNext'
    name: 'getDeletedCertificatesNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GetDeletedCertificates operation retrieves the certificates in the
      current vault which are

      in a deleted state and ready for recovery or purging. This operation
      includes deletion-specific

      information. This operation requires the certificates/get/list permission.
      This operation can

      only be enabled on soft-delete enabled vaults.
    syntax:
      content: >-
        function getDeletedCertificatesNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedCertificatesNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificatesNext_2'
    name: >-
      getDeletedCertificatesNext(string, RequestOptionsBase,
      ServiceCallback<DeletedCertificateListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedCertificatesNext(nextPageLink: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<DeletedCertificateListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.DeletedCertificateListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedCertificatesNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedCertificatesNext_1'
    name: >-
      getDeletedCertificatesNext(string,
      ServiceCallback<DeletedCertificateListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedCertificatesNext(nextPageLink: string, callback:
        ServiceCallback<DeletedCertificateListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.DeletedCertificateListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedCertificatesNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedKey'
    name: 'getDeletedKey(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Deleted Key operation is applicable for soft-delete enabled
      vaults. While the operation

      can be invoked on any vault, it will return an error if invoked on a non
      soft-delete enabled

      vault. This operation requires the keys/get permission.
    syntax:
      content: >-
        function getDeletedKey(vaultBaseUrl: string, keyName: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedKey_2'
    name: >-
      getDeletedKey(string, string, RequestOptionsBase,
      ServiceCallback<DeletedKeyBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedKey(vaultBaseUrl: string, keyName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeletedKeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedKeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedKey_1'
    name: 'getDeletedKey(string, string, ServiceCallback<DeletedKeyBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedKey(vaultBaseUrl: string, keyName: string, callback:
        ServiceCallback<DeletedKeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedKeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedKeys_2'
    name: >-
      getDeletedKeys(string, KeyVaultClientGetDeletedKeysOptionalParams,
      ServiceCallback<DeletedKeyListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedKeys(vaultBaseUrl: string, options:
        KeyVaultClientGetDeletedKeysOptionalParams, callback:
        ServiceCallback<DeletedKeyListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - '@azure/keyvault-secrets.KeyVaultClientGetDeletedKeysOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedKeyListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedKeysResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedKeys'
    name: 'getDeletedKeys(string, Models.KeyVaultClientGetDeletedKeysOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieves a list of the keys in the Key Vault as JSON Web Key structures
      that contain the public

      part of a deleted key. This operation includes deletion-specific
      information. The Get Deleted

      Keys operation is applicable for vaults enabled for soft-delete. While the
      operation can be

      invoked on any vault, it will return an error if invoked on a non
      soft-delete enabled vault.

      This operation requires the keys/list permission.
    syntax:
      content: >-
        function getDeletedKeys(vaultBaseUrl: string, options?:
        Models.KeyVaultClientGetDeletedKeysOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - Models.KeyVaultClientGetDeletedKeysOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedKeysResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedKeys_1'
    name: 'getDeletedKeys(string, ServiceCallback<DeletedKeyListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedKeys(vaultBaseUrl: string, callback:
        ServiceCallback<DeletedKeyListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedKeyListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedKeysResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedKeysNext'
    name: 'getDeletedKeysNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieves a list of the keys in the Key Vault as JSON Web Key structures
      that contain the public

      part of a deleted key. This operation includes deletion-specific
      information. The Get Deleted

      Keys operation is applicable for vaults enabled for soft-delete. While the
      operation can be

      invoked on any vault, it will return an error if invoked on a non
      soft-delete enabled vault.

      This operation requires the keys/list permission.
    syntax:
      content: >-
        function getDeletedKeysNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedKeysNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedKeysNext_2'
    name: >-
      getDeletedKeysNext(string, RequestOptionsBase,
      ServiceCallback<DeletedKeyListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedKeysNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeletedKeyListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedKeyListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedKeysNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedKeysNext_1'
    name: 'getDeletedKeysNext(string, ServiceCallback<DeletedKeyListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedKeysNext(nextPageLink: string, callback:
        ServiceCallback<DeletedKeyListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedKeyListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedKeysNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinition'
    name: >-
      getDeletedSasDefinition(string, string, string,
      coreHttp.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Deleted SAS Definition operation returns the specified deleted SAS
      definition along with

      its attributes. This operation requires the storage/getsas permission.
    syntax:
      content: >-
        function getDeletedSasDefinition(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinition_2'
    name: >-
      getDeletedSasDefinition(string, string, string, RequestOptionsBase,
      ServiceCallback<DeletedSasDefinitionBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedSasDefinition(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<DeletedSasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.DeletedSasDefinitionBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinition_1'
    name: >-
      getDeletedSasDefinition(string, string, string,
      ServiceCallback<DeletedSasDefinitionBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedSasDefinition(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, callback:
        ServiceCallback<DeletedSasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.DeletedSasDefinitionBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinitions_2'
    name: >-
      getDeletedSasDefinitions(string, string,
      KeyVaultClientGetDeletedSasDefinitionsOptionalParams,
      ServiceCallback<DeletedSasDefinitionListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedSasDefinitions(vaultBaseUrl: string,
        storageAccountName: string, options:
        KeyVaultClientGetDeletedSasDefinitionsOptionalParams, callback:
        ServiceCallback<DeletedSasDefinitionListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientGetDeletedSasDefinitionsOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.DeletedSasDefinitionListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedSasDefinitionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinitions'
    name: >-
      getDeletedSasDefinitions(string, string,
      Models.KeyVaultClientGetDeletedSasDefinitionsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Deleted Sas Definitions operation returns the SAS definitions that
      have been deleted for

      a vault enabled for soft-delete. This operation requires the
      storage/listsas permission.
    syntax:
      content: >-
        function getDeletedSasDefinitions(vaultBaseUrl: string,
        storageAccountName: string, options?:
        Models.KeyVaultClientGetDeletedSasDefinitionsOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - Models.KeyVaultClientGetDeletedSasDefinitionsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedSasDefinitionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinitions_1'
    name: >-
      getDeletedSasDefinitions(string, string,
      ServiceCallback<DeletedSasDefinitionListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedSasDefinitions(vaultBaseUrl: string,
        storageAccountName: string, callback:
        ServiceCallback<DeletedSasDefinitionListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.DeletedSasDefinitionListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedSasDefinitionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinitionsNext'
    name: 'getDeletedSasDefinitionsNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Deleted Sas Definitions operation returns the SAS definitions that
      have been deleted for

      a vault enabled for soft-delete. This operation requires the
      storage/listsas permission.
    syntax:
      content: >-
        function getDeletedSasDefinitionsNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedSasDefinitionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinitionsNext_2'
    name: >-
      getDeletedSasDefinitionsNext(string, RequestOptionsBase,
      ServiceCallback<DeletedSasDefinitionListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedSasDefinitionsNext(nextPageLink: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<DeletedSasDefinitionListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.DeletedSasDefinitionListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedSasDefinitionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSasDefinitionsNext_1'
    name: >-
      getDeletedSasDefinitionsNext(string,
      ServiceCallback<DeletedSasDefinitionListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedSasDefinitionsNext(nextPageLink: string, callback:
        ServiceCallback<DeletedSasDefinitionListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/keyvault-secrets.DeletedSasDefinitionListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedSasDefinitionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecret'
    name: 'getDeletedSecret(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Deleted Secret operation returns the specified deleted secret
      along with its attributes.

      This operation requires the secrets/get permission.
    syntax:
      content: >-
        function getDeletedSecret(vaultBaseUrl: string, secretName: string,
        options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecret_2'
    name: >-
      getDeletedSecret(string, string, RequestOptionsBase,
      ServiceCallback<DeletedSecretBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedSecret(vaultBaseUrl: string, secretName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<DeletedSecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedSecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecret_1'
    name: 'getDeletedSecret(string, string, ServiceCallback<DeletedSecretBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedSecret(vaultBaseUrl: string, secretName: string,
        callback: ServiceCallback<DeletedSecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedSecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecrets_2'
    name: >-
      getDeletedSecrets(string, KeyVaultClientGetDeletedSecretsOptionalParams,
      ServiceCallback<DeletedSecretListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedSecrets(vaultBaseUrl: string, options:
        KeyVaultClientGetDeletedSecretsOptionalParams, callback:
        ServiceCallback<DeletedSecretListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientGetDeletedSecretsOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedSecretListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedSecretsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecrets'
    name: >-
      getDeletedSecrets(string,
      Models.KeyVaultClientGetDeletedSecretsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Deleted Secrets operation returns the secrets that have been
      deleted for a vault enabled

      for soft-delete. This operation requires the secrets/list permission.
    syntax:
      content: >-
        function getDeletedSecrets(vaultBaseUrl: string, options?:
        Models.KeyVaultClientGetDeletedSecretsOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - Models.KeyVaultClientGetDeletedSecretsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedSecretsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecrets_1'
    name: 'getDeletedSecrets(string, ServiceCallback<DeletedSecretListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedSecrets(vaultBaseUrl: string, callback:
        ServiceCallback<DeletedSecretListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedSecretListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedSecretsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecretsNext'
    name: 'getDeletedSecretsNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Deleted Secrets operation returns the secrets that have been
      deleted for a vault enabled

      for soft-delete. This operation requires the secrets/list permission.
    syntax:
      content: >-
        function getDeletedSecretsNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedSecretsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecretsNext_2'
    name: >-
      getDeletedSecretsNext(string, RequestOptionsBase,
      ServiceCallback<DeletedSecretListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedSecretsNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeletedSecretListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedSecretListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedSecretsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedSecretsNext_1'
    name: 'getDeletedSecretsNext(string, ServiceCallback<DeletedSecretListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedSecretsNext(nextPageLink: string, callback:
        ServiceCallback<DeletedSecretListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedSecretListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedSecretsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccount'
    name: 'getDeletedStorageAccount(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Deleted Storage Account operation returns the specified deleted
      storage account along

      with its attributes. This operation requires the storage/get permission.
    syntax:
      content: >-
        function getDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccount_2'
    name: >-
      getDeletedStorageAccount(string, string, RequestOptionsBase,
      ServiceCallback<DeletedStorageBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, options: RequestOptionsBase, callback:
        ServiceCallback<DeletedStorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedStorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccount_1'
    name: >-
      getDeletedStorageAccount(string, string,
      ServiceCallback<DeletedStorageBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, callback:
        ServiceCallback<DeletedStorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedStorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccounts_2'
    name: >-
      getDeletedStorageAccounts(string,
      KeyVaultClientGetDeletedStorageAccountsOptionalParams,
      ServiceCallback<DeletedStorageListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedStorageAccounts(vaultBaseUrl: string, options:
        KeyVaultClientGetDeletedStorageAccountsOptionalParams, callback:
        ServiceCallback<DeletedStorageListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientGetDeletedStorageAccountsOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedStorageListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedStorageAccountsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccounts'
    name: >-
      getDeletedStorageAccounts(string,
      Models.KeyVaultClientGetDeletedStorageAccountsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Deleted Storage Accounts operation returns the storage accounts
      that have been deleted

      for a vault enabled for soft-delete. This operation requires the
      storage/list permission.
    syntax:
      content: >-
        function getDeletedStorageAccounts(vaultBaseUrl: string, options?:
        Models.KeyVaultClientGetDeletedStorageAccountsOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - Models.KeyVaultClientGetDeletedStorageAccountsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedStorageAccountsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccounts_1'
    name: >-
      getDeletedStorageAccounts(string,
      ServiceCallback<DeletedStorageListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedStorageAccounts(vaultBaseUrl: string, callback:
        ServiceCallback<DeletedStorageListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedStorageListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedStorageAccountsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccountsNext'
    name: 'getDeletedStorageAccountsNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Deleted Storage Accounts operation returns the storage accounts
      that have been deleted

      for a vault enabled for soft-delete. This operation requires the
      storage/list permission.
    syntax:
      content: >-
        function getDeletedStorageAccountsNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetDeletedStorageAccountsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccountsNext_2'
    name: >-
      getDeletedStorageAccountsNext(string, RequestOptionsBase,
      ServiceCallback<DeletedStorageListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedStorageAccountsNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeletedStorageListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedStorageListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedStorageAccountsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getDeletedStorageAccountsNext_1'
    name: >-
      getDeletedStorageAccountsNext(string,
      ServiceCallback<DeletedStorageListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getDeletedStorageAccountsNext(nextPageLink: string, callback:
        ServiceCallback<DeletedStorageListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.DeletedStorageListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetDeletedStorageAccountsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKey'
    name: 'getKey(string, string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The get key operation is applicable to all key types. If the requested key
      is symmetric, then no

      key material is released in the response. This operation requires the
      keys/get permission.
    syntax:
      content: >-
        function getKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key to get.
        - id: keyVersion
          type:
            - string
          description: Adding the version parameter retrieves a specific version of a key.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKey_2'
    name: >-
      getKey(string, string, string, RequestOptionsBase,
      ServiceCallback<KeyBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key to get.
        - id: keyVersion
          type:
            - string
          description: Adding the version parameter retrieves a specific version of a key.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKey_1'
    name: 'getKey(string, string, string, ServiceCallback<KeyBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key to get.
        - id: keyVersion
          type:
            - string
          description: Adding the version parameter retrieves a specific version of a key.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKeys_2'
    name: >-
      getKeys(string, KeyVaultClientGetKeysOptionalParams,
      ServiceCallback<KeyListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getKeys(vaultBaseUrl: string, options:
        KeyVaultClientGetKeysOptionalParams, callback:
        ServiceCallback<KeyListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - '@azure/keyvault-secrets.KeyVaultClientGetKeysOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetKeysResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKeys'
    name: 'getKeys(string, Models.KeyVaultClientGetKeysOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieves a list of the keys in the Key Vault as JSON Web Key structures
      that contain the public

      part of a stored key. The LIST operation is applicable to all key types,
      however only the base

      key identifier, attributes, and tags are provided in the response.
      Individual versions of a key

      are not listed in the response. This operation requires the keys/list
      permission.
    syntax:
      content: >-
        function getKeys(vaultBaseUrl: string, options?:
        Models.KeyVaultClientGetKeysOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - Models.KeyVaultClientGetKeysOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetKeysResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKeys_1'
    name: 'getKeys(string, ServiceCallback<KeyListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getKeys(vaultBaseUrl: string, callback:
        ServiceCallback<KeyListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetKeysResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKeysNext'
    name: 'getKeysNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieves a list of the keys in the Key Vault as JSON Web Key structures
      that contain the public

      part of a stored key. The LIST operation is applicable to all key types,
      however only the base

      key identifier, attributes, and tags are provided in the response.
      Individual versions of a key

      are not listed in the response. This operation requires the keys/list
      permission.
    syntax:
      content: >-
        function getKeysNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetKeysNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKeysNext_2'
    name: 'getKeysNext(string, RequestOptionsBase, ServiceCallback<KeyListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getKeysNext(nextPageLink: string, options: RequestOptionsBase,
        callback: ServiceCallback<KeyListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetKeysNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKeysNext_1'
    name: 'getKeysNext(string, ServiceCallback<KeyListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getKeysNext(nextPageLink: string, callback:
        ServiceCallback<KeyListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetKeysNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKeyVersions_2'
    name: >-
      getKeyVersions(string, string, KeyVaultClientGetKeyVersionsOptionalParams,
      ServiceCallback<KeyListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getKeyVersions(vaultBaseUrl: string, keyName: string, options:
        KeyVaultClientGetKeyVersionsOptionalParams, callback:
        ServiceCallback<KeyListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-secrets.KeyVaultClientGetKeyVersionsOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetKeyVersionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKeyVersions'
    name: >-
      getKeyVersions(string, string,
      Models.KeyVaultClientGetKeyVersionsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The full key identifier, attributes, and tags are provided in the
      response. This operation

      requires the keys/list permission.
    syntax:
      content: >-
        function getKeyVersions(vaultBaseUrl: string, keyName: string, options?:
        Models.KeyVaultClientGetKeyVersionsOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - Models.KeyVaultClientGetKeyVersionsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetKeyVersionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKeyVersions_1'
    name: 'getKeyVersions(string, string, ServiceCallback<KeyListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getKeyVersions(vaultBaseUrl: string, keyName: string, callback:
        ServiceCallback<KeyListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetKeyVersionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKeyVersionsNext'
    name: 'getKeyVersionsNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The full key identifier, attributes, and tags are provided in the
      response. This operation

      requires the keys/list permission.
    syntax:
      content: >-
        function getKeyVersionsNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetKeyVersionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKeyVersionsNext_2'
    name: >-
      getKeyVersionsNext(string, RequestOptionsBase,
      ServiceCallback<KeyListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getKeyVersionsNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<KeyListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetKeyVersionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getKeyVersionsNext_1'
    name: 'getKeyVersionsNext(string, ServiceCallback<KeyListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getKeyVersionsNext(nextPageLink: string, callback:
        ServiceCallback<KeyListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetKeyVersionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSasDefinition'
    name: 'getSasDefinition(string, string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets information about a SAS definition for the specified storage account.
      This operation

      requires the storage/getsas permission.
    syntax:
      content: >-
        function getSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSasDefinition_2'
    name: >-
      getSasDefinition(string, string, string, RequestOptionsBase,
      ServiceCallback<SasDefinitionBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, options: RequestOptionsBase,
        callback: ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SasDefinitionBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSasDefinition_1'
    name: >-
      getSasDefinition(string, string, string,
      ServiceCallback<SasDefinitionBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, callback:
        ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SasDefinitionBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSasDefinitions_2'
    name: >-
      getSasDefinitions(string, string,
      KeyVaultClientGetSasDefinitionsOptionalParams,
      ServiceCallback<SasDefinitionListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSasDefinitions(vaultBaseUrl: string, storageAccountName:
        string, options: KeyVaultClientGetSasDefinitionsOptionalParams,
        callback: ServiceCallback<SasDefinitionListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientGetSasDefinitionsOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SasDefinitionListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSasDefinitionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSasDefinitions'
    name: >-
      getSasDefinitions(string, string,
      Models.KeyVaultClientGetSasDefinitionsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List storage SAS definitions for the given storage account. This operation
      requires the

      storage/listsas permission.
    syntax:
      content: >-
        function getSasDefinitions(vaultBaseUrl: string, storageAccountName:
        string, options?: Models.KeyVaultClientGetSasDefinitionsOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - Models.KeyVaultClientGetSasDefinitionsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetSasDefinitionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSasDefinitions_1'
    name: >-
      getSasDefinitions(string, string,
      ServiceCallback<SasDefinitionListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSasDefinitions(vaultBaseUrl: string, storageAccountName:
        string, callback: ServiceCallback<SasDefinitionListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SasDefinitionListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSasDefinitionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSasDefinitionsNext'
    name: 'getSasDefinitionsNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List storage SAS definitions for the given storage account. This operation
      requires the

      storage/listsas permission.
    syntax:
      content: >-
        function getSasDefinitionsNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetSasDefinitionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSasDefinitionsNext_2'
    name: >-
      getSasDefinitionsNext(string, RequestOptionsBase,
      ServiceCallback<SasDefinitionListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSasDefinitionsNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<SasDefinitionListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SasDefinitionListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSasDefinitionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSasDefinitionsNext_1'
    name: 'getSasDefinitionsNext(string, ServiceCallback<SasDefinitionListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSasDefinitionsNext(nextPageLink: string, callback:
        ServiceCallback<SasDefinitionListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SasDefinitionListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSasDefinitionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecret'
    name: 'getSecret(string, string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GET operation is applicable to any secret stored in Azure Key Vault.
      This operation requires

      the secrets/get permission.
    syntax:
      content: >-
        function getSecret(vaultBaseUrl: string, secretName: string,
        secretVersion: string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: secretVersion
          type:
            - string
          description: The version of the secret.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecret_2'
    name: >-
      getSecret(string, string, string, RequestOptionsBase,
      ServiceCallback<SecretBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSecret(vaultBaseUrl: string, secretName: string,
        secretVersion: string, options: RequestOptionsBase, callback:
        ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: secretVersion
          type:
            - string
          description: The version of the secret.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecret_1'
    name: 'getSecret(string, string, string, ServiceCallback<SecretBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSecret(vaultBaseUrl: string, secretName: string,
        secretVersion: string, callback: ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: secretVersion
          type:
            - string
          description: The version of the secret.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecrets_2'
    name: >-
      getSecrets(string, KeyVaultClientGetSecretsOptionalParams,
      ServiceCallback<SecretListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSecrets(vaultBaseUrl: string, options:
        KeyVaultClientGetSecretsOptionalParams, callback:
        ServiceCallback<SecretListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - '@azure/keyvault-secrets.KeyVaultClientGetSecretsOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSecretsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecrets'
    name: 'getSecrets(string, Models.KeyVaultClientGetSecretsOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Secrets operation is applicable to the entire vault. However, only
      the base secret

      identifier and its attributes are provided in the response. Individual
      secret versions are not

      listed in the response. This operation requires the secrets/list
      permission.
    syntax:
      content: >-
        function getSecrets(vaultBaseUrl: string, options?:
        Models.KeyVaultClientGetSecretsOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - Models.KeyVaultClientGetSecretsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetSecretsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecrets_1'
    name: 'getSecrets(string, ServiceCallback<SecretListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSecrets(vaultBaseUrl: string, callback:
        ServiceCallback<SecretListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSecretsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecretsNext'
    name: 'getSecretsNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Secrets operation is applicable to the entire vault. However, only
      the base secret

      identifier and its attributes are provided in the response. Individual
      secret versions are not

      listed in the response. This operation requires the secrets/list
      permission.
    syntax:
      content: >-
        function getSecretsNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetSecretsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecretsNext_2'
    name: >-
      getSecretsNext(string, RequestOptionsBase,
      ServiceCallback<SecretListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSecretsNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<SecretListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSecretsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecretsNext_1'
    name: 'getSecretsNext(string, ServiceCallback<SecretListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSecretsNext(nextPageLink: string, callback:
        ServiceCallback<SecretListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSecretsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecretVersions_2'
    name: >-
      getSecretVersions(string, string,
      KeyVaultClientGetSecretVersionsOptionalParams,
      ServiceCallback<SecretListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSecretVersions(vaultBaseUrl: string, secretName: string,
        options: KeyVaultClientGetSecretVersionsOptionalParams, callback:
        ServiceCallback<SecretListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientGetSecretVersionsOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSecretVersionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecretVersions'
    name: >-
      getSecretVersions(string, string,
      Models.KeyVaultClientGetSecretVersionsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The full secret identifier and attributes are provided in the response. No
      values are returned

      for the secrets. This operations requires the secrets/list permission.
    syntax:
      content: >-
        function getSecretVersions(vaultBaseUrl: string, secretName: string,
        options?: Models.KeyVaultClientGetSecretVersionsOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - Models.KeyVaultClientGetSecretVersionsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetSecretVersionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecretVersions_1'
    name: 'getSecretVersions(string, string, ServiceCallback<SecretListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSecretVersions(vaultBaseUrl: string, secretName: string,
        callback: ServiceCallback<SecretListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSecretVersionsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecretVersionsNext'
    name: 'getSecretVersionsNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The full secret identifier and attributes are provided in the response. No
      values are returned

      for the secrets. This operations requires the secrets/list permission.
    syntax:
      content: >-
        function getSecretVersionsNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetSecretVersionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecretVersionsNext_2'
    name: >-
      getSecretVersionsNext(string, RequestOptionsBase,
      ServiceCallback<SecretListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSecretVersionsNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<SecretListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSecretVersionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getSecretVersionsNext_1'
    name: 'getSecretVersionsNext(string, ServiceCallback<SecretListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSecretVersionsNext(nextPageLink: string, callback:
        ServiceCallback<SecretListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetSecretVersionsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getStorageAccount'
    name: 'getStorageAccount(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets information about a specified storage account. This operation
      requires the storage/get

      permission.
    syntax:
      content: >-
        function getStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getStorageAccount_2'
    name: >-
      getStorageAccount(string, string, RequestOptionsBase,
      ServiceCallback<StorageBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getStorageAccount_1'
    name: 'getStorageAccount(string, string, ServiceCallback<StorageBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getStorageAccounts_2'
    name: >-
      getStorageAccounts(string, KeyVaultClientGetStorageAccountsOptionalParams,
      ServiceCallback<StorageListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getStorageAccounts(vaultBaseUrl: string, options:
        KeyVaultClientGetStorageAccountsOptionalParams, callback:
        ServiceCallback<StorageListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientGetStorageAccountsOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetStorageAccountsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getStorageAccounts'
    name: >-
      getStorageAccounts(string,
      Models.KeyVaultClientGetStorageAccountsOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List storage accounts managed by the specified key vault. This operation
      requires the

      storage/list permission.
    syntax:
      content: >-
        function getStorageAccounts(vaultBaseUrl: string, options?:
        Models.KeyVaultClientGetStorageAccountsOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: options
          type:
            - Models.KeyVaultClientGetStorageAccountsOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetStorageAccountsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getStorageAccounts_1'
    name: 'getStorageAccounts(string, ServiceCallback<StorageListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getStorageAccounts(vaultBaseUrl: string, callback:
        ServiceCallback<StorageListResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetStorageAccountsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getStorageAccountsNext'
    name: 'getStorageAccountsNext(string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      List storage accounts managed by the specified key vault. This operation
      requires the

      storage/list permission.
    syntax:
      content: >-
        function getStorageAccountsNext(nextPageLink: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetStorageAccountsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getStorageAccountsNext_2'
    name: >-
      getStorageAccountsNext(string, RequestOptionsBase,
      ServiceCallback<StorageListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getStorageAccountsNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<StorageListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetStorageAccountsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.getStorageAccountsNext_1'
    name: 'getStorageAccountsNext(string, ServiceCallback<StorageListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getStorageAccountsNext(nextPageLink: string, callback:
        ServiceCallback<StorageListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageListResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.GetStorageAccountsNextResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.importCertificate_2'
    name: >-
      importCertificate(string, string, string,
      KeyVaultClientImportCertificateOptionalParams,
      ServiceCallback<CertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function importCertificate(vaultBaseUrl: string, certificateName:
        string, base64EncodedCertificate: string, options:
        KeyVaultClientImportCertificateOptionalParams, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: base64EncodedCertificate
          type:
            - string
          description: |-
            Base64 encoded representation of the certificate object to
            import. This certificate needs to contain the private key.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientImportCertificateOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.ImportCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.importCertificate'
    name: >-
      importCertificate(string, string, string,
      Models.KeyVaultClientImportCertificateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Imports an existing valid certificate, containing a private key, into
      Azure Key Vault. The

      certificate to be imported can be in either PFX or PEM format. If the
      certificate is in PEM

      format the PEM file must contain the key as well as x509 certificates.
      This operation requires

      the certificates/import permission.
    syntax:
      content: >-
        function importCertificate(vaultBaseUrl: string, certificateName:
        string, base64EncodedCertificate: string, options?:
        Models.KeyVaultClientImportCertificateOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: base64EncodedCertificate
          type:
            - string
          description: |-
            Base64 encoded representation of the certificate object to
            import. This certificate needs to contain the private key.
        - id: options
          type:
            - Models.KeyVaultClientImportCertificateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ImportCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.importCertificate_1'
    name: >-
      importCertificate(string, string, string,
      ServiceCallback<CertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function importCertificate(vaultBaseUrl: string, certificateName:
        string, base64EncodedCertificate: string, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: base64EncodedCertificate
          type:
            - string
          description: |-
            Base64 encoded representation of the certificate object to
            import. This certificate needs to contain the private key.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.ImportCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.importKey_2'
    name: >-
      importKey(string, string, JsonWebKey,
      KeyVaultClientImportKeyOptionalParams, ServiceCallback<KeyBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function importKey(vaultBaseUrl: string, keyName: string, key:
        JsonWebKey, options: KeyVaultClientImportKeyOptionalParams, callback:
        ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: Name for the imported key.
        - id: key
          type:
            - '@azure/keyvault-secrets.JsonWebKey'
          description: The Json web key
        - id: options
          type:
            - '@azure/keyvault-secrets.KeyVaultClientImportKeyOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.ImportKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.importKey'
    name: >-
      importKey(string, string, JsonWebKey,
      Models.KeyVaultClientImportKeyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The import key operation may be used to import any key type into an Azure
      Key Vault. If the

      named key already exists, Azure Key Vault creates a new version of the
      key. This operation

      requires the keys/import permission.
    syntax:
      content: >-
        function importKey(vaultBaseUrl: string, keyName: string, key:
        JsonWebKey, options?: Models.KeyVaultClientImportKeyOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: Name for the imported key.
        - id: key
          type:
            - '@azure/keyvault-secrets.JsonWebKey'
          description: The Json web key
        - id: options
          type:
            - Models.KeyVaultClientImportKeyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ImportKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.importKey_1'
    name: 'importKey(string, string, JsonWebKey, ServiceCallback<KeyBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function importKey(vaultBaseUrl: string, keyName: string, key:
        JsonWebKey, callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: Name for the imported key.
        - id: key
          type:
            - '@azure/keyvault-secrets.JsonWebKey'
          description: The Json web key
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.ImportKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.constructor'
    name: 'KeyVaultClient(TokenCredential, coreArm.AzureServiceClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Initializes a new instance of the KeyVaultClient class.
    syntax:
      content: >-
        new KeyVaultClient(credentials: TokenCredential, options?:
        coreArm.AzureServiceClientOptions)
      parameters:
        - id: credentials
          type:
            - TokenCredential
          description: Credentials needed for the client to connect to Azure.
        - id: options
          type:
            - coreArm.AzureServiceClientOptions
          description: ''
          optional: true
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.longRunningOperationRetryTimeout'
    name: longRunningOperationRetryTimeout
    fullName: longRunningOperationRetryTimeout
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The retry timeout in seconds for Long Running Operations. Default value is
      30.
    optional: true
    syntax:
      content: 'longRunningOperationRetryTimeout?: undefined | number'
      return:
        type:
          - undefined | number
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.mergeCertificate_2'
    name: >-
      mergeCertificate(string, string, Uint8Array[],
      KeyVaultClientMergeCertificateOptionalParams,
      ServiceCallback<CertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function mergeCertificate(vaultBaseUrl: string, certificateName: string,
        x509Certificates: Uint8Array[], options:
        KeyVaultClientMergeCertificateOptionalParams, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: x509Certificates
          type:
            - 'Uint8Array[]'
          description: The certificate or the certificate chain to merge.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientMergeCertificateOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.MergeCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.mergeCertificate'
    name: >-
      mergeCertificate(string, string, Uint8Array[],
      Models.KeyVaultClientMergeCertificateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The MergeCertificate operation performs the merging of a certificate or
      certificate chain with a

      key pair currently available in the service. This operation requires the
      certificates/create

      permission.
    syntax:
      content: >-
        function mergeCertificate(vaultBaseUrl: string, certificateName: string,
        x509Certificates: Uint8Array[], options?:
        Models.KeyVaultClientMergeCertificateOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: x509Certificates
          type:
            - 'Uint8Array[]'
          description: The certificate or the certificate chain to merge.
        - id: options
          type:
            - Models.KeyVaultClientMergeCertificateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.MergeCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.mergeCertificate_1'
    name: >-
      mergeCertificate(string, string, Uint8Array[],
      ServiceCallback<CertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function mergeCertificate(vaultBaseUrl: string, certificateName: string,
        x509Certificates: Uint8Array[], callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: x509Certificates
          type:
            - 'Uint8Array[]'
          description: The certificate or the certificate chain to merge.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.MergeCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedCertificate'
    name: 'purgeDeletedCertificate(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The PurgeDeletedCertificate operation performs an irreversible deletion of
      the specified

      certificate, without possibility for recovery. The operation is not
      available if the recovery

      level does not specify 'Purgeable'. This operation requires the
      certificate/purge permission.
    syntax:
      content: >-
        function purgeDeletedCertificate(vaultBaseUrl: string, certificateName:
        string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedCertificate_2'
    name: >-
      purgeDeletedCertificate(string, string, RequestOptionsBase,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function purgeDeletedCertificate(vaultBaseUrl: string, certificateName:
        string, options: RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedCertificate_1'
    name: 'purgeDeletedCertificate(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function purgeDeletedCertificate(vaultBaseUrl: string, certificateName:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedKey'
    name: 'purgeDeletedKey(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Purge Deleted Key operation is applicable for soft-delete enabled
      vaults. While the

      operation can be invoked on any vault, it will return an error if invoked
      on a non soft-delete

      enabled vault. This operation requires the keys/purge permission.
    syntax:
      content: >-
        function purgeDeletedKey(vaultBaseUrl: string, keyName: string,
        options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedKey_2'
    name: 'purgeDeletedKey(string, string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function purgeDeletedKey(vaultBaseUrl: string, keyName: string, options:
        RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedKey_1'
    name: 'purgeDeletedKey(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function purgeDeletedKey(vaultBaseUrl: string, keyName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedSecret'
    name: 'purgeDeletedSecret(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The purge deleted secret operation removes the secret permanently, without
      the possibility of

      recovery. This operation can only be enabled on a soft-delete enabled
      vault. This operation

      requires the secrets/purge permission.
    syntax:
      content: >-
        function purgeDeletedSecret(vaultBaseUrl: string, secretName: string,
        options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedSecret_2'
    name: >-
      purgeDeletedSecret(string, string, RequestOptionsBase,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function purgeDeletedSecret(vaultBaseUrl: string, secretName: string,
        options: RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedSecret_1'
    name: 'purgeDeletedSecret(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function purgeDeletedSecret(vaultBaseUrl: string, secretName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedStorageAccount'
    name: 'purgeDeletedStorageAccount(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The purge deleted storage account operation removes the secret
      permanently, without the

      possibility of recovery. This operation can only be performed on a
      soft-delete enabled vault.

      This operation requires the storage/purge permission.
    syntax:
      content: >-
        function purgeDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedStorageAccount_2'
    name: >-
      purgeDeletedStorageAccount(string, string, RequestOptionsBase,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function purgeDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, options: RequestOptionsBase, callback:
        ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.purgeDeletedStorageAccount_1'
    name: 'purgeDeletedStorageAccount(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function purgeDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, callback: ServiceCallback<void>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedCertificate'
    name: 'recoverDeletedCertificate(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The RecoverDeletedCertificate operation performs the reversal of the
      Delete operation. The

      operation is applicable in vaults enabled for soft-delete, and must be
      issued during the

      retention interval (available in the deleted certificate's attributes).
      This operation requires

      the certificates/recover permission.
    syntax:
      content: >-
        function recoverDeletedCertificate(vaultBaseUrl: string,
        certificateName: string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the deleted certificate
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RecoverDeletedCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedCertificate_2'
    name: >-
      recoverDeletedCertificate(string, string, RequestOptionsBase,
      ServiceCallback<CertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverDeletedCertificate(vaultBaseUrl: string,
        certificateName: string, options: RequestOptionsBase, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the deleted certificate
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RecoverDeletedCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedCertificate_1'
    name: >-
      recoverDeletedCertificate(string, string,
      ServiceCallback<CertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverDeletedCertificate(vaultBaseUrl: string,
        certificateName: string, callback: ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the deleted certificate
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RecoverDeletedCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedKey'
    name: 'recoverDeletedKey(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Recover Deleted Key operation is applicable for deleted keys in
      soft-delete enabled vaults.

      It recovers the deleted key back to its latest version under /keys. An
      attempt to recover an

      non-deleted key will return an error. Consider this the inverse of the
      delete operation on

      soft-delete enabled vaults. This operation requires the keys/recover
      permission.
    syntax:
      content: >-
        function recoverDeletedKey(vaultBaseUrl: string, keyName: string,
        options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the deleted key.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RecoverDeletedKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedKey_2'
    name: >-
      recoverDeletedKey(string, string, RequestOptionsBase,
      ServiceCallback<KeyBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverDeletedKey(vaultBaseUrl: string, keyName: string,
        options: RequestOptionsBase, callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the deleted key.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RecoverDeletedKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedKey_1'
    name: 'recoverDeletedKey(string, string, ServiceCallback<KeyBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverDeletedKey(vaultBaseUrl: string, keyName: string,
        callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the deleted key.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RecoverDeletedKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedSasDefinition'
    name: >-
      recoverDeletedSasDefinition(string, string, string,
      coreHttp.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recovers the deleted SAS definition for the specified storage account.
      This operation can only

      be performed on a soft-delete enabled vault. This operation requires the
      storage/recover

      permission.
    syntax:
      content: >-
        function recoverDeletedSasDefinition(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RecoverDeletedSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedSasDefinition_2'
    name: >-
      recoverDeletedSasDefinition(string, string, string, RequestOptionsBase,
      ServiceCallback<SasDefinitionBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverDeletedSasDefinition(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, options:
        RequestOptionsBase, callback: ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SasDefinitionBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RecoverDeletedSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedSasDefinition_1'
    name: >-
      recoverDeletedSasDefinition(string, string, string,
      ServiceCallback<SasDefinitionBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverDeletedSasDefinition(vaultBaseUrl: string,
        storageAccountName: string, sasDefinitionName: string, callback:
        ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SasDefinitionBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RecoverDeletedSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedSecret'
    name: 'recoverDeletedSecret(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recovers the deleted secret in the specified vault. This operation can
      only be performed on a

      soft-delete enabled vault. This operation requires the secrets/recover
      permission.
    syntax:
      content: >-
        function recoverDeletedSecret(vaultBaseUrl: string, secretName: string,
        options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the deleted secret.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RecoverDeletedSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedSecret_2'
    name: >-
      recoverDeletedSecret(string, string, RequestOptionsBase,
      ServiceCallback<SecretBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverDeletedSecret(vaultBaseUrl: string, secretName: string,
        options: RequestOptionsBase, callback: ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the deleted secret.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RecoverDeletedSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedSecret_1'
    name: 'recoverDeletedSecret(string, string, ServiceCallback<SecretBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverDeletedSecret(vaultBaseUrl: string, secretName: string,
        callback: ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the deleted secret.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RecoverDeletedSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedStorageAccount'
    name: 'recoverDeletedStorageAccount(string, string, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recovers the deleted storage account in the specified vault. This
      operation can only be

      performed on a soft-delete enabled vault. This operation requires the
      storage/recover

      permission.
    syntax:
      content: >-
        function recoverDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RecoverDeletedStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedStorageAccount_2'
    name: >-
      recoverDeletedStorageAccount(string, string, RequestOptionsBase,
      ServiceCallback<StorageBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, options: RequestOptionsBase, callback:
        ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RecoverDeletedStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.recoverDeletedStorageAccount_1'
    name: >-
      recoverDeletedStorageAccount(string, string,
      ServiceCallback<StorageBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recoverDeletedStorageAccount(vaultBaseUrl: string,
        storageAccountName: string, callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RecoverDeletedStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.regenerateStorageAccountKey'
    name: >-
      regenerateStorageAccountKey(string, string, string,
      coreHttp.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Regenerates the specified key value for the given storage account. This
      operation requires the

      storage/regeneratekey permission.
    syntax:
      content: >-
        function regenerateStorageAccountKey(vaultBaseUrl: string,
        storageAccountName: string, keyName: string, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: keyName
          type:
            - string
          description: The storage account key name.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RegenerateStorageAccountKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.regenerateStorageAccountKey_2'
    name: >-
      regenerateStorageAccountKey(string, string, string, RequestOptionsBase,
      ServiceCallback<StorageBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function regenerateStorageAccountKey(vaultBaseUrl: string,
        storageAccountName: string, keyName: string, options:
        RequestOptionsBase, callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: keyName
          type:
            - string
          description: The storage account key name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RegenerateStorageAccountKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.regenerateStorageAccountKey_1'
    name: >-
      regenerateStorageAccountKey(string, string, string,
      ServiceCallback<StorageBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function regenerateStorageAccountKey(vaultBaseUrl: string,
        storageAccountName: string, keyName: string, callback:
        ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: keyName
          type:
            - string
          description: The storage account key name.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RegenerateStorageAccountKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.restoreCertificate'
    name: 'restoreCertificate(string, Uint8Array, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restores a backed up certificate, and all its versions, to a vault. This
      operation requires the

      certificates/restore permission.
    syntax:
      content: >-
        function restoreCertificate(vaultBaseUrl: string,
        certificateBundleBackup: Uint8Array, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a certificate bundle.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RestoreCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.restoreCertificate_2'
    name: >-
      restoreCertificate(string, Uint8Array, RequestOptionsBase,
      ServiceCallback<CertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restoreCertificate(vaultBaseUrl: string,
        certificateBundleBackup: Uint8Array, options: RequestOptionsBase,
        callback: ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a certificate bundle.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RestoreCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.restoreCertificate_1'
    name: 'restoreCertificate(string, Uint8Array, ServiceCallback<CertificateBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restoreCertificate(vaultBaseUrl: string,
        certificateBundleBackup: Uint8Array, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a certificate bundle.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RestoreCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.restoreKey'
    name: 'restoreKey(string, Uint8Array, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Imports a previously backed up key into Azure Key Vault, restoring the
      key, its key identifier,

      attributes and access control policies. The RESTORE operation may be used
      to import a previously

      backed up key. Individual versions of a key cannot be restored. The key is
      restored in its

      entirety with the same key name as it had when it was backed up. If the
      key name is not

      available in the target Key Vault, the RESTORE operation will be rejected.
      While the key name is

      retained during restore, the final key identifier will change if the key
      is restored to a

      different vault. Restore will restore all versions and preserve version
      identifiers. The RESTORE

      operation is subject to security constraints: The target Key Vault must be
      owned by the same

      Microsoft Azure Subscription as the source Key Vault The user must have
      RESTORE permission in

      the target Key Vault. This operation requires the keys/restore permission.
    syntax:
      content: >-
        function restoreKey(vaultBaseUrl: string, keyBundleBackup: Uint8Array,
        options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a key bundle.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RestoreKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.restoreKey_2'
    name: >-
      restoreKey(string, Uint8Array, RequestOptionsBase,
      ServiceCallback<KeyBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restoreKey(vaultBaseUrl: string, keyBundleBackup: Uint8Array,
        options: RequestOptionsBase, callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a key bundle.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RestoreKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.restoreKey_1'
    name: 'restoreKey(string, Uint8Array, ServiceCallback<KeyBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restoreKey(vaultBaseUrl: string, keyBundleBackup: Uint8Array,
        callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a key bundle.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RestoreKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.restoreLROPoller'
    name: restoreLROPoller(LROPollState)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restore an LROPoller from the provided LROPollState. This method can be
      used to recreate an

      LROPoller on a different process or machine.
    syntax:
      content: 'function restoreLROPoller(lroPollState: LROPollState)'
      parameters:
        - id: lroPollState
          type:
            - LROPollState
          description: ''
      return:
        type:
          - LROPoller
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.restoreSecret'
    name: 'restoreSecret(string, Uint8Array, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restores a backed up secret, and all its versions, to a vault. This
      operation requires the

      secrets/restore permission.
    syntax:
      content: >-
        function restoreSecret(vaultBaseUrl: string, secretBundleBackup:
        Uint8Array, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a secret bundle.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RestoreSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.restoreSecret_2'
    name: >-
      restoreSecret(string, Uint8Array, RequestOptionsBase,
      ServiceCallback<SecretBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restoreSecret(vaultBaseUrl: string, secretBundleBackup:
        Uint8Array, options: RequestOptionsBase, callback:
        ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a secret bundle.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RestoreSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.restoreSecret_1'
    name: 'restoreSecret(string, Uint8Array, ServiceCallback<SecretBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restoreSecret(vaultBaseUrl: string, secretBundleBackup:
        Uint8Array, callback: ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a secret bundle.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RestoreSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.restoreStorageAccount'
    name: 'restoreStorageAccount(string, Uint8Array, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restores a backed up storage account to a vault. This operation requires
      the storage/restore

      permission.
    syntax:
      content: >-
        function restoreStorageAccount(vaultBaseUrl: string,
        storageBundleBackup: Uint8Array, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a storage account.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RestoreStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.restoreStorageAccount_2'
    name: >-
      restoreStorageAccount(string, Uint8Array, RequestOptionsBase,
      ServiceCallback<StorageBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restoreStorageAccount(vaultBaseUrl: string,
        storageBundleBackup: Uint8Array, options: RequestOptionsBase, callback:
        ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a storage account.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RestoreStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.restoreStorageAccount_1'
    name: 'restoreStorageAccount(string, Uint8Array, ServiceCallback<StorageBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function restoreStorageAccount(vaultBaseUrl: string,
        storageBundleBackup: Uint8Array, callback:
        ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a storage account.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.RestoreStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.sendLongRunningRequest'
    name: >-
      sendLongRunningRequest(RequestPrepareOptions | WebResource,
      RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides a mechanism to make a request that will poll and provide the
      final result.
    syntax:
      content: >-
        function sendLongRunningRequest(request: RequestPrepareOptions |
        WebResource, options?: RequestOptionsBase)
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: The request object
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.sendLRORequest'
    name: 'sendLRORequest(OperationArguments, OperationSpec, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Send the initial request of a LRO (long running operation) and get back an

      LROPoller that provides methods for polling the LRO and checking if the
      LRO is finished.
    syntax:
      content: >-
        function sendLRORequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, options?: RequestOptionsBase)
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: The arguments to the operation.
        - id: operationSpec
          type:
            - OperationSpec
          description: The specification for the operation.
        - id: options
          type:
            - RequestOptionsBase
          description: Additional options to be sent while making the request.
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.sendOperationRequest'
    name: >-
      sendOperationRequest(OperationArguments, OperationSpec,
      ServiceCallback<any>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Send an HTTP request that is populated using the provided OperationSpec.
    syntax:
      content: >-
        function sendOperationRequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, callback?: ServiceCallback<any>)
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: >-
            The arguments that the HTTP request's templated values will be
            populated from.
        - id: operationSpec
          type:
            - OperationSpec
          description: The OperationSpec to use to populate the httpRequest.
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            The callback to call when the response is received.
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResource)
    children: []
    type: method
    langs:
      - typeScript
    summary: Send the provided httpRequest.
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResource)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResource
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setCertificateContacts'
    name: 'setCertificateContacts(string, Contacts, coreHttp.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the certificate contacts for the specified key vault. This operation
      requires the

      certificates/managecontacts permission.
    syntax:
      content: >-
        function setCertificateContacts(vaultBaseUrl: string, contacts:
        Contacts, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: contacts
          type:
            - '@azure/keyvault-secrets.Contacts'
          description: The contacts for the key vault certificate.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SetCertificateContactsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setCertificateContacts_2'
    name: >-
      setCertificateContacts(string, Contacts, RequestOptionsBase,
      ServiceCallback<Contacts>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setCertificateContacts(vaultBaseUrl: string, contacts:
        Contacts, options: RequestOptionsBase, callback:
        ServiceCallback<Contacts>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: contacts
          type:
            - '@azure/keyvault-secrets.Contacts'
          description: The contacts for the key vault certificate.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.Contacts>
          description: |
            The callback
      return:
        type:
          - Promise<Models.SetCertificateContactsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setCertificateContacts_1'
    name: 'setCertificateContacts(string, Contacts, ServiceCallback<Contacts>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setCertificateContacts(vaultBaseUrl: string, contacts:
        Contacts, callback: ServiceCallback<Contacts>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: contacts
          type:
            - '@azure/keyvault-secrets.Contacts'
          description: The contacts for the key vault certificate.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.Contacts>
          description: |
            The callback
      return:
        type:
          - Promise<Models.SetCertificateContactsResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setCertificateIssuer_2'
    name: >-
      setCertificateIssuer(string, string, string,
      KeyVaultClientSetCertificateIssuerOptionalParams,
      ServiceCallback<IssuerBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setCertificateIssuer(vaultBaseUrl: string, issuerName: string,
        provider: string, options:
        KeyVaultClientSetCertificateIssuerOptionalParams, callback:
        ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: provider
          type:
            - string
          description: The issuer provider.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientSetCertificateIssuerOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.IssuerBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.SetCertificateIssuerResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setCertificateIssuer'
    name: >-
      setCertificateIssuer(string, string, string,
      Models.KeyVaultClientSetCertificateIssuerOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The SetCertificateIssuer operation adds or updates the specified
      certificate issuer. This

      operation requires the certificates/setissuers permission.
    syntax:
      content: >-
        function setCertificateIssuer(vaultBaseUrl: string, issuerName: string,
        provider: string, options?:
        Models.KeyVaultClientSetCertificateIssuerOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: provider
          type:
            - string
          description: The issuer provider.
        - id: options
          type:
            - Models.KeyVaultClientSetCertificateIssuerOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SetCertificateIssuerResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setCertificateIssuer_1'
    name: >-
      setCertificateIssuer(string, string, string,
      ServiceCallback<IssuerBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setCertificateIssuer(vaultBaseUrl: string, issuerName: string,
        provider: string, callback: ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: provider
          type:
            - string
          description: The issuer provider.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.IssuerBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.SetCertificateIssuerResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setSasDefinition_2'
    name: >-
      setSasDefinition(string, string, string, string, Models.SasTokenType,
      string, KeyVaultClientSetSasDefinitionOptionalParams,
      ServiceCallback<SasDefinitionBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, templateUri: string, sasType:
        Models.SasTokenType, validityPeriod: string, options:
        KeyVaultClientSetSasDefinitionOptionalParams, callback:
        ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: templateUri
          type:
            - string
          description: >-
            The SAS definition token template signed with an arbitrary key. 
            Tokens

            created according to the SAS definition will have the same
            properties as the template.
        - id: sasType
          type:
            - Models.SasTokenType
          description: >-
            The type of SAS token the SAS definition will create. Possible
            values include:

            'account', 'service'
        - id: validityPeriod
          type:
            - string
          description: >-
            The validity period of SAS tokens created according to the SAS
            definition.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientSetSasDefinitionOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SasDefinitionBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.SetSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setSasDefinition'
    name: >-
      setSasDefinition(string, string, string, string, Models.SasTokenType,
      string, Models.KeyVaultClientSetSasDefinitionOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates or updates a new SAS definition for the specified storage account.
      This operation

      requires the storage/setsas permission.
    syntax:
      content: >-
        function setSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, templateUri: string, sasType:
        Models.SasTokenType, validityPeriod: string, options?:
        Models.KeyVaultClientSetSasDefinitionOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: templateUri
          type:
            - string
          description: >-
            The SAS definition token template signed with an arbitrary key. 
            Tokens

            created according to the SAS definition will have the same
            properties as the template.
        - id: sasType
          type:
            - Models.SasTokenType
          description: >-
            The type of SAS token the SAS definition will create. Possible
            values include:

            'account', 'service'
        - id: validityPeriod
          type:
            - string
          description: >-
            The validity period of SAS tokens created according to the SAS
            definition.
        - id: options
          type:
            - Models.KeyVaultClientSetSasDefinitionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SetSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setSasDefinition_1'
    name: >-
      setSasDefinition(string, string, string, string, Models.SasTokenType,
      string, ServiceCallback<SasDefinitionBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, templateUri: string, sasType:
        Models.SasTokenType, validityPeriod: string, callback:
        ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: templateUri
          type:
            - string
          description: >-
            The SAS definition token template signed with an arbitrary key. 
            Tokens

            created according to the SAS definition will have the same
            properties as the template.
        - id: sasType
          type:
            - Models.SasTokenType
          description: >-
            The type of SAS token the SAS definition will create. Possible
            values include:

            'account', 'service'
        - id: validityPeriod
          type:
            - string
          description: >-
            The validity period of SAS tokens created according to the SAS
            definition.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SasDefinitionBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.SetSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setSecret_2'
    name: >-
      setSecret(string, string, string, KeyVaultClientSetSecretOptionalParams,
      ServiceCallback<SecretBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setSecret(vaultBaseUrl: string, secretName: string, value:
        string, options: KeyVaultClientSetSecretOptionalParams, callback:
        ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: value
          type:
            - string
          description: The value of the secret.
        - id: options
          type:
            - '@azure/keyvault-secrets.KeyVaultClientSetSecretOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.SetSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setSecret'
    name: >-
      setSecret(string, string, string,
      Models.KeyVaultClientSetSecretOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The SET operation adds a secret to the Azure Key Vault. If the named
      secret already exists,

      Azure Key Vault creates a new version of that secret. This operation
      requires the secrets/set

      permission.
    syntax:
      content: >-
        function setSecret(vaultBaseUrl: string, secretName: string, value:
        string, options?: Models.KeyVaultClientSetSecretOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: value
          type:
            - string
          description: The value of the secret.
        - id: options
          type:
            - Models.KeyVaultClientSetSecretOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SetSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setSecret_1'
    name: 'setSecret(string, string, string, ServiceCallback<SecretBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setSecret(vaultBaseUrl: string, secretName: string, value:
        string, callback: ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: value
          type:
            - string
          description: The value of the secret.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.SetSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setStorageAccount_2'
    name: >-
      setStorageAccount(string, string, string, string, boolean,
      KeyVaultClientSetStorageAccountOptionalParams,
      ServiceCallback<StorageBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, resourceId: string, activeKeyName: string, autoRegenerateKey:
        boolean, options: KeyVaultClientSetStorageAccountOptionalParams,
        callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: resourceId
          type:
            - string
          description: Storage account resource id.
        - id: activeKeyName
          type:
            - string
          description: Current active storage account key name.
        - id: autoRegenerateKey
          type:
            - boolean
          description: whether keyvault should manage the storage account for the user.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientSetStorageAccountOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.SetStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setStorageAccount'
    name: >-
      setStorageAccount(string, string, string, string, boolean,
      Models.KeyVaultClientSetStorageAccountOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates or updates a new storage account. This operation requires the
      storage/set permission.
    syntax:
      content: >-
        function setStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, resourceId: string, activeKeyName: string, autoRegenerateKey:
        boolean, options?: Models.KeyVaultClientSetStorageAccountOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: resourceId
          type:
            - string
          description: Storage account resource id.
        - id: activeKeyName
          type:
            - string
          description: Current active storage account key name.
        - id: autoRegenerateKey
          type:
            - boolean
          description: whether keyvault should manage the storage account for the user.
        - id: options
          type:
            - Models.KeyVaultClientSetStorageAccountOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SetStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.setStorageAccount_1'
    name: >-
      setStorageAccount(string, string, string, string, boolean,
      ServiceCallback<StorageBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, resourceId: string, activeKeyName: string, autoRegenerateKey:
        boolean, callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: resourceId
          type:
            - string
          description: Storage account resource id.
        - id: activeKeyName
          type:
            - string
          description: Current active storage account key name.
        - id: autoRegenerateKey
          type:
            - boolean
          description: whether keyvault should manage the storage account for the user.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.SetStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.sign'
    name: >-
      sign(string, string, string, Models.JsonWebKeySignatureAlgorithm,
      Uint8Array, coreHttp.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The SIGN operation is applicable to asymmetric and symmetric keys stored
      in Azure Key Vault

      since this operation uses the private portion of the key. This operation
      requires the keys/sign

      permission.
    syntax:
      content: >-
        function sign(vaultBaseUrl: string, keyName: string, keyVersion: string,
        algorithm: Models.JsonWebKeySignatureAlgorithm, value: Uint8Array,
        options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeySignatureAlgorithm
          description: >-
            The signing/verification algorithm identifier. For more information
            on possible

            algorithm types, see JsonWebKeySignatureAlgorithm. Possible values
            include: 'PS256', 'PS384',

            'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384',
            'ES512', 'ES256K'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SignResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.sign_2'
    name: >-
      sign(string, string, string, Models.JsonWebKeySignatureAlgorithm,
      Uint8Array, RequestOptionsBase, ServiceCallback<KeyOperationResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sign(vaultBaseUrl: string, keyName: string, keyVersion: string,
        algorithm: Models.JsonWebKeySignatureAlgorithm, value: Uint8Array,
        options: RequestOptionsBase, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeySignatureAlgorithm
          description: >-
            The signing/verification algorithm identifier. For more information
            on possible

            algorithm types, see JsonWebKeySignatureAlgorithm. Possible values
            include: 'PS256', 'PS384',

            'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384',
            'ES512', 'ES256K'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyOperationResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.SignResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.sign_1'
    name: >-
      sign(string, string, string, Models.JsonWebKeySignatureAlgorithm,
      Uint8Array, ServiceCallback<KeyOperationResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sign(vaultBaseUrl: string, keyName: string, keyVersion: string,
        algorithm: Models.JsonWebKeySignatureAlgorithm, value: Uint8Array,
        callback: ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeySignatureAlgorithm
          description: >-
            The signing/verification algorithm identifier. For more information
            on possible

            algorithm types, see JsonWebKeySignatureAlgorithm. Possible values
            include: 'PS256', 'PS384',

            'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384',
            'ES512', 'ES256K'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyOperationResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.SignResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.unwrapKey'
    name: >-
      unwrapKey(string, string, string, Models.JsonWebKeyEncryptionAlgorithm,
      Uint8Array, coreHttp.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The UNWRAP operation supports decryption of a symmetric key using the
      target key encryption key.

      This operation is the reverse of the WRAP operation. The UNWRAP operation
      applies to asymmetric

      and symmetric keys stored in Azure Key Vault since it uses the private
      portion of the key. This

      operation requires the keys/unwrapKey permission.
    syntax:
      content: >-
        function unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value:
        Uint8Array, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeyEncryptionAlgorithm
          description: >-
            algorithm identifier. Possible values include: 'RSA-OAEP',
            'RSA-OAEP-256',

            'RSA1_5'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UnwrapKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.unwrapKey_2'
    name: >-
      unwrapKey(string, string, string, Models.JsonWebKeyEncryptionAlgorithm,
      Uint8Array, RequestOptionsBase, ServiceCallback<KeyOperationResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value:
        Uint8Array, options: RequestOptionsBase, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeyEncryptionAlgorithm
          description: >-
            algorithm identifier. Possible values include: 'RSA-OAEP',
            'RSA-OAEP-256',

            'RSA1_5'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyOperationResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UnwrapKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.unwrapKey_1'
    name: >-
      unwrapKey(string, string, string, Models.JsonWebKeyEncryptionAlgorithm,
      Uint8Array, ServiceCallback<KeyOperationResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value:
        Uint8Array, callback: ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeyEncryptionAlgorithm
          description: >-
            algorithm identifier. Possible values include: 'RSA-OAEP',
            'RSA-OAEP-256',

            'RSA1_5'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyOperationResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UnwrapKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateCertificate_2'
    name: >-
      updateCertificate(string, string, string,
      KeyVaultClientUpdateCertificateOptionalParams,
      ServiceCallback<CertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateCertificate(vaultBaseUrl: string, certificateName:
        string, certificateVersion: string, options:
        KeyVaultClientUpdateCertificateOptionalParams, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate in the given key vault.
        - id: certificateVersion
          type:
            - string
          description: The version of the certificate.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientUpdateCertificateOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateCertificate'
    name: >-
      updateCertificate(string, string, string,
      Models.KeyVaultClientUpdateCertificateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The UpdateCertificate operation applies the specified update on the given
      certificate; the only

      elements updated are the certificate's attributes. This operation requires
      the

      certificates/update permission.
    syntax:
      content: >-
        function updateCertificate(vaultBaseUrl: string, certificateName:
        string, certificateVersion: string, options?:
        Models.KeyVaultClientUpdateCertificateOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate in the given key vault.
        - id: certificateVersion
          type:
            - string
          description: The version of the certificate.
        - id: options
          type:
            - Models.KeyVaultClientUpdateCertificateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UpdateCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateCertificate_1'
    name: >-
      updateCertificate(string, string, string,
      ServiceCallback<CertificateBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateCertificate(vaultBaseUrl: string, certificateName:
        string, certificateVersion: string, callback:
        ServiceCallback<CertificateBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate in the given key vault.
        - id: certificateVersion
          type:
            - string
          description: The version of the certificate.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateCertificateResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateCertificateIssuer_2'
    name: >-
      updateCertificateIssuer(string, string,
      KeyVaultClientUpdateCertificateIssuerOptionalParams,
      ServiceCallback<IssuerBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateCertificateIssuer(vaultBaseUrl: string, issuerName:
        string, options: KeyVaultClientUpdateCertificateIssuerOptionalParams,
        callback: ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientUpdateCertificateIssuerOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.IssuerBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateCertificateIssuerResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateCertificateIssuer'
    name: >-
      updateCertificateIssuer(string, string,
      Models.KeyVaultClientUpdateCertificateIssuerOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The UpdateCertificateIssuer operation performs an update on the specified
      certificate issuer

      entity. This operation requires the certificates/setissuers permission.
    syntax:
      content: >-
        function updateCertificateIssuer(vaultBaseUrl: string, issuerName:
        string, options?:
        Models.KeyVaultClientUpdateCertificateIssuerOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: options
          type:
            - Models.KeyVaultClientUpdateCertificateIssuerOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UpdateCertificateIssuerResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateCertificateIssuer_1'
    name: 'updateCertificateIssuer(string, string, ServiceCallback<IssuerBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateCertificateIssuer(vaultBaseUrl: string, issuerName:
        string, callback: ServiceCallback<IssuerBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.IssuerBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateCertificateIssuerResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateCertificateOperation'
    name: >-
      updateCertificateOperation(string, string, boolean,
      coreHttp.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Updates a certificate creation operation that is already in progress. This
      operation requires

      the certificates/update permission.
    syntax:
      content: >-
        function updateCertificateOperation(vaultBaseUrl: string,
        certificateName: string, cancellationRequested: boolean, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: cancellationRequested
          type:
            - boolean
          description: |-
            Indicates if cancellation was requested on the certificate
            operation.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UpdateCertificateOperationResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateCertificateOperation_2'
    name: >-
      updateCertificateOperation(string, string, boolean, RequestOptionsBase,
      ServiceCallback<CertificateOperation>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateCertificateOperation(vaultBaseUrl: string,
        certificateName: string, cancellationRequested: boolean, options:
        RequestOptionsBase, callback: ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: cancellationRequested
          type:
            - boolean
          description: |-
            Indicates if cancellation was requested on the certificate
            operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateOperation>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateCertificateOperationResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateCertificateOperation_1'
    name: >-
      updateCertificateOperation(string, string, boolean,
      ServiceCallback<CertificateOperation>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateCertificateOperation(vaultBaseUrl: string,
        certificateName: string, cancellationRequested: boolean, callback:
        ServiceCallback<CertificateOperation>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: cancellationRequested
          type:
            - boolean
          description: |-
            Indicates if cancellation was requested on the certificate
            operation.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificateOperation>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateCertificateOperationResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateCertificatePolicy'
    name: >-
      updateCertificatePolicy(string, string, CertificatePolicy,
      coreHttp.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Set specified members in the certificate policy. Leave others as null.
      This operation requires

      the certificates/update permission.
    syntax:
      content: >-
        function updateCertificatePolicy(vaultBaseUrl: string, certificateName:
        string, certificatePolicy: CertificatePolicy, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate in the given vault.
        - id: certificatePolicy
          type:
            - '@azure/keyvault-secrets.CertificatePolicy'
          description: The policy for the certificate.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UpdateCertificatePolicyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateCertificatePolicy_2'
    name: >-
      updateCertificatePolicy(string, string, CertificatePolicy,
      RequestOptionsBase, ServiceCallback<CertificatePolicy>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateCertificatePolicy(vaultBaseUrl: string, certificateName:
        string, certificatePolicy: CertificatePolicy, options:
        RequestOptionsBase, callback: ServiceCallback<CertificatePolicy>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate in the given vault.
        - id: certificatePolicy
          type:
            - '@azure/keyvault-secrets.CertificatePolicy'
          description: The policy for the certificate.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificatePolicy>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateCertificatePolicyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateCertificatePolicy_1'
    name: >-
      updateCertificatePolicy(string, string, CertificatePolicy,
      ServiceCallback<CertificatePolicy>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateCertificatePolicy(vaultBaseUrl: string, certificateName:
        string, certificatePolicy: CertificatePolicy, callback:
        ServiceCallback<CertificatePolicy>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: certificateName
          type:
            - string
          description: The name of the certificate in the given vault.
        - id: certificatePolicy
          type:
            - '@azure/keyvault-secrets.CertificatePolicy'
          description: The policy for the certificate.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.CertificatePolicy>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateCertificatePolicyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateKey_2'
    name: >-
      updateKey(string, string, string, KeyVaultClientUpdateKeyOptionalParams,
      ServiceCallback<KeyBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, options: KeyVaultClientUpdateKeyOptionalParams, callback:
        ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of key to update.
        - id: keyVersion
          type:
            - string
          description: The version of the key to update.
        - id: options
          type:
            - '@azure/keyvault-secrets.KeyVaultClientUpdateKeyOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateKey'
    name: >-
      updateKey(string, string, string,
      Models.KeyVaultClientUpdateKeyOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      In order to perform this operation, the key must already exist in the Key
      Vault. Note: The

      cryptographic material of a key itself cannot be changed. This operation
      requires the

      keys/update permission.
    syntax:
      content: >-
        function updateKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, options?: Models.KeyVaultClientUpdateKeyOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of key to update.
        - id: keyVersion
          type:
            - string
          description: The version of the key to update.
        - id: options
          type:
            - Models.KeyVaultClientUpdateKeyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UpdateKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateKey_1'
    name: 'updateKey(string, string, string, ServiceCallback<KeyBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, callback: ServiceCallback<KeyBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of key to update.
        - id: keyVersion
          type:
            - string
          description: The version of the key to update.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateSasDefinition_2'
    name: >-
      updateSasDefinition(string, string, string,
      KeyVaultClientUpdateSasDefinitionOptionalParams,
      ServiceCallback<SasDefinitionBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, options:
        KeyVaultClientUpdateSasDefinitionOptionalParams, callback:
        ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientUpdateSasDefinitionOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SasDefinitionBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateSasDefinition'
    name: >-
      updateSasDefinition(string, string, string,
      Models.KeyVaultClientUpdateSasDefinitionOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Updates the specified attributes associated with the given SAS definition.
      This operation

      requires the storage/setsas permission.
    syntax:
      content: >-
        function updateSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, options?:
        Models.KeyVaultClientUpdateSasDefinitionOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: options
          type:
            - Models.KeyVaultClientUpdateSasDefinitionOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UpdateSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateSasDefinition_1'
    name: >-
      updateSasDefinition(string, string, string,
      ServiceCallback<SasDefinitionBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateSasDefinition(vaultBaseUrl: string, storageAccountName:
        string, sasDefinitionName: string, callback:
        ServiceCallback<SasDefinitionBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: sasDefinitionName
          type:
            - string
          description: The name of the SAS definition.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SasDefinitionBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateSasDefinitionResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateSecret_2'
    name: >-
      updateSecret(string, string, string,
      KeyVaultClientUpdateSecretOptionalParams, ServiceCallback<SecretBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateSecret(vaultBaseUrl: string, secretName: string,
        secretVersion: string, options:
        KeyVaultClientUpdateSecretOptionalParams, callback:
        ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: secretVersion
          type:
            - string
          description: The version of the secret.
        - id: options
          type:
            - '@azure/keyvault-secrets.KeyVaultClientUpdateSecretOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateSecret'
    name: >-
      updateSecret(string, string, string,
      Models.KeyVaultClientUpdateSecretOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The UPDATE operation changes specified attributes of an existing stored
      secret. Attributes that

      are not specified in the request are left unchanged. The value of a secret
      itself cannot be

      changed. This operation requires the secrets/set permission.
    syntax:
      content: >-
        function updateSecret(vaultBaseUrl: string, secretName: string,
        secretVersion: string, options?:
        Models.KeyVaultClientUpdateSecretOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: secretVersion
          type:
            - string
          description: The version of the secret.
        - id: options
          type:
            - Models.KeyVaultClientUpdateSecretOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UpdateSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateSecret_1'
    name: 'updateSecret(string, string, string, ServiceCallback<SecretBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateSecret(vaultBaseUrl: string, secretName: string,
        secretVersion: string, callback: ServiceCallback<SecretBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: secretVersion
          type:
            - string
          description: The version of the secret.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.SecretBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateSecretResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateStorageAccount_2'
    name: >-
      updateStorageAccount(string, string,
      KeyVaultClientUpdateStorageAccountOptionalParams,
      ServiceCallback<StorageBundle>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options: KeyVaultClientUpdateStorageAccountOptionalParams,
        callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - >-
              @azure/keyvault-secrets.KeyVaultClientUpdateStorageAccountOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateStorageAccount'
    name: >-
      updateStorageAccount(string, string,
      Models.KeyVaultClientUpdateStorageAccountOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Updates the specified attributes associated with the given storage
      account. This operation

      requires the storage/set/update permission.
    syntax:
      content: >-
        function updateStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, options?:
        Models.KeyVaultClientUpdateStorageAccountOptionalParams)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: options
          type:
            - Models.KeyVaultClientUpdateStorageAccountOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.UpdateStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.updateStorageAccount_1'
    name: 'updateStorageAccount(string, string, ServiceCallback<StorageBundle>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateStorageAccount(vaultBaseUrl: string, storageAccountName:
        string, callback: ServiceCallback<StorageBundle>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: storageAccountName
          type:
            - string
          description: The name of the storage account.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.StorageBundle>
          description: |
            The callback
      return:
        type:
          - Promise<Models.UpdateStorageAccountResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.verify'
    name: >-
      verify(string, string, string, Models.JsonWebKeySignatureAlgorithm,
      Uint8Array, Uint8Array, coreHttp.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The VERIFY operation is applicable to symmetric keys stored in Azure Key
      Vault. VERIFY is not

      strictly necessary for asymmetric keys stored in Azure Key Vault since
      signature verification

      can be performed using the public portion of the key but this operation is
      supported as a

      convenience for callers that only have a key-reference and not the public
      portion of the key.

      This operation requires the keys/verify permission.
    syntax:
      content: >-
        function verify(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeySignatureAlgorithm, digest:
        Uint8Array, signature: Uint8Array, options?:
        coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeySignatureAlgorithm
          description: >-
            The signing/verification algorithm. For more information on possible
            algorithm

            types, see JsonWebKeySignatureAlgorithm. Possible values include:
            'PS256', 'PS384', 'PS512',

            'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512',
            'ES256K'
        - id: digest
          type:
            - Uint8Array
          description: The digest used for signing.
        - id: signature
          type:
            - Uint8Array
          description: The signature to be verified.
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.VerifyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.verify_2'
    name: >-
      verify(string, string, string, Models.JsonWebKeySignatureAlgorithm,
      Uint8Array, Uint8Array, RequestOptionsBase,
      ServiceCallback<KeyVerifyResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function verify(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeySignatureAlgorithm, digest:
        Uint8Array, signature: Uint8Array, options: RequestOptionsBase,
        callback: ServiceCallback<KeyVerifyResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeySignatureAlgorithm
          description: >-
            The signing/verification algorithm. For more information on possible
            algorithm

            types, see JsonWebKeySignatureAlgorithm. Possible values include:
            'PS256', 'PS384', 'PS512',

            'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512',
            'ES256K'
        - id: digest
          type:
            - Uint8Array
          description: The digest used for signing.
        - id: signature
          type:
            - Uint8Array
          description: The signature to be verified.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyVerifyResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.VerifyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.verify_1'
    name: >-
      verify(string, string, string, Models.JsonWebKeySignatureAlgorithm,
      Uint8Array, Uint8Array, ServiceCallback<KeyVerifyResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function verify(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeySignatureAlgorithm, digest:
        Uint8Array, signature: Uint8Array, callback:
        ServiceCallback<KeyVerifyResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeySignatureAlgorithm
          description: >-
            The signing/verification algorithm. For more information on possible
            algorithm

            types, see JsonWebKeySignatureAlgorithm. Possible values include:
            'PS256', 'PS384', 'PS512',

            'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512',
            'ES256K'
        - id: digest
          type:
            - Uint8Array
          description: The digest used for signing.
        - id: signature
          type:
            - Uint8Array
          description: The signature to be verified.
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyVerifyResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.VerifyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.wrapKey'
    name: >-
      wrapKey(string, string, string, Models.JsonWebKeyEncryptionAlgorithm,
      Uint8Array, coreHttp.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The WRAP operation supports encryption of a symmetric key using a key
      encryption key that has

      previously been stored in an Azure Key Vault. The WRAP operation is only
      strictly necessary for

      symmetric keys stored in Azure Key Vault since protection with an
      asymmetric key can be

      performed using the public portion of the key. This operation is supported
      for asymmetric keys

      as a convenience for callers that have a key-reference but do not have
      access to the public key

      material. This operation requires the keys/wrapKey permission.
    syntax:
      content: >-
        function wrapKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value:
        Uint8Array, options?: coreHttp.RequestOptionsBase)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeyEncryptionAlgorithm
          description: >-
            algorithm identifier. Possible values include: 'RSA-OAEP',
            'RSA-OAEP-256',

            'RSA1_5'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: options
          type:
            - coreHttp.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.WrapKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.wrapKey_2'
    name: >-
      wrapKey(string, string, string, Models.JsonWebKeyEncryptionAlgorithm,
      Uint8Array, RequestOptionsBase, ServiceCallback<KeyOperationResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function wrapKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value:
        Uint8Array, options: RequestOptionsBase, callback:
        ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeyEncryptionAlgorithm
          description: >-
            algorithm identifier. Possible values include: 'RSA-OAEP',
            'RSA-OAEP-256',

            'RSA1_5'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyOperationResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.WrapKeyResponse>
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.KeyVaultClient.wrapKey_1'
    name: >-
      wrapKey(string, string, string, Models.JsonWebKeyEncryptionAlgorithm,
      Uint8Array, ServiceCallback<KeyOperationResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function wrapKey(vaultBaseUrl: string, keyName: string, keyVersion:
        string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value:
        Uint8Array, callback: ServiceCallback<KeyOperationResult>)
      parameters:
        - id: vaultBaseUrl
          type:
            - string
          description: 'The vault name, for example https://myvault.vault.azure.net.'
        - id: keyName
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: algorithm
          type:
            - Models.JsonWebKeyEncryptionAlgorithm
          description: >-
            algorithm identifier. Possible values include: 'RSA-OAEP',
            'RSA-OAEP-256',

            'RSA1_5'
        - id: value
          type:
            - Uint8Array
          description: ''
        - id: callback
          type:
            - ServiceCallback<@azure/keyvault-secrets.KeyOperationResult>
          description: |
            The callback
      return:
        type:
          - Promise<Models.WrapKeyResponse>
    package: '@azure/keyvault-secrets'
references:
  - uid: '@azure/keyvault-secrets.KeyVaultClientContext'
    name: KeyVaultClientContext
    spec.typeScript:
      - name: KeyVaultClientContext
        fullName: KeyVaultClientContext
        uid: '@azure/keyvault-secrets.KeyVaultClientContext'
  - uid: ServiceCallback<@azure/keyvault-secrets.BackupCertificateResult>
    name: BackupCertificateResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: BackupCertificateResult
        fullName: BackupCertificateResult
        uid: '@azure/keyvault-secrets.BackupCertificateResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.BackupKeyResult>
    name: BackupKeyResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: BackupKeyResult
        fullName: BackupKeyResult
        uid: '@azure/keyvault-secrets.BackupKeyResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.BackupSecretResult>
    name: BackupSecretResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: BackupSecretResult
        fullName: BackupSecretResult
        uid: '@azure/keyvault-secrets.BackupSecretResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.BackupStorageResult>
    name: BackupStorageResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: BackupStorageResult
        fullName: BackupStorageResult
        uid: '@azure/keyvault-secrets.BackupStorageResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.CertificateOperation>
    name: CertificateOperation>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CertificateOperation
        fullName: CertificateOperation
        uid: '@azure/keyvault-secrets.CertificateOperation'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.KeyVaultClientCreateCertificateOptionalParams'
    name: KeyVaultClientCreateCertificateOptionalParams
    spec.typeScript:
      - name: KeyVaultClientCreateCertificateOptionalParams
        fullName: KeyVaultClientCreateCertificateOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientCreateCertificateOptionalParams'
  - uid: ServiceCallback<@azure/keyvault-secrets.KeyBundle>
    name: KeyBundle>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: KeyBundle
        fullName: KeyBundle
        uid: '@azure/keyvault-secrets.KeyBundle'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.KeyVaultClientCreateKeyOptionalParams'
    name: KeyVaultClientCreateKeyOptionalParams
    spec.typeScript:
      - name: KeyVaultClientCreateKeyOptionalParams
        fullName: KeyVaultClientCreateKeyOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientCreateKeyOptionalParams'
  - uid: ServiceCallback<@azure/keyvault-secrets.KeyOperationResult>
    name: KeyOperationResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: KeyOperationResult
        fullName: KeyOperationResult
        uid: '@azure/keyvault-secrets.KeyOperationResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.DeletedCertificateBundle>
    name: DeletedCertificateBundle>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeletedCertificateBundle
        fullName: DeletedCertificateBundle
        uid: '@azure/keyvault-secrets.DeletedCertificateBundle'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.Contacts>
    name: Contacts>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: Contacts
        fullName: Contacts
        uid: '@azure/keyvault-secrets.Contacts'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.IssuerBundle>
    name: IssuerBundle>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: IssuerBundle
        fullName: IssuerBundle
        uid: '@azure/keyvault-secrets.IssuerBundle'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.DeletedKeyBundle>
    name: DeletedKeyBundle>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeletedKeyBundle
        fullName: DeletedKeyBundle
        uid: '@azure/keyvault-secrets.DeletedKeyBundle'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.DeletedSasDefinitionBundle>
    name: DeletedSasDefinitionBundle>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeletedSasDefinitionBundle
        fullName: DeletedSasDefinitionBundle
        uid: '@azure/keyvault-secrets.DeletedSasDefinitionBundle'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.DeletedSecretBundle>
    name: DeletedSecretBundle>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeletedSecretBundle
        fullName: DeletedSecretBundle
        uid: '@azure/keyvault-secrets.DeletedSecretBundle'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.DeletedStorageBundle>
    name: DeletedStorageBundle>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeletedStorageBundle
        fullName: DeletedStorageBundle
        uid: '@azure/keyvault-secrets.DeletedStorageBundle'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.CertificateBundle>
    name: CertificateBundle>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CertificateBundle
        fullName: CertificateBundle
        uid: '@azure/keyvault-secrets.CertificateBundle'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.CertificateIssuerListResult>
    name: CertificateIssuerListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CertificateIssuerListResult
        fullName: CertificateIssuerListResult
        uid: '@azure/keyvault-secrets.CertificateIssuerListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.KeyVaultClientGetCertificateIssuersOptionalParams'
    name: KeyVaultClientGetCertificateIssuersOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetCertificateIssuersOptionalParams
        fullName: KeyVaultClientGetCertificateIssuersOptionalParams
        uid: >-
          @azure/keyvault-secrets.KeyVaultClientGetCertificateIssuersOptionalParams
  - uid: ServiceCallback<@azure/keyvault-secrets.CertificatePolicy>
    name: CertificatePolicy>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CertificatePolicy
        fullName: CertificatePolicy
        uid: '@azure/keyvault-secrets.CertificatePolicy'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.CertificateListResult>
    name: CertificateListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CertificateListResult
        fullName: CertificateListResult
        uid: '@azure/keyvault-secrets.CertificateListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.KeyVaultClientGetCertificateVersionsOptionalParams'
    name: KeyVaultClientGetCertificateVersionsOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetCertificateVersionsOptionalParams
        fullName: KeyVaultClientGetCertificateVersionsOptionalParams
        uid: >-
          @azure/keyvault-secrets.KeyVaultClientGetCertificateVersionsOptionalParams
  - uid: '@azure/keyvault-secrets.KeyVaultClientGetCertificatesOptionalParams'
    name: KeyVaultClientGetCertificatesOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetCertificatesOptionalParams
        fullName: KeyVaultClientGetCertificatesOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientGetCertificatesOptionalParams'
  - uid: ServiceCallback<@azure/keyvault-secrets.DeletedCertificateListResult>
    name: DeletedCertificateListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeletedCertificateListResult
        fullName: DeletedCertificateListResult
        uid: '@azure/keyvault-secrets.DeletedCertificateListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.KeyVaultClientGetDeletedCertificatesOptionalParams'
    name: KeyVaultClientGetDeletedCertificatesOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetDeletedCertificatesOptionalParams
        fullName: KeyVaultClientGetDeletedCertificatesOptionalParams
        uid: >-
          @azure/keyvault-secrets.KeyVaultClientGetDeletedCertificatesOptionalParams
  - uid: ServiceCallback<@azure/keyvault-secrets.DeletedKeyListResult>
    name: DeletedKeyListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeletedKeyListResult
        fullName: DeletedKeyListResult
        uid: '@azure/keyvault-secrets.DeletedKeyListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.KeyVaultClientGetDeletedKeysOptionalParams'
    name: KeyVaultClientGetDeletedKeysOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetDeletedKeysOptionalParams
        fullName: KeyVaultClientGetDeletedKeysOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientGetDeletedKeysOptionalParams'
  - uid: ServiceCallback<@azure/keyvault-secrets.DeletedSasDefinitionListResult>
    name: DeletedSasDefinitionListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeletedSasDefinitionListResult
        fullName: DeletedSasDefinitionListResult
        uid: '@azure/keyvault-secrets.DeletedSasDefinitionListResult'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/keyvault-secrets.KeyVaultClientGetDeletedSasDefinitionsOptionalParams
    name: KeyVaultClientGetDeletedSasDefinitionsOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetDeletedSasDefinitionsOptionalParams
        fullName: KeyVaultClientGetDeletedSasDefinitionsOptionalParams
        uid: >-
          @azure/keyvault-secrets.KeyVaultClientGetDeletedSasDefinitionsOptionalParams
  - uid: ServiceCallback<@azure/keyvault-secrets.DeletedSecretListResult>
    name: DeletedSecretListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeletedSecretListResult
        fullName: DeletedSecretListResult
        uid: '@azure/keyvault-secrets.DeletedSecretListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.KeyVaultClientGetDeletedSecretsOptionalParams'
    name: KeyVaultClientGetDeletedSecretsOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetDeletedSecretsOptionalParams
        fullName: KeyVaultClientGetDeletedSecretsOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientGetDeletedSecretsOptionalParams'
  - uid: ServiceCallback<@azure/keyvault-secrets.DeletedStorageListResult>
    name: DeletedStorageListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeletedStorageListResult
        fullName: DeletedStorageListResult
        uid: '@azure/keyvault-secrets.DeletedStorageListResult'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/keyvault-secrets.KeyVaultClientGetDeletedStorageAccountsOptionalParams
    name: KeyVaultClientGetDeletedStorageAccountsOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetDeletedStorageAccountsOptionalParams
        fullName: KeyVaultClientGetDeletedStorageAccountsOptionalParams
        uid: >-
          @azure/keyvault-secrets.KeyVaultClientGetDeletedStorageAccountsOptionalParams
  - uid: ServiceCallback<@azure/keyvault-secrets.KeyListResult>
    name: KeyListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: KeyListResult
        fullName: KeyListResult
        uid: '@azure/keyvault-secrets.KeyListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.KeyVaultClientGetKeyVersionsOptionalParams'
    name: KeyVaultClientGetKeyVersionsOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetKeyVersionsOptionalParams
        fullName: KeyVaultClientGetKeyVersionsOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientGetKeyVersionsOptionalParams'
  - uid: '@azure/keyvault-secrets.KeyVaultClientGetKeysOptionalParams'
    name: KeyVaultClientGetKeysOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetKeysOptionalParams
        fullName: KeyVaultClientGetKeysOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientGetKeysOptionalParams'
  - uid: ServiceCallback<@azure/keyvault-secrets.SasDefinitionBundle>
    name: SasDefinitionBundle>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SasDefinitionBundle
        fullName: SasDefinitionBundle
        uid: '@azure/keyvault-secrets.SasDefinitionBundle'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.SasDefinitionListResult>
    name: SasDefinitionListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SasDefinitionListResult
        fullName: SasDefinitionListResult
        uid: '@azure/keyvault-secrets.SasDefinitionListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.KeyVaultClientGetSasDefinitionsOptionalParams'
    name: KeyVaultClientGetSasDefinitionsOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetSasDefinitionsOptionalParams
        fullName: KeyVaultClientGetSasDefinitionsOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientGetSasDefinitionsOptionalParams'
  - uid: ServiceCallback<@azure/keyvault-secrets.SecretBundle>
    name: SecretBundle>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SecretBundle
        fullName: SecretBundle
        uid: '@azure/keyvault-secrets.SecretBundle'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.SecretListResult>
    name: SecretListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SecretListResult
        fullName: SecretListResult
        uid: '@azure/keyvault-secrets.SecretListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.KeyVaultClientGetSecretVersionsOptionalParams'
    name: KeyVaultClientGetSecretVersionsOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetSecretVersionsOptionalParams
        fullName: KeyVaultClientGetSecretVersionsOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientGetSecretVersionsOptionalParams'
  - uid: '@azure/keyvault-secrets.KeyVaultClientGetSecretsOptionalParams'
    name: KeyVaultClientGetSecretsOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetSecretsOptionalParams
        fullName: KeyVaultClientGetSecretsOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientGetSecretsOptionalParams'
  - uid: ServiceCallback<@azure/keyvault-secrets.StorageBundle>
    name: StorageBundle>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: StorageBundle
        fullName: StorageBundle
        uid: '@azure/keyvault-secrets.StorageBundle'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/keyvault-secrets.StorageListResult>
    name: StorageListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: StorageListResult
        fullName: StorageListResult
        uid: '@azure/keyvault-secrets.StorageListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.KeyVaultClientGetStorageAccountsOptionalParams'
    name: KeyVaultClientGetStorageAccountsOptionalParams
    spec.typeScript:
      - name: KeyVaultClientGetStorageAccountsOptionalParams
        fullName: KeyVaultClientGetStorageAccountsOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientGetStorageAccountsOptionalParams'
  - uid: '@azure/keyvault-secrets.KeyVaultClientImportCertificateOptionalParams'
    name: KeyVaultClientImportCertificateOptionalParams
    spec.typeScript:
      - name: KeyVaultClientImportCertificateOptionalParams
        fullName: KeyVaultClientImportCertificateOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientImportCertificateOptionalParams'
  - uid: '@azure/keyvault-secrets.JsonWebKey'
    name: JsonWebKey
    spec.typeScript:
      - name: JsonWebKey
        fullName: JsonWebKey
        uid: '@azure/keyvault-secrets.JsonWebKey'
  - uid: '@azure/keyvault-secrets.KeyVaultClientImportKeyOptionalParams'
    name: KeyVaultClientImportKeyOptionalParams
    spec.typeScript:
      - name: KeyVaultClientImportKeyOptionalParams
        fullName: KeyVaultClientImportKeyOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientImportKeyOptionalParams'
  - uid: '@azure/keyvault-secrets.KeyVaultClientMergeCertificateOptionalParams'
    name: KeyVaultClientMergeCertificateOptionalParams
    spec.typeScript:
      - name: KeyVaultClientMergeCertificateOptionalParams
        fullName: KeyVaultClientMergeCertificateOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientMergeCertificateOptionalParams'
  - uid: '@azure/keyvault-secrets.Contacts'
    name: Contacts
    spec.typeScript:
      - name: Contacts
        fullName: Contacts
        uid: '@azure/keyvault-secrets.Contacts'
  - uid: '@azure/keyvault-secrets.KeyVaultClientSetCertificateIssuerOptionalParams'
    name: KeyVaultClientSetCertificateIssuerOptionalParams
    spec.typeScript:
      - name: KeyVaultClientSetCertificateIssuerOptionalParams
        fullName: KeyVaultClientSetCertificateIssuerOptionalParams
        uid: >-
          @azure/keyvault-secrets.KeyVaultClientSetCertificateIssuerOptionalParams
  - uid: '@azure/keyvault-secrets.KeyVaultClientSetSasDefinitionOptionalParams'
    name: KeyVaultClientSetSasDefinitionOptionalParams
    spec.typeScript:
      - name: KeyVaultClientSetSasDefinitionOptionalParams
        fullName: KeyVaultClientSetSasDefinitionOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientSetSasDefinitionOptionalParams'
  - uid: '@azure/keyvault-secrets.KeyVaultClientSetSecretOptionalParams'
    name: KeyVaultClientSetSecretOptionalParams
    spec.typeScript:
      - name: KeyVaultClientSetSecretOptionalParams
        fullName: KeyVaultClientSetSecretOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientSetSecretOptionalParams'
  - uid: '@azure/keyvault-secrets.KeyVaultClientSetStorageAccountOptionalParams'
    name: KeyVaultClientSetStorageAccountOptionalParams
    spec.typeScript:
      - name: KeyVaultClientSetStorageAccountOptionalParams
        fullName: KeyVaultClientSetStorageAccountOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientSetStorageAccountOptionalParams'
  - uid: '@azure/keyvault-secrets.KeyVaultClientUpdateCertificateOptionalParams'
    name: KeyVaultClientUpdateCertificateOptionalParams
    spec.typeScript:
      - name: KeyVaultClientUpdateCertificateOptionalParams
        fullName: KeyVaultClientUpdateCertificateOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientUpdateCertificateOptionalParams'
  - uid: >-
      @azure/keyvault-secrets.KeyVaultClientUpdateCertificateIssuerOptionalParams
    name: KeyVaultClientUpdateCertificateIssuerOptionalParams
    spec.typeScript:
      - name: KeyVaultClientUpdateCertificateIssuerOptionalParams
        fullName: KeyVaultClientUpdateCertificateIssuerOptionalParams
        uid: >-
          @azure/keyvault-secrets.KeyVaultClientUpdateCertificateIssuerOptionalParams
  - uid: '@azure/keyvault-secrets.CertificatePolicy'
    name: CertificatePolicy
    spec.typeScript:
      - name: CertificatePolicy
        fullName: CertificatePolicy
        uid: '@azure/keyvault-secrets.CertificatePolicy'
  - uid: '@azure/keyvault-secrets.KeyVaultClientUpdateKeyOptionalParams'
    name: KeyVaultClientUpdateKeyOptionalParams
    spec.typeScript:
      - name: KeyVaultClientUpdateKeyOptionalParams
        fullName: KeyVaultClientUpdateKeyOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientUpdateKeyOptionalParams'
  - uid: '@azure/keyvault-secrets.KeyVaultClientUpdateSasDefinitionOptionalParams'
    name: KeyVaultClientUpdateSasDefinitionOptionalParams
    spec.typeScript:
      - name: KeyVaultClientUpdateSasDefinitionOptionalParams
        fullName: KeyVaultClientUpdateSasDefinitionOptionalParams
        uid: >-
          @azure/keyvault-secrets.KeyVaultClientUpdateSasDefinitionOptionalParams
  - uid: '@azure/keyvault-secrets.KeyVaultClientUpdateSecretOptionalParams'
    name: KeyVaultClientUpdateSecretOptionalParams
    spec.typeScript:
      - name: KeyVaultClientUpdateSecretOptionalParams
        fullName: KeyVaultClientUpdateSecretOptionalParams
        uid: '@azure/keyvault-secrets.KeyVaultClientUpdateSecretOptionalParams'
  - uid: '@azure/keyvault-secrets.KeyVaultClientUpdateStorageAccountOptionalParams'
    name: KeyVaultClientUpdateStorageAccountOptionalParams
    spec.typeScript:
      - name: KeyVaultClientUpdateStorageAccountOptionalParams
        fullName: KeyVaultClientUpdateStorageAccountOptionalParams
        uid: >-
          @azure/keyvault-secrets.KeyVaultClientUpdateStorageAccountOptionalParams
  - uid: ServiceCallback<@azure/keyvault-secrets.KeyVerifyResult>
    name: KeyVerifyResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: KeyVerifyResult
        fullName: KeyVerifyResult
        uid: '@azure/keyvault-secrets.KeyVerifyResult'
      - name: '>'
        fullName: '>'
