### YamlMime:UniversalReference
items:
  - uid: '@azure/keyvault-keys.CryptographyClient'
    name: CryptographyClient
    fullName: CryptographyClient
    children:
      - '@azure/keyvault-keys.CryptographyClient.constructor'
      - '@azure/keyvault-keys.CryptographyClient.decrypt'
      - '@azure/keyvault-keys.CryptographyClient.encrypt'
      - '@azure/keyvault-keys.CryptographyClient.getDefaultPipeline'
      - '@azure/keyvault-keys.CryptographyClient.getKey'
      - '@azure/keyvault-keys.CryptographyClient.key'
      - '@azure/keyvault-keys.CryptographyClient.pipeline'
      - '@azure/keyvault-keys.CryptographyClient.sign'
      - '@azure/keyvault-keys.CryptographyClient.signData'
      - '@azure/keyvault-keys.CryptographyClient.unwrapKey'
      - '@azure/keyvault-keys.CryptographyClient.vaultBaseUrl'
      - '@azure/keyvault-keys.CryptographyClient.verify'
      - '@azure/keyvault-keys.CryptographyClient.verifyData'
      - '@azure/keyvault-keys.CryptographyClient.wrapKey'
    langs:
      - typeScript
    type: class
    summary: The client to interact with the KeyVault cryptography functionality
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.constructor'
    name: >-
      CryptographyClient(string, string | JsonWebKey, TokenCredential,
      ServiceClientOptions | NewPipelineOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: |-
      Constructs a new instance of the Cryptography client for the given key
      Example usage:
      ```ts
      import { CryptographyClient } from "@azure/keyvault-keys";
      import { DefaultAzureCredential } from "@azure/identity";

      let url = `https://<MY KEYVAULT HERE>.vault.azure.net`;
      let credentials = new DefaultAzureCredential();

      let client = new CryptographyClient(url, keyUrl, credentials);
      // or
      let client = new CryptographyClient(url, jsonWebKey, credentials);
      ```
    syntax:
      content: >-
        new CryptographyClient(url: string, key: string | JsonWebKey,
        credential: TokenCredential, pipelineOrOptions?: ServiceClientOptions |
        NewPipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: The url of the key vault service
        - id: key
          type:
            - string | @azure/keyvault-keys.JsonWebKey
          description: The key to use during cryptography tasks
        - id: credential
          type:
            - TokenCredential
          description: The login credentials of the service
        - id: pipelineOrOptions
          type:
            - ServiceClientOptions | @azure/keyvault-keys.NewPipelineOptions
          description: ''
          optional: true
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.decrypt'
    name: 'decrypt(JsonWebKeyEncryptionAlgorithm, Uint8Array, DecryptOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Decrypts the given ciphertext with the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new CryptographyClient(url, key, credentials);
      let result = await client.decrypt("RSA1_5", encryptedBuffer);
      ```
    syntax:
      content: >-
        function decrypt(algorithm: JsonWebKeyEncryptionAlgorithm, ciphertext:
        Uint8Array, options?: DecryptOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.JsonWebKeyEncryptionAlgorithm'
          description: The algorithm to use
        - id: ciphertext
          type:
            - Uint8Array
          description: The ciphertext to decrypt
        - id: options
          type:
            - '@azure/keyvault-keys.DecryptOptions'
          description: |
            Additional options
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.DecryptResult>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.encrypt'
    name: 'encrypt(JsonWebKeyEncryptionAlgorithm, Uint8Array, EncryptOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Encrypts the given plaintext with the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new CryptographyClient(url, key, credentials);
      let result = await client.encrypt("RSA1_5", Buffer.from("My Message"));
      ```
    syntax:
      content: >-
        function encrypt(algorithm: JsonWebKeyEncryptionAlgorithm, plaintext:
        Uint8Array, options?: EncryptOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.JsonWebKeyEncryptionAlgorithm'
          description: The algorithm to use
        - id: plaintext
          type:
            - Uint8Array
          description: The text to encrypt
        - id: options
          type:
            - '@azure/keyvault-keys.EncryptOptions'
          description: |
            Additional options
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.EncryptResult>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.getDefaultPipeline'
    name: >-
      getDefaultPipeline(ServiceClientCredentials | TokenCredential,
      NewPipelineOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A static method used to create a new Pipeline object with the provided
      Credential.
    syntax:
      content: >-
        static function getDefaultPipeline(credential: ServiceClientCredentials
        | TokenCredential, pipelineOptions?: NewPipelineOptions)
      parameters:
        - id: credential
          type:
            - ServiceClientCredentials | TokenCredential
          description: ''
        - id: pipelineOptions
          type:
            - '@azure/keyvault-keys.NewPipelineOptions'
          description: ''
          optional: true
      return:
        type:
          - ServiceClientOptions
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.getKey'
    name: getKey(GetKeyOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Retrieves the complete key from the key vault
      Example usage:
      ```ts
      let client = new CryptographyClient(url, keyUrl, credentials);
      let result = await client.getKey();
      ```
    syntax:
      content: 'function getKey(options?: GetKeyOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-keys.GetKeyOptions'
          description: |
            Options for retrieving key
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.JsonWebKey>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.key'
    name: key
    fullName: key
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If the key is a string, it's a URL, and we'll pass it to the service API
      directly.
    syntax:
      content: 'key: string | JsonWebKey'
      return:
        type:
          - string | @azure/keyvault-keys.JsonWebKey
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.pipeline'
    name: pipeline
    fullName: pipeline
    children: []
    langs:
      - typeScript
    type: property
    summary: The options to create the connection to the service
    syntax:
      content: 'pipeline: ServiceClientOptions'
      return:
        type:
          - ServiceClientOptions
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.sign'
    name: 'sign(KeySignatureAlgorithm, Uint8Array, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Cryptographically sign the digest of a message
      Example usage:
      ```ts
      let client = new CryptographyClient(url, key, credentials);
      let result = await client.sign("RS256", digest);
      ```
    syntax:
      content: >-
        function sign(algorithm: KeySignatureAlgorithm, digest: Uint8Array,
        options?: RequestOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.KeySignatureAlgorithm'
          description: The signing algorithm to use
        - id: digest
          type:
            - Uint8Array
          description: The digest of the data to sign
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: |
            Additional options
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.SignResult>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.signData'
    name: 'signData(KeySignatureAlgorithm, Uint8Array, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Cryptographically sign a block of data
      Example usage:
      ```ts
      let client = new CryptographyClient(url, key, credentials);
      let result = await client.signData("RS256", message);
      ```
    syntax:
      content: >-
        function signData(algorithm: KeySignatureAlgorithm, data: Uint8Array,
        options?: RequestOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.KeySignatureAlgorithm'
          description: The signing algorithm to use
        - id: data
          type:
            - Uint8Array
          description: The data to sign
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: |
            Additional options
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.SignResult>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.unwrapKey'
    name: 'unwrapKey(KeyWrapAlgorithm, Uint8Array, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Unwraps the given wrapped key using the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new CryptographyClient(url, key, credentials);
      let result = await client.unwrapKey("RSA1_5", keyToUnwrap);
      ```
    syntax:
      content: >-
        function unwrapKey(algorithm: KeyWrapAlgorithm, encryptedKey:
        Uint8Array, options?: RequestOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.KeyWrapAlgorithm'
          description: The decryption algorithm to use to unwrap the key
        - id: encryptedKey
          type:
            - Uint8Array
          description: The encrypted key to unwrap
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: |
            Additional options
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.UnwrapResult>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.vaultBaseUrl'
    name: vaultBaseUrl
    fullName: vaultBaseUrl
    children: []
    langs:
      - typeScript
    type: property
    summary: The base URL to the vault
    syntax:
      content: 'vaultBaseUrl: string'
      return:
        type:
          - string
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.verify'
    name: 'verify(KeySignatureAlgorithm, Uint8Array, Uint8Array, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Verify the signed message digest
      Example usage:
      ```ts
      let client = new CryptographyClient(url, key, credentials);
      let result = await client.verify("RS256", signedDigest, signature);
      ```
    syntax:
      content: >-
        function verify(algorithm: KeySignatureAlgorithm, digest: Uint8Array,
        signature: Uint8Array, options?: RequestOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.KeySignatureAlgorithm'
          description: The signing algorithm to use to verify with
        - id: digest
          type:
            - Uint8Array
          description: The digest to verify
        - id: signature
          type:
            - Uint8Array
          description: The signature to verify the digest against
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: |
            Additional options
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.VerifyResult>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.verifyData'
    name: 'verifyData(KeySignatureAlgorithm, Uint8Array, Uint8Array, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Verify the signed block of data
      Example usage:
      ```ts
      let client = new CryptographyClient(url, key, credentials);
      let result = await client.verifyData("RS256", signedMessage, signature);
      ```
    syntax:
      content: >-
        function verifyData(algorithm: KeySignatureAlgorithm, data: Uint8Array,
        signature: Uint8Array, options?: RequestOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.KeySignatureAlgorithm'
          description: The algorithm to use to verify with
        - id: data
          type:
            - Uint8Array
          description: The signed block of data to verify
        - id: signature
          type:
            - Uint8Array
          description: The signature to verify the block against
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: |
            Additional options
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.VerifyResult>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.wrapKey'
    name: 'wrapKey(KeyWrapAlgorithm, Uint8Array, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Wraps the given key using the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new CryptographyClient(url, key, credentials);
      let result = await client.wrapKey("RSA1_5", keyToWrap);
      ```
    syntax:
      content: >-
        function wrapKey(algorithm: KeyWrapAlgorithm, key: Uint8Array, options?:
        RequestOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.KeyWrapAlgorithm'
          description: The encryption algorithm to use to wrap the given key
        - id: key
          type:
            - Uint8Array
          description: The key to wrap
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: |
            Additional options
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.WrapResult>
    package: '@azure/keyvault-keys'
references:
  - uid: string | @azure/keyvault-keys.JsonWebKey
    name: JsonWebKey
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: JsonWebKey
        fullName: JsonWebKey
        uid: '@azure/keyvault-keys.JsonWebKey'
  - uid: ServiceClientOptions | @azure/keyvault-keys.NewPipelineOptions
    name: NewPipelineOptions
    spec.typeScript:
      - name: 'ServiceClientOptions | '
        fullName: 'ServiceClientOptions | '
      - name: NewPipelineOptions
        fullName: NewPipelineOptions
        uid: '@azure/keyvault-keys.NewPipelineOptions'
  - uid: '@azure/keyvault-keys.JsonWebKeyEncryptionAlgorithm'
    name: JsonWebKeyEncryptionAlgorithm
    spec.typeScript:
      - name: JsonWebKeyEncryptionAlgorithm
        fullName: JsonWebKeyEncryptionAlgorithm
        uid: '@azure/keyvault-keys.JsonWebKeyEncryptionAlgorithm'
  - uid: '@azure/keyvault-keys.DecryptOptions'
    name: DecryptOptions
    spec.typeScript:
      - name: DecryptOptions
        fullName: DecryptOptions
        uid: '@azure/keyvault-keys.DecryptOptions'
  - uid: Promise<@azure/keyvault-keys.DecryptResult>
    name: DecryptResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DecryptResult
        fullName: DecryptResult
        uid: '@azure/keyvault-keys.DecryptResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.EncryptOptions'
    name: EncryptOptions
    spec.typeScript:
      - name: EncryptOptions
        fullName: EncryptOptions
        uid: '@azure/keyvault-keys.EncryptOptions'
  - uid: Promise<@azure/keyvault-keys.EncryptResult>
    name: EncryptResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EncryptResult
        fullName: EncryptResult
        uid: '@azure/keyvault-keys.EncryptResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.GetKeyOptions'
    name: GetKeyOptions
    spec.typeScript:
      - name: GetKeyOptions
        fullName: GetKeyOptions
        uid: '@azure/keyvault-keys.GetKeyOptions'
  - uid: Promise<@azure/keyvault-keys.JsonWebKey>
    name: JsonWebKey>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: JsonWebKey
        fullName: JsonWebKey
        uid: '@azure/keyvault-keys.JsonWebKey'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.KeySignatureAlgorithm'
    name: KeySignatureAlgorithm
    spec.typeScript:
      - name: KeySignatureAlgorithm
        fullName: KeySignatureAlgorithm
        uid: '@azure/keyvault-keys.KeySignatureAlgorithm'
  - uid: '@azure/keyvault-keys.RequestOptions'
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/keyvault-keys.RequestOptions'
  - uid: Promise<@azure/keyvault-keys.SignResult>
    name: SignResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SignResult
        fullName: SignResult
        uid: '@azure/keyvault-keys.SignResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.KeyWrapAlgorithm'
    name: KeyWrapAlgorithm
    spec.typeScript:
      - name: KeyWrapAlgorithm
        fullName: KeyWrapAlgorithm
        uid: '@azure/keyvault-keys.KeyWrapAlgorithm'
  - uid: Promise<@azure/keyvault-keys.UnwrapResult>
    name: UnwrapResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: UnwrapResult
        fullName: UnwrapResult
        uid: '@azure/keyvault-keys.UnwrapResult'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/keyvault-keys.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: VerifyResult
        fullName: VerifyResult
        uid: '@azure/keyvault-keys.VerifyResult'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/keyvault-keys.WrapResult>
    name: WrapResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: WrapResult
        fullName: WrapResult
        uid: '@azure/keyvault-keys.WrapResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.NewPipelineOptions'
    name: NewPipelineOptions
    spec.typeScript:
      - name: NewPipelineOptions
        fullName: NewPipelineOptions
        uid: '@azure/keyvault-keys.NewPipelineOptions'
