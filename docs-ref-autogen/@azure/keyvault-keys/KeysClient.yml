### YamlMime:UniversalReference
items:
  - uid: '@azure/keyvault-keys.KeysClient'
    name: KeysClient
    fullName: KeysClient
    children:
      - '@azure/keyvault-keys.KeysClient.backupKey'
      - '@azure/keyvault-keys.KeysClient.createEcKey'
      - '@azure/keyvault-keys.KeysClient.createKey'
      - '@azure/keyvault-keys.KeysClient.createRsaKey'
      - '@azure/keyvault-keys.KeysClient.deleteKey'
      - '@azure/keyvault-keys.KeysClient.getDefaultPipeline'
      - '@azure/keyvault-keys.KeysClient.getDeletedKey'
      - '@azure/keyvault-keys.KeysClient.getKey'
      - '@azure/keyvault-keys.KeysClient.importKey'
      - '@azure/keyvault-keys.KeysClient.constructor'
      - '@azure/keyvault-keys.KeysClient.listDeletedKeys'
      - '@azure/keyvault-keys.KeysClient.listKeys'
      - '@azure/keyvault-keys.KeysClient.listKeyVersions'
      - '@azure/keyvault-keys.KeysClient.pipeline'
      - '@azure/keyvault-keys.KeysClient.purgeDeletedKey'
      - '@azure/keyvault-keys.KeysClient.recoverDeletedKey'
      - '@azure/keyvault-keys.KeysClient.restoreKey'
      - '@azure/keyvault-keys.KeysClient.updateKey'
      - '@azure/keyvault-keys.KeysClient.vaultBaseUrl'
    langs:
      - typeScript
    type: class
    summary: The client to interact with the KeyVault keys functionality
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.backupKey'
    name: 'backupKey(string, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Requests that a backup of the specified key be downloaded to the client.
      All versions of the

      key will be downloaded. This operation requires the keys/backup
      permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      let backupContents = await client.backupKey("MyKey");

      ```
    syntax:
      content: 'function backupKey(name: string, options?: RequestOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Uint8Array | undefined>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.createEcKey'
    name: 'createEcKey(string, CreateEcKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The create key operation can be used to create any key type in Azure Key
      Vault. If the named key

      already exists, Azure Key Vault creates a new version of the key. It
      requires the keys/create

      permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      let result = await client.createEcKey("MyKey", { curve: "P-256" });

      ```
    syntax:
      content: 'function createEcKey(name: string, options?: CreateEcKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.CreateEcKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.createKey'
    name: 'createKey(string, JsonWebKeyType, CreateKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The create key operation can be used to create any key type in Azure Key
      Vault. If the named key

      already exists, Azure Key Vault creates a new version of the key. It
      requires the keys/create

      permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      // Create an elliptic-curve key:

      let result = await client.createKey("MyKey", "EC");

      ```
    syntax:
      content: >-
        function createKey(name: string, keyType: JsonWebKeyType, options?:
        CreateKeyOptions)
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: keyType
          type:
            - '@azure/keyvault-keys.JsonWebKeyType'
          description: The type of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.CreateKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.createRsaKey'
    name: 'createRsaKey(string, CreateRsaKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The create key operation can be used to create any key type in Azure Key
      Vault. If the named key

      already exists, Azure Key Vault creates a new version of the key. It
      requires the keys/create

      permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      let result = await client.createRsaKey("MyKey", { keySize: 2048 });

      ```
    syntax:
      content: 'function createRsaKey(name: string, options?: CreateRsaKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.CreateRsaKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.deleteKey'
    name: 'deleteKey(string, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The DELETE operation applies to any key stored in Azure Key Vault. DELETE
      cannot be applied

      to an individual version of a key. This operation requires the keys/delete
      permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      let result = await client.deleteKey("MyKey");

      ```
    syntax:
      content: 'function deleteKey(name: string, options?: RequestOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.DeletedKey>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.getDefaultPipeline'
    name: 'getDefaultPipeline(TokenCredential, NewPipelineOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A static method used to create a new Pipeline object with the provided
      Credential.
    syntax:
      content: >-
        static function getDefaultPipeline(credential: TokenCredential,
        pipelineOptions?: NewPipelineOptions)
      parameters:
        - id: credential
          type:
            - TokenCredential
          description: ''
        - id: pipelineOptions
          type:
            - '@azure/keyvault-keys.NewPipelineOptions'
          description: ''
          optional: true
      return:
        type:
          - Pipeline
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.getDeletedKey'
    name: 'getDeletedKey(string, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Deleted Key operation returns the specified deleted key along with
      its attributes.

      This operation requires the keys/get permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      let key = await client.getDeletedKey("MyDeletedKey");

      ```
    syntax:
      content: 'function getDeletedKey(name: string, options?: RequestOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.DeletedKey>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.getKey'
    name: 'getKey(string, GetKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The GET operation is applicable to any key stored in Azure Key Vault. This
      operation requires

      the keys/get permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      let key = await client.getKey("MyKey");

      ```
    syntax:
      content: 'function getKey(name: string, options?: GetKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.GetKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.importKey'
    name: 'importKey(string, JsonWebKey, ImportKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The import key operation may be used to import any key type into an Azure
      Key Vault. If the

      named key already exists, Azure Key Vault creates a new version of the
      key. This operation

      requires the keys/import permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      // Key contents in myKeyContents

      let result = await client.importKey("MyKey", myKeyContents);

      ```
    syntax:
      content: >-
        function importKey(name: string, key: JsonWebKey, options?:
        ImportKeyOptions)
      parameters:
        - id: name
          type:
            - string
          description: Name for the imported key.
        - id: key
          type:
            - '@azure/keyvault-keys.JsonWebKey'
          description: The Json web key
        - id: options
          type:
            - '@azure/keyvault-keys.ImportKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.constructor'
    name: 'KeysClient(string, TokenCredential, Pipeline | NewPipelineOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: |-
      Creates an instance of KeysClient.
      Example usage:
      ```ts
      import { KeysClient } from "@azure/keyvault-keys";
      import { DefaultAzureCredential } from "@azure/identity";

      let url = `https://<MY KEYVAULT HERE>.vault.azure.net`;
      let credentials = new DefaultAzureCredential();

      let client = new KeysClient(url, credentials);
      ```
    syntax:
      content: >-
        new KeysClient(url: string, credential: TokenCredential,
        pipelineOrOptions?: Pipeline | NewPipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: the base url to the key vault.
        - id: credential
          type:
            - TokenCredential
          description: ''
        - id: pipelineOrOptions
          type:
            - Pipeline | @azure/keyvault-keys.NewPipelineOptions
          description: ''
          optional: true
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.listDeletedKeys'
    name: listDeletedKeys(ListKeysOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates the deleted keys in the vault.  The full key identifier and
      attributes are provided

      in the response. No values are returned for the keys. This operations
      requires the keys/list permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      for await (const keyAttr of client.listDeletedKeys()) {
        const deletedKey = await client.getKey(keyAttr.name);
        console.log("deleted key: ", deletedKey);
      }

      ```
    syntax:
      content: 'function listDeletedKeys(options?: ListKeysOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-keys.ListKeysOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-keys.KeyAttributes,
            @azure/keyvault-keys.KeyAttributes[]>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.listKeys'
    name: listKeys(ListKeysOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates the latest version of all keys in the vault.  The full key
      identifier and attributes are provided

      in the response. No values are returned for the keys. This operations
      requires the keys/list permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      for await (const keyAttr of client.listKeys()) {
        const key = await client.getKey(keyAttr.name);
        console.log("key: ", key);
      }

      ```
    syntax:
      content: 'function listKeys(options?: ListKeysOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-keys.ListKeysOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-keys.KeyAttributes,
            @azure/keyvault-keys.KeyAttributes[]>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.listKeyVersions'
    name: 'listKeyVersions(string, ListKeysOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates all versions of the given key in the vault. The full key
      identifier, attributes, and tags are provided

      in the response. This operation requires the keys/list permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      for await (const keyAttr of client.listKeyVersions("MyKey")) {
        const key = await client.getKey(keyAttr.name);
        console.log("key version: ", key);
      }

      ```
    syntax:
      content: 'function listKeyVersions(name: string, options?: ListKeysOptions)'
      parameters:
        - id: name
          type:
            - string
          description: Name of the key to fetch versions for
        - id: options
          type:
            - '@azure/keyvault-keys.ListKeysOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-keys.KeyAttributes,
            @azure/keyvault-keys.KeyAttributes[]>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.pipeline'
    name: pipeline
    fullName: pipeline
    children: []
    langs:
      - typeScript
    type: property
    summary: The options to create the connection to the service
    syntax:
      content: 'pipeline: Pipeline'
      return:
        type:
          - Pipeline
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.purgeDeletedKey'
    name: 'purgeDeletedKey(string, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The purge deleted key operation removes the key permanently, without the
      possibility of

      recovery. This operation can only be enabled on a soft-delete enabled
      vault. This operation

      requires the keys/purge permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      await client.deleteKey("MyKey");

      // ...

      await client.purgeDeletedKey("MyKey");

      ```
    syntax:
      content: 'function purgeDeletedKey(name: string, options?: RequestOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.recoverDeletedKey'
    name: 'recoverDeletedKey(string, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recovers the deleted key in the specified vault. This operation can only
      be performed on a

      soft-delete enabled vault. This operation requires the keys/recover
      permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      await client.deleteKey("MyKey");

      // ...

      await client.recoverDeletedKey("MyKey");

      ```
    syntax:
      content: 'function recoverDeletedKey(name: string, options?: RequestOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the deleted key.
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.restoreKey'
    name: 'restoreKey(Uint8Array, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restores a backed up key, and all its versions, to a vault. This operation
      requires the

      keys/restore permission.

      Example usage:

      ```ts

      let client = new KeysClient(url, credentials);

      let backupContents = await client.backupKey("MyKey");

      // ...

      let key = await client.restoreKey(backupContents);

      ```
    syntax:
      content: 'function restoreKey(backup: Uint8Array, options?: RequestOptions)'
      parameters:
        - id: backup
          type:
            - Uint8Array
          description: The backup blob associated with a key bundle.
        - id: options
          type:
            - '@azure/keyvault-keys.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.updateKey'
    name: 'updateKey(string, string, UpdateKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The UPDATE operation changes specified attributes of an existing stored
      key. Attributes that

      are not specified in the request are left unchanged. The value of a key
      itself cannot be

      changed. This operation requires the keys/set permission.

      Example usage:

      ```ts

      let keyName = "MyKey";

      let client = new KeysClient(url, credentials);

      let key = await client.getKey(keyName);

      let result = await client.updateKey(keyName, key.version, { enabled: false
      });

      ```
    syntax:
      content: >-
        function updateKey(name: string, keyVersion: string, options?:
        UpdateKeyOptions)
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.UpdateKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.Key>
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeysClient.vaultBaseUrl'
    name: vaultBaseUrl
    fullName: vaultBaseUrl
    children: []
    langs:
      - typeScript
    type: property
    summary: The base URL to the vault
    syntax:
      content: 'vaultBaseUrl: string'
      return:
        type:
          - string
    package: '@azure/keyvault-keys'
references:
  - uid: Pipeline | @azure/keyvault-keys.NewPipelineOptions
    name: NewPipelineOptions
    spec.typeScript:
      - name: 'Pipeline | '
        fullName: 'Pipeline | '
      - name: NewPipelineOptions
        fullName: NewPipelineOptions
        uid: '@azure/keyvault-keys.NewPipelineOptions'
  - uid: '@azure/keyvault-keys.RequestOptions'
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/keyvault-keys.RequestOptions'
  - uid: '@azure/keyvault-keys.CreateEcKeyOptions'
    name: CreateEcKeyOptions
    spec.typeScript:
      - name: CreateEcKeyOptions
        fullName: CreateEcKeyOptions
        uid: '@azure/keyvault-keys.CreateEcKeyOptions'
  - uid: Promise<@azure/keyvault-keys.Key>
    name: Key>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Key
        fullName: Key
        uid: '@azure/keyvault-keys.Key'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.JsonWebKeyType'
    name: JsonWebKeyType
    spec.typeScript:
      - name: JsonWebKeyType
        fullName: JsonWebKeyType
        uid: '@azure/keyvault-keys.JsonWebKeyType'
  - uid: '@azure/keyvault-keys.CreateKeyOptions'
    name: CreateKeyOptions
    spec.typeScript:
      - name: CreateKeyOptions
        fullName: CreateKeyOptions
        uid: '@azure/keyvault-keys.CreateKeyOptions'
  - uid: '@azure/keyvault-keys.CreateRsaKeyOptions'
    name: CreateRsaKeyOptions
    spec.typeScript:
      - name: CreateRsaKeyOptions
        fullName: CreateRsaKeyOptions
        uid: '@azure/keyvault-keys.CreateRsaKeyOptions'
  - uid: Promise<@azure/keyvault-keys.DeletedKey>
    name: DeletedKey>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DeletedKey
        fullName: DeletedKey
        uid: '@azure/keyvault-keys.DeletedKey'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.GetKeyOptions'
    name: GetKeyOptions
    spec.typeScript:
      - name: GetKeyOptions
        fullName: GetKeyOptions
        uid: '@azure/keyvault-keys.GetKeyOptions'
  - uid: '@azure/keyvault-keys.JsonWebKey'
    name: JsonWebKey
    spec.typeScript:
      - name: JsonWebKey
        fullName: JsonWebKey
        uid: '@azure/keyvault-keys.JsonWebKey'
  - uid: '@azure/keyvault-keys.ImportKeyOptions'
    name: ImportKeyOptions
    spec.typeScript:
      - name: ImportKeyOptions
        fullName: ImportKeyOptions
        uid: '@azure/keyvault-keys.ImportKeyOptions'
  - uid: '@azure/keyvault-keys.ListKeysOptions'
    name: ListKeysOptions
    spec.typeScript:
      - name: ListKeysOptions
        fullName: ListKeysOptions
        uid: '@azure/keyvault-keys.ListKeysOptions'
  - uid: >-
      PagedAsyncIterableIterator<@azure/keyvault-keys.KeyAttributes,
      @azure/keyvault-keys.KeyAttributes[]>
    name: 'KeyAttributes[]>'
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: KeyAttributes
        fullName: KeyAttributes
        uid: '@azure/keyvault-keys.KeyAttributes'
      - name: ', '
        fullName: ', '
      - name: KeyAttributes
        fullName: KeyAttributes
        uid: '@azure/keyvault-keys.KeyAttributes'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/keyvault-keys.UpdateKeyOptions'
    name: UpdateKeyOptions
    spec.typeScript:
      - name: UpdateKeyOptions
        fullName: UpdateKeyOptions
        uid: '@azure/keyvault-keys.UpdateKeyOptions'
  - uid: '@azure/keyvault-keys.NewPipelineOptions'
    name: NewPipelineOptions
    spec.typeScript:
      - name: NewPipelineOptions
        fullName: NewPipelineOptions
        uid: '@azure/keyvault-keys.NewPipelineOptions'
