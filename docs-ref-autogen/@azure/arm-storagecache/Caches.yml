### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-storagecache.Caches'
    name: Caches
    fullName: Caches
    children:
      - '@azure/arm-storagecache.Caches.beginCreateOrUpdate'
      - '@azure/arm-storagecache.Caches.beginDeleteMethod'
      - '@azure/arm-storagecache.Caches.beginFlush'
      - '@azure/arm-storagecache.Caches.beginStart'
      - '@azure/arm-storagecache.Caches.beginStop'
      - '@azure/arm-storagecache.Caches.beginUpgradeFirmware'
      - '@azure/arm-storagecache.Caches.constructor'
      - '@azure/arm-storagecache.Caches.createOrUpdate'
      - '@azure/arm-storagecache.Caches.deleteMethod'
      - '@azure/arm-storagecache.Caches.flush'
      - '@azure/arm-storagecache.Caches.get'
      - '@azure/arm-storagecache.Caches.get_2'
      - '@azure/arm-storagecache.Caches.get_1'
      - '@azure/arm-storagecache.Caches.list'
      - '@azure/arm-storagecache.Caches.list_2'
      - '@azure/arm-storagecache.Caches.list_1'
      - '@azure/arm-storagecache.Caches.listByResourceGroup'
      - '@azure/arm-storagecache.Caches.listByResourceGroup_2'
      - '@azure/arm-storagecache.Caches.listByResourceGroup_1'
      - '@azure/arm-storagecache.Caches.listByResourceGroupNext'
      - '@azure/arm-storagecache.Caches.listByResourceGroupNext_2'
      - '@azure/arm-storagecache.Caches.listByResourceGroupNext_1'
      - '@azure/arm-storagecache.Caches.listNext'
      - '@azure/arm-storagecache.Caches.listNext_2'
      - '@azure/arm-storagecache.Caches.listNext_1'
      - '@azure/arm-storagecache.Caches.start'
      - '@azure/arm-storagecache.Caches.stop'
      - '@azure/arm-storagecache.Caches.update_2'
      - '@azure/arm-storagecache.Caches.update'
      - '@azure/arm-storagecache.Caches.update_1'
      - '@azure/arm-storagecache.Caches.upgradeFirmware'
    langs:
      - typeScript
    type: class
    summary: Class representing a Caches.
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.beginCreateOrUpdate'
    name: >-
      beginCreateOrUpdate(string, string,
      Models.CachesBeginCreateOrUpdateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update a Cache.
    syntax:
      content: >-
        function beginCreateOrUpdate(resourceGroupName: string, cacheName:
        string, options?: Models.CachesBeginCreateOrUpdateOptionalParams)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - Models.CachesBeginCreateOrUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.beginDeleteMethod'
    name: 'beginDeleteMethod(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Schedules a Cache for deletion.
    syntax:
      content: >-
        function beginDeleteMethod(resourceGroupName: string, cacheName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.beginFlush'
    name: 'beginFlush(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Tells a Cache to write all dirty data to the Storage Target(s). During the
      flush, clients will

      see errors returned until the flush is complete.
    syntax:
      content: >-
        function beginFlush(resourceGroupName: string, cacheName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.beginStart'
    name: 'beginStart(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Tells a Stopped state Cache to transition to Active state.
    syntax:
      content: >-
        function beginStart(resourceGroupName: string, cacheName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.beginStop'
    name: 'beginStop(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Tells an Active Cache to transition to Stopped state.
    syntax:
      content: >-
        function beginStop(resourceGroupName: string, cacheName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.beginUpgradeFirmware'
    name: 'beginUpgradeFirmware(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Upgrade a Cache's firmware if a new version is available. Otherwise, this
      operation has no

      effect.
    syntax:
      content: >-
        function beginUpgradeFirmware(resourceGroupName: string, cacheName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.constructor'
    name: Caches(StorageCacheManagementClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Caches.
    syntax:
      content: 'new Caches(client: StorageCacheManagementClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/arm-storagecache.StorageCacheManagementClientContext'
          description: |
            Reference to the service client.
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.createOrUpdate'
    name: 'createOrUpdate(string, string, Models.CachesCreateOrUpdateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update a Cache.
    syntax:
      content: >-
        function createOrUpdate(resourceGroupName: string, cacheName: string,
        options?: Models.CachesCreateOrUpdateOptionalParams)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - Models.CachesCreateOrUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CachesCreateOrUpdateResponse>
        description: Promise<Models.CachesCreateOrUpdateResponse>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.deleteMethod'
    name: 'deleteMethod(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Schedules a Cache for deletion.
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, cacheName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CachesDeleteMethodResponse>
        description: Promise<Models.CachesDeleteMethodResponse>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.flush'
    name: 'flush(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Tells a Cache to write all dirty data to the Storage Target(s). During the
      flush, clients will

      see errors returned until the flush is complete.
    syntax:
      content: >-
        function flush(resourceGroupName: string, cacheName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CachesFlushResponse>
        description: Promise<Models.CachesFlushResponse>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.get'
    name: 'get(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a Cache.
    syntax:
      content: >-
        function get(resourceGroupName: string, cacheName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CachesGetResponse>
        description: Promise<Models.CachesGetResponse>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.get_2'
    name: 'get(string, string, RequestOptionsBase, ServiceCallback<Cache>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(resourceGroupName: string, cacheName: string, options:
        RequestOptionsBase, callback: ServiceCallback<Cache>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-storagecache.Cache>
          description: |
            The callback
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.get_1'
    name: 'get(string, string, ServiceCallback<Cache>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(resourceGroupName: string, cacheName: string, callback:
        ServiceCallback<Cache>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-storagecache.Cache>
          description: |
            The callback
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.list'
    name: list(msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns all Caches the user has access to under a subscription.
    syntax:
      content: 'function list(options?: msRest.RequestOptionsBase)'
      parameters:
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CachesListResponse>
        description: Promise<Models.CachesListResponse>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.list_2'
    name: 'list(RequestOptionsBase, ServiceCallback<CachesListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function list(options: RequestOptionsBase, callback:
        ServiceCallback<CachesListResult>)
      parameters:
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-storagecache.CachesListResult>
          description: |
            The callback
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.list_1'
    name: list(ServiceCallback<CachesListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(callback: ServiceCallback<CachesListResult>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/arm-storagecache.CachesListResult>
          description: |
            The callback
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.listByResourceGroup'
    name: 'listByResourceGroup(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns all Caches the user has access to under a resource group.
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CachesListByResourceGroupResponse>
        description: Promise<Models.CachesListByResourceGroupResponse>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.listByResourceGroup_2'
    name: >-
      listByResourceGroup(string, RequestOptionsBase,
      ServiceCallback<CachesListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options:
        RequestOptionsBase, callback: ServiceCallback<CachesListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-storagecache.CachesListResult>
          description: |
            The callback
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.listByResourceGroup_1'
    name: 'listByResourceGroup(string, ServiceCallback<CachesListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, callback:
        ServiceCallback<CachesListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-storagecache.CachesListResult>
          description: |
            The callback
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.listByResourceGroupNext'
    name: 'listByResourceGroupNext(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns all Caches the user has access to under a resource group.
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CachesListByResourceGroupNextResponse>
        description: Promise<Models.CachesListByResourceGroupNextResponse>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.listByResourceGroupNext_2'
    name: >-
      listByResourceGroupNext(string, RequestOptionsBase,
      ServiceCallback<CachesListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<CachesListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-storagecache.CachesListResult>
          description: |
            The callback
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.listByResourceGroupNext_1'
    name: 'listByResourceGroupNext(string, ServiceCallback<CachesListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, callback:
        ServiceCallback<CachesListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-storagecache.CachesListResult>
          description: |
            The callback
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.listNext'
    name: 'listNext(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns all Caches the user has access to under a subscription.
    syntax:
      content: >-
        function listNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CachesListNextResponse>
        description: Promise<Models.CachesListNextResponse>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.listNext_2'
    name: 'listNext(string, RequestOptionsBase, ServiceCallback<CachesListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listNext(nextPageLink: string, options: RequestOptionsBase,
        callback: ServiceCallback<CachesListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-storagecache.CachesListResult>
          description: |
            The callback
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.listNext_1'
    name: 'listNext(string, ServiceCallback<CachesListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listNext(nextPageLink: string, callback:
        ServiceCallback<CachesListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-storagecache.CachesListResult>
          description: |
            The callback
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.start'
    name: 'start(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Tells a Stopped state Cache to transition to Active state.
    syntax:
      content: >-
        function start(resourceGroupName: string, cacheName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CachesStartResponse>
        description: Promise<Models.CachesStartResponse>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.stop'
    name: 'stop(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Tells an Active Cache to transition to Stopped state.
    syntax:
      content: >-
        function stop(resourceGroupName: string, cacheName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CachesStopResponse>
        description: Promise<Models.CachesStopResponse>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.update_2'
    name: 'update(string, string, CachesUpdateOptionalParams, ServiceCallback<Cache>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(resourceGroupName: string, cacheName: string, options:
        CachesUpdateOptionalParams, callback: ServiceCallback<Cache>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - '@azure/arm-storagecache.CachesUpdateOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-storagecache.Cache>
          description: |
            The callback
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.update'
    name: 'update(string, string, Models.CachesUpdateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update a Cache instance.
    syntax:
      content: >-
        function update(resourceGroupName: string, cacheName: string, options?:
        Models.CachesUpdateOptionalParams)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - Models.CachesUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CachesUpdateResponse>
        description: Promise<Models.CachesUpdateResponse>
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.update_1'
    name: 'update(string, string, ServiceCallback<Cache>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(resourceGroupName: string, cacheName: string, callback:
        ServiceCallback<Cache>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-storagecache.Cache>
          description: |
            The callback
    package: '@azure/arm-storagecache'
  - uid: '@azure/arm-storagecache.Caches.upgradeFirmware'
    name: 'upgradeFirmware(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Upgrade a Cache's firmware if a new version is available. Otherwise, this
      operation has no

      effect.
    syntax:
      content: >-
        function upgradeFirmware(resourceGroupName: string, cacheName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: Target resource group.
        - id: cacheName
          type:
            - string
          description: Name of Cache.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CachesUpgradeFirmwareResponse>
        description: Promise<Models.CachesUpgradeFirmwareResponse>
    package: '@azure/arm-storagecache'
references:
  - uid: '@azure/arm-storagecache.StorageCacheManagementClientContext'
    name: StorageCacheManagementClientContext
    spec.typeScript:
      - name: StorageCacheManagementClientContext
        fullName: StorageCacheManagementClientContext
        uid: '@azure/arm-storagecache.StorageCacheManagementClientContext'
  - uid: ServiceCallback<@azure/arm-storagecache.Cache>
    name: Cache>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: Cache
        fullName: Cache
        uid: '@azure/arm-storagecache.Cache'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-storagecache.CachesListResult>
    name: CachesListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CachesListResult
        fullName: CachesListResult
        uid: '@azure/arm-storagecache.CachesListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/arm-storagecache.CachesUpdateOptionalParams'
    name: CachesUpdateOptionalParams
    spec.typeScript:
      - name: CachesUpdateOptionalParams
        fullName: CachesUpdateOptionalParams
        uid: '@azure/arm-storagecache.CachesUpdateOptionalParams'
