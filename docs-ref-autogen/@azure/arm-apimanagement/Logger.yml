### YamlMime:TSType
name: Logger
uid: '@azure/arm-apimanagement.Logger'
package: '@azure/arm-apimanagement'
summary: Class representing a Logger.
fullName: Logger
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: Logger(ApiManagementClientContext)
    uid: '@azure/arm-apimanagement.Logger.constructor'
    package: '@azure/arm-apimanagement'
    summary: Create a Logger.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new Logger(client: ApiManagementClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/arm-apimanagement.ApiManagementClientContext" />
          description: |
            Reference to the service client.
methods:
  - name: >-
      createOrUpdate(string, string, string, LoggerContract,
      LoggerCreateOrUpdateOptionalParams, ServiceCallback<LoggerContract>)
    uid: '@azure/arm-apimanagement.Logger.createOrUpdate_2'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdate(resourceGroupName: string, serviceName: string,
        loggerId: string, parameters: LoggerContract, options:
        LoggerCreateOrUpdateOptionalParams, callback:
        ServiceCallback<LoggerContract>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: parameters
          type: <xref uid="@azure/arm-apimanagement.LoggerContract" />
          description: Create parameters.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-apimanagement.LoggerCreateOrUpdateOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-apimanagement.LoggerContract" />&gt;
          description: |
            The callback
  - name: >-
      createOrUpdate(string, string, string, LoggerContract,
      Models.LoggerCreateOrUpdateOptionalParams)
    uid: '@azure/arm-apimanagement.Logger.createOrUpdate'
    package: '@azure/arm-apimanagement'
    summary: Creates or Updates a logger.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdate(resourceGroupName: string, serviceName: string,
        loggerId: string, parameters: LoggerContract, options?:
        Models.LoggerCreateOrUpdateOptionalParams):
        Promise<Models.LoggerCreateOrUpdateResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: parameters
          type: <xref uid="@azure/arm-apimanagement.LoggerContract" />
          description: Create parameters.
        - id: options
          type: <xref uid="Models.LoggerCreateOrUpdateOptionalParams" />
          description: ''
      return:
        description: Promise<Models.LoggerCreateOrUpdateResponse>
        type: Promise&lt;<xref uid="Models.LoggerCreateOrUpdateResponse" />&gt;
  - name: >-
      createOrUpdate(string, string, string, LoggerContract,
      ServiceCallback<LoggerContract>)
    uid: '@azure/arm-apimanagement.Logger.createOrUpdate_1'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdate(resourceGroupName: string, serviceName: string,
        loggerId: string, parameters: LoggerContract, callback:
        ServiceCallback<LoggerContract>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: parameters
          type: <xref uid="@azure/arm-apimanagement.LoggerContract" />
          description: Create parameters.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-apimanagement.LoggerContract" />&gt;
          description: |
            The callback
  - name: 'deleteMethod(string, string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-apimanagement.Logger.deleteMethod'
    package: '@azure/arm-apimanagement'
    summary: Deletes the specified logger.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, serviceName: string,
        loggerId: string, ifMatch: string, options?: msRest.RequestOptionsBase):
        Promise<RestResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: ifMatch
          type: string
          description: >-
            ETag of the Entity. ETag should match the current entity state from
            the header

            response of the GET request or it should be * for unconditional
            update.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;RestResponse&gt;
  - name: >-
      deleteMethod(string, string, string, string, RequestOptionsBase,
      ServiceCallback<void>)
    uid: '@azure/arm-apimanagement.Logger.deleteMethod_2'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, serviceName: string,
        loggerId: string, ifMatch: string, options: RequestOptionsBase,
        callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: ifMatch
          type: string
          description: >-
            ETag of the Entity. ETag should match the current entity state from
            the header

            response of the GET request or it should be * for unconditional
            update.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'deleteMethod(string, string, string, string, ServiceCallback<void>)'
    uid: '@azure/arm-apimanagement.Logger.deleteMethod_1'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, serviceName: string,
        loggerId: string, ifMatch: string, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: ifMatch
          type: string
          description: >-
            ETag of the Entity. ETag should match the current entity state from
            the header

            response of the GET request or it should be * for unconditional
            update.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'get(string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-apimanagement.Logger.get'
    package: '@azure/arm-apimanagement'
    summary: Gets the details of the logger specified by its identifier.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, serviceName: string, loggerId:
        string, options?: msRest.RequestOptionsBase):
        Promise<Models.LoggerGetResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.LoggerGetResponse>
        type: Promise&lt;<xref uid="Models.LoggerGetResponse" />&gt;
  - name: >-
      get(string, string, string, RequestOptionsBase,
      ServiceCallback<LoggerContract>)
    uid: '@azure/arm-apimanagement.Logger.get_2'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, serviceName: string, loggerId:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<LoggerContract>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-apimanagement.LoggerContract" />&gt;
          description: |
            The callback
  - name: 'get(string, string, string, ServiceCallback<LoggerContract>)'
    uid: '@azure/arm-apimanagement.Logger.get_1'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, serviceName: string, loggerId:
        string, callback: ServiceCallback<LoggerContract>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-apimanagement.LoggerContract" />&gt;
          description: |
            The callback
  - name: 'getEntityTag(string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-apimanagement.Logger.getEntityTag'
    package: '@azure/arm-apimanagement'
    summary: >-
      Gets the entity state (Etag) version of the logger specified by its
      identifier.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getEntityTag(resourceGroupName: string, serviceName: string,
        loggerId: string, options?: msRest.RequestOptionsBase):
        Promise<Models.LoggerGetEntityTagResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.LoggerGetEntityTagResponse>
        type: Promise&lt;<xref uid="Models.LoggerGetEntityTagResponse" />&gt;
  - name: >-
      getEntityTag(string, string, string, RequestOptionsBase,
      ServiceCallback<void>)
    uid: '@azure/arm-apimanagement.Logger.getEntityTag_2'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getEntityTag(resourceGroupName: string, serviceName: string,
        loggerId: string, options: RequestOptionsBase, callback:
        ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'getEntityTag(string, string, string, ServiceCallback<void>)'
    uid: '@azure/arm-apimanagement.Logger.getEntityTag_1'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getEntityTag(resourceGroupName: string, serviceName: string,
        loggerId: string, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      listByService(string, string, LoggerListByServiceOptionalParams,
      ServiceCallback<LoggerCollection>)
    uid: '@azure/arm-apimanagement.Logger.listByService_2'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByService(resourceGroupName: string, serviceName: string,
        options: LoggerListByServiceOptionalParams, callback:
        ServiceCallback<LoggerCollection>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-apimanagement.LoggerListByServiceOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-apimanagement.LoggerCollection" />&gt;
          description: |
            The callback
  - name: 'listByService(string, string, Models.LoggerListByServiceOptionalParams)'
    uid: '@azure/arm-apimanagement.Logger.listByService'
    package: '@azure/arm-apimanagement'
    summary: Lists a collection of loggers in the specified service instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByService(resourceGroupName: string, serviceName: string,
        options?: Models.LoggerListByServiceOptionalParams):
        Promise<Models.LoggerListByServiceResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: options
          type: <xref uid="Models.LoggerListByServiceOptionalParams" />
          description: ''
      return:
        description: Promise<Models.LoggerListByServiceResponse>
        type: Promise&lt;<xref uid="Models.LoggerListByServiceResponse" />&gt;
  - name: 'listByService(string, string, ServiceCallback<LoggerCollection>)'
    uid: '@azure/arm-apimanagement.Logger.listByService_1'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByService(resourceGroupName: string, serviceName: string,
        callback: ServiceCallback<LoggerCollection>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-apimanagement.LoggerCollection" />&gt;
          description: |
            The callback
  - name: >-
      listByServiceNext(string, LoggerListByServiceNextOptionalParams,
      ServiceCallback<LoggerCollection>)
    uid: '@azure/arm-apimanagement.Logger.listByServiceNext_2'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByServiceNext(nextPageLink: string, options:
        LoggerListByServiceNextOptionalParams, callback:
        ServiceCallback<LoggerCollection>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-apimanagement.LoggerListByServiceNextOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-apimanagement.LoggerCollection" />&gt;
          description: |
            The callback
  - name: 'listByServiceNext(string, Models.LoggerListByServiceNextOptionalParams)'
    uid: '@azure/arm-apimanagement.Logger.listByServiceNext'
    package: '@azure/arm-apimanagement'
    summary: Lists a collection of loggers in the specified service instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByServiceNext(nextPageLink: string, options?:
        Models.LoggerListByServiceNextOptionalParams):
        Promise<Models.LoggerListByServiceNextResponse>
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: <xref uid="Models.LoggerListByServiceNextOptionalParams" />
          description: ''
      return:
        description: Promise<Models.LoggerListByServiceNextResponse>
        type: Promise&lt;<xref uid="Models.LoggerListByServiceNextResponse" />&gt;
  - name: 'listByServiceNext(string, ServiceCallback<LoggerCollection>)'
    uid: '@azure/arm-apimanagement.Logger.listByServiceNext_1'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByServiceNext(nextPageLink: string, callback:
        ServiceCallback<LoggerCollection>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-apimanagement.LoggerCollection" />&gt;
          description: |
            The callback
  - name: >-
      update(string, string, string, LoggerUpdateContract, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-apimanagement.Logger.update'
    package: '@azure/arm-apimanagement'
    summary: Updates an existing logger.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, serviceName: string,
        loggerId: string, parameters: LoggerUpdateContract, ifMatch: string,
        options?: msRest.RequestOptionsBase):
        Promise<Models.LoggerUpdateResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: parameters
          type: <xref uid="@azure/arm-apimanagement.LoggerUpdateContract" />
          description: Update parameters.
        - id: ifMatch
          type: string
          description: >-
            ETag of the Entity. ETag should match the current entity state from
            the header

            response of the GET request or it should be * for unconditional
            update.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.LoggerUpdateResponse>
        type: Promise&lt;<xref uid="Models.LoggerUpdateResponse" />&gt;
  - name: >-
      update(string, string, string, LoggerUpdateContract, string,
      RequestOptionsBase, ServiceCallback<LoggerContract>)
    uid: '@azure/arm-apimanagement.Logger.update_2'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, serviceName: string,
        loggerId: string, parameters: LoggerUpdateContract, ifMatch: string,
        options: RequestOptionsBase, callback: ServiceCallback<LoggerContract>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: parameters
          type: <xref uid="@azure/arm-apimanagement.LoggerUpdateContract" />
          description: Update parameters.
        - id: ifMatch
          type: string
          description: >-
            ETag of the Entity. ETag should match the current entity state from
            the header

            response of the GET request or it should be * for unconditional
            update.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-apimanagement.LoggerContract" />&gt;
          description: |
            The callback
  - name: >-
      update(string, string, string, LoggerUpdateContract, string,
      ServiceCallback<LoggerContract>)
    uid: '@azure/arm-apimanagement.Logger.update_1'
    package: '@azure/arm-apimanagement'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, serviceName: string,
        loggerId: string, parameters: LoggerUpdateContract, ifMatch: string,
        callback: ServiceCallback<LoggerContract>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: serviceName
          type: string
          description: The name of the API Management service.
        - id: loggerId
          type: string
          description: >-
            Logger identifier. Must be unique in the API Management service
            instance.
        - id: parameters
          type: <xref uid="@azure/arm-apimanagement.LoggerUpdateContract" />
          description: Update parameters.
        - id: ifMatch
          type: string
          description: >-
            ETag of the Entity. ETag should match the current entity state from
            the header

            response of the GET request or it should be * for unconditional
            update.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-apimanagement.LoggerContract" />&gt;
          description: |
            The callback
