### YamlMime:TSType
name: JSONArray
uid: '@azure/cosmos.JSONArray'
package: '@azure/cosmos'
summary: ''
fullName: JSONArray
type: interface
properties:
  - name: Array
    uid: '@azure/cosmos.JSONArray.Array'
    package: '@azure/cosmos'
    summary: ''
    fullName: Array
    syntax:
      content: 'Array: ArrayConstructor'
      return:
        type: ArrayConstructor
        description: ''
  - name: length
    uid: '@azure/cosmos.JSONArray.length'
    package: '@azure/cosmos'
    summary: >-
      Gets or sets the length of the array. This is a number one higher than the
      highest element defined in an array.
    fullName: length
    syntax:
      content: 'length: number'
      return:
        type: number
        description: ''
methods:
  - name: 'concat(ConcatArray<JSONValue>[])'
    uid: '@azure/cosmos.JSONArray.concat'
    package: '@azure/cosmos'
    summary: Combines two or more arrays.
    syntax:
      content: 'function concat(items: ConcatArray<JSONValue>[])'
      parameters:
        - id: items
          type: 'ConcatArray&lt;<xref uid="@azure/cosmos.JSONValue" />&gt;[]'
          description: |
            Additional items to add to the end of array1.
      return:
        type: '<xref uid="@azure/cosmos.JSONValue" />[]'
        description: ''
  - name: 'concat(T | ConcatArray<T>[])'
    uid: '@azure/cosmos.JSONArray.concat_1'
    package: '@azure/cosmos'
    summary: Combines two or more arrays.
    syntax:
      content: 'function concat(items: T | ConcatArray<T>[])'
      parameters:
        - id: items
          type: 'T | ConcatArray&lt;T&gt;[]'
          description: |
            Additional items to add to the end of array1.
      return:
        type: '<xref uid="@azure/cosmos.JSONValue" />[]'
        description: ''
  - name: entries()
    uid: '@azure/cosmos.JSONArray.entries'
    package: '@azure/cosmos'
    summary: 'Returns an iterable of key, value pairs for every entry in the array'
    syntax:
      content: function entries()
      return:
        type: IterableIterator&lt;Object&gt;
        description: ''
  - name: >-
      every((value: JSONValue, index: number, array: JSONValue[]) => unknown,
      any)
    uid: '@azure/cosmos.JSONArray.every'
    package: '@azure/cosmos'
    summary: Determines whether all the members of an array satisfy the specified test.
    syntax:
      content: >-
        function every(callbackfn: (value: JSONValue, index: number, array:
        JSONValue[]) => unknown, thisArg?: any)
      parameters:
        - id: callbackfn
          type: '(value: JSONValue, index: number, array: JSONValue[]) =&gt; unknown'
          description: >-
            A function that accepts up to three arguments. The every method
            calls the callbackfn function for each element in array1 until the
            callbackfn returns false, or until the end of the array.
        - id: thisArg
          type: any
          description: >
            An object to which the this keyword can refer in the callbackfn
            function. If thisArg is omitted, undefined is used as the this
            value.
      return:
        type: boolean
        description: ''
  - name: >-
      filter((value: JSONValue, index: number, array: JSONValue[]) => unknown,
      any)
    uid: '@azure/cosmos.JSONArray.filter_1'
    package: '@azure/cosmos'
    summary: >-
      Returns the elements of an array that meet the condition specified in a
      callback function.
    syntax:
      content: >-
        function filter(callbackfn: (value: JSONValue, index: number, array:
        JSONValue[]) => unknown, thisArg?: any)
      parameters:
        - id: callbackfn
          type: '(value: JSONValue, index: number, array: JSONValue[]) =&gt; unknown'
          description: >-
            A function that accepts up to three arguments. The filter method
            calls the callbackfn function one time for each element in the
            array.
        - id: thisArg
          type: any
          description: >
            An object to which the this keyword can refer in the callbackfn
            function. If thisArg is omitted, undefined is used as the this
            value.
      return:
        type: '<xref uid="@azure/cosmos.JSONValue" />[]'
        description: ''
  - name: >-
      filter<S>((value: JSONValue, index: number, array: JSONValue[]) =>
      boolean, any)
    uid: '@azure/cosmos.JSONArray.filter'
    package: '@azure/cosmos'
    summary: >-
      Returns the elements of an array that meet the condition specified in a
      callback function.
    syntax:
      content: >-
        function filter<S>(callbackfn: (value: JSONValue, index: number, array:
        JSONValue[]) => boolean, thisArg?: any)
      parameters:
        - id: callbackfn
          type: '(value: JSONValue, index: number, array: JSONValue[]) =&gt; boolean'
          description: >-
            A function that accepts up to three arguments. The filter method
            calls the callbackfn function one time for each element in the
            array.
        - id: thisArg
          type: any
          description: >
            An object to which the this keyword can refer in the callbackfn
            function. If thisArg is omitted, undefined is used as the this
            value.
      return:
        type: 'S[]'
        description: ''
  - name: >-
      forEach((value: JSONValue, index: number, array: JSONValue[]) => void,
      any)
    uid: '@azure/cosmos.JSONArray.forEach'
    package: '@azure/cosmos'
    summary: Performs the specified action for each element in an array.
    syntax:
      content: >-
        function forEach(callbackfn: (value: JSONValue, index: number, array:
        JSONValue[]) => void, thisArg?: any)
      parameters:
        - id: callbackfn
          type: '(value: JSONValue, index: number, array: JSONValue[]) =&gt; void'
          description: >-
            A function that accepts up to three arguments. forEach calls the
            callbackfn function one time for each element in the array.
        - id: thisArg
          type: any
          description: >
            An object to which the this keyword can refer in the callbackfn
            function. If thisArg is omitted, undefined is used as the this
            value.
  - name: 'indexOf(JSONValue, number)'
    uid: '@azure/cosmos.JSONArray.indexOf'
    package: '@azure/cosmos'
    summary: Returns the index of the first occurrence of a value in an array.
    syntax:
      content: 'function indexOf(searchElement: JSONValue, fromIndex?: number)'
      parameters:
        - id: searchElement
          type: <xref uid="@azure/cosmos.JSONValue" />
          description: The value to locate in the array.
        - id: fromIndex
          type: number
          description: >
            The array index at which to begin the search. If fromIndex is
            omitted, the search starts at index 0.
      return:
        type: number
        description: ''
  - name: join(string)
    uid: '@azure/cosmos.JSONArray.join'
    package: '@azure/cosmos'
    summary: >-
      Adds all the elements of an array separated by the specified separator
      string.
    syntax:
      content: 'function join(separator?: string)'
      parameters:
        - id: separator
          type: string
          description: >
            A string used to separate one element of an array from the next in
            the resulting String. If omitted, the array elements are separated
            with a comma.
      return:
        type: string
        description: ''
  - name: keys()
    uid: '@azure/cosmos.JSONArray.keys'
    package: '@azure/cosmos'
    summary: Returns an iterable of keys in the array
    syntax:
      content: function keys()
      return:
        type: IterableIterator&lt;number&gt;
        description: ''
  - name: 'lastIndexOf(JSONValue, number)'
    uid: '@azure/cosmos.JSONArray.lastIndexOf'
    package: '@azure/cosmos'
    summary: Returns the index of the last occurrence of a specified value in an array.
    syntax:
      content: 'function lastIndexOf(searchElement: JSONValue, fromIndex?: number)'
      parameters:
        - id: searchElement
          type: <xref uid="@azure/cosmos.JSONValue" />
          description: The value to locate in the array.
        - id: fromIndex
          type: number
          description: >
            The array index at which to begin the search. If fromIndex is
            omitted, the search starts at the last index in the array.
      return:
        type: number
        description: ''
  - name: 'map<U>((value: JSONValue, index: number, array: JSONValue[]) => U, any)'
    uid: '@azure/cosmos.JSONArray.map'
    package: '@azure/cosmos'
    summary: >-
      Calls a defined callback function on each element of an array, and returns
      an array that contains the results.
    syntax:
      content: >-
        function map<U>(callbackfn: (value: JSONValue, index: number, array:
        JSONValue[]) => U, thisArg?: any)
      parameters:
        - id: callbackfn
          type: '(value: JSONValue, index: number, array: JSONValue[]) =&gt; U'
          description: >-
            A function that accepts up to three arguments. The map method calls
            the callbackfn function one time for each element in the array.
        - id: thisArg
          type: any
          description: >
            An object to which the this keyword can refer in the callbackfn
            function. If thisArg is omitted, undefined is used as the this
            value.
      return:
        type: 'U[]'
        description: ''
  - name: pop()
    uid: '@azure/cosmos.JSONArray.pop'
    package: '@azure/cosmos'
    summary: Removes the last element from an array and returns it.
    syntax:
      content: function pop()
      return:
        type: <xref uid="@azure/cosmos.JSONValue" /> | undefined
        description: ''
  - name: 'push(JSONValue[])'
    uid: '@azure/cosmos.JSONArray.push'
    package: '@azure/cosmos'
    summary: 'Appends new elements to an array, and returns the new length of the array.'
    syntax:
      content: 'function push(items: JSONValue[])'
      parameters:
        - id: items
          type: '<xref uid="@azure/cosmos.JSONValue" />[]'
          description: |
            New elements of the Array.
      return:
        type: number
        description: ''
  - name: >-
      reduce((previousValue: JSONValue, currentValue: JSONValue, currentIndex:
      number, array: JSONValue[]) => JSONValue)
    uid: '@azure/cosmos.JSONArray.reduce'
    package: '@azure/cosmos'
    summary: >-
      Calls the specified callback function for all the elements in an array.
      The return value of the callback function is the accumulated result, and
      is provided as an argument in the next call to the callback function.
    syntax:
      content: >-
        function reduce(callbackfn: (previousValue: JSONValue, currentValue:
        JSONValue, currentIndex: number, array: JSONValue[]) => JSONValue)
      parameters:
        - id: callbackfn
          type: >-
            (previousValue: JSONValue, currentValue: JSONValue, currentIndex:
            number, array: JSONValue[]) =&gt; JSONValue
          description: >-
            A function that accepts up to four arguments. The reduce method
            calls the callbackfn function one time for each element in the
            array.
      return:
        type: <xref uid="@azure/cosmos.JSONValue" />
        description: ''
  - name: >-
      reduce((previousValue: JSONValue, currentValue: JSONValue, currentIndex:
      number, array: JSONValue[]) => JSONValue, JSONValue)
    uid: '@azure/cosmos.JSONArray.reduce_1'
    package: '@azure/cosmos'
    summary: ''
    syntax:
      content: >-
        function reduce(callbackfn: (previousValue: JSONValue, currentValue:
        JSONValue, currentIndex: number, array: JSONValue[]) => JSONValue,
        initialValue: JSONValue)
      parameters:
        - id: callbackfn
          type: >-
            (previousValue: JSONValue, currentValue: JSONValue, currentIndex:
            number, array: JSONValue[]) =&gt; JSONValue
          description: ''
        - id: initialValue
          type: <xref uid="@azure/cosmos.JSONValue" />
          description: ''
      return:
        type: <xref uid="@azure/cosmos.JSONValue" />
        description: ''
  - name: >-
      reduce<U>((previousValue: U, currentValue: JSONValue, currentIndex:
      number, array: JSONValue[]) => U, U)
    uid: '@azure/cosmos.JSONArray.reduce_2'
    package: '@azure/cosmos'
    summary: >-
      Calls the specified callback function for all the elements in an array.
      The return value of the callback function is the accumulated result, and
      is provided as an argument in the next call to the callback function.
    syntax:
      content: >-
        function reduce<U>(callbackfn: (previousValue: U, currentValue:
        JSONValue, currentIndex: number, array: JSONValue[]) => U, initialValue:
        U)
      parameters:
        - id: callbackfn
          type: >-
            (previousValue: U, currentValue: JSONValue, currentIndex: number,
            array: JSONValue[]) =&gt; U
          description: >-
            A function that accepts up to four arguments. The reduce method
            calls the callbackfn function one time for each element in the
            array.
        - id: initialValue
          type: U
          description: >
            If initialValue is specified, it is used as the initial value to
            start the accumulation. The first call to the callbackfn function
            provides this value as an argument instead of an array value.
      return:
        type: U
        description: ''
  - name: >-
      reduceRight((previousValue: JSONValue, currentValue: JSONValue,
      currentIndex: number, array: JSONValue[]) => JSONValue)
    uid: '@azure/cosmos.JSONArray.reduceRight'
    package: '@azure/cosmos'
    summary: >-
      Calls the specified callback function for all the elements in an array, in
      descending order. The return value of the callback function is the
      accumulated result, and is provided as an argument in the next call to the
      callback function.
    syntax:
      content: >-
        function reduceRight(callbackfn: (previousValue: JSONValue,
        currentValue: JSONValue, currentIndex: number, array: JSONValue[]) =>
        JSONValue)
      parameters:
        - id: callbackfn
          type: >-
            (previousValue: JSONValue, currentValue: JSONValue, currentIndex:
            number, array: JSONValue[]) =&gt; JSONValue
          description: >-
            A function that accepts up to four arguments. The reduceRight method
            calls the callbackfn function one time for each element in the
            array.
      return:
        type: <xref uid="@azure/cosmos.JSONValue" />
        description: ''
  - name: >-
      reduceRight((previousValue: JSONValue, currentValue: JSONValue,
      currentIndex: number, array: JSONValue[]) => JSONValue, JSONValue)
    uid: '@azure/cosmos.JSONArray.reduceRight_1'
    package: '@azure/cosmos'
    summary: ''
    syntax:
      content: >-
        function reduceRight(callbackfn: (previousValue: JSONValue,
        currentValue: JSONValue, currentIndex: number, array: JSONValue[]) =>
        JSONValue, initialValue: JSONValue)
      parameters:
        - id: callbackfn
          type: >-
            (previousValue: JSONValue, currentValue: JSONValue, currentIndex:
            number, array: JSONValue[]) =&gt; JSONValue
          description: ''
        - id: initialValue
          type: <xref uid="@azure/cosmos.JSONValue" />
          description: ''
      return:
        type: <xref uid="@azure/cosmos.JSONValue" />
        description: ''
  - name: >-
      reduceRight<U>((previousValue: U, currentValue: JSONValue, currentIndex:
      number, array: JSONValue[]) => U, U)
    uid: '@azure/cosmos.JSONArray.reduceRight_2'
    package: '@azure/cosmos'
    summary: >-
      Calls the specified callback function for all the elements in an array, in
      descending order. The return value of the callback function is the
      accumulated result, and is provided as an argument in the next call to the
      callback function.
    syntax:
      content: >-
        function reduceRight<U>(callbackfn: (previousValue: U, currentValue:
        JSONValue, currentIndex: number, array: JSONValue[]) => U, initialValue:
        U)
      parameters:
        - id: callbackfn
          type: >-
            (previousValue: U, currentValue: JSONValue, currentIndex: number,
            array: JSONValue[]) =&gt; U
          description: >-
            A function that accepts up to four arguments. The reduceRight method
            calls the callbackfn function one time for each element in the
            array.
        - id: initialValue
          type: U
          description: >
            If initialValue is specified, it is used as the initial value to
            start the accumulation. The first call to the callbackfn function
            provides this value as an argument instead of an array value.
      return:
        type: U
        description: ''
  - name: reverse()
    uid: '@azure/cosmos.JSONArray.reverse'
    package: '@azure/cosmos'
    summary: Reverses the elements in an Array.
    syntax:
      content: function reverse()
      return:
        type: '<xref uid="@azure/cosmos.JSONValue" />[]'
        description: ''
  - name: shift()
    uid: '@azure/cosmos.JSONArray.shift'
    package: '@azure/cosmos'
    summary: Removes the first element from an array and returns it.
    syntax:
      content: function shift()
      return:
        type: <xref uid="@azure/cosmos.JSONValue" /> | undefined
        description: ''
  - name: 'slice(number, number)'
    uid: '@azure/cosmos.JSONArray.slice'
    package: '@azure/cosmos'
    summary: Returns a section of an array.
    syntax:
      content: 'function slice(start?: number, end?: number)'
      parameters:
        - id: start
          type: number
          description: The beginning of the specified portion of the array.
        - id: end
          type: number
          description: |
            The end of the specified portion of the array.
      return:
        type: '<xref uid="@azure/cosmos.JSONValue" />[]'
        description: ''
  - name: >-
      some((value: JSONValue, index: number, array: JSONValue[]) => unknown,
      any)
    uid: '@azure/cosmos.JSONArray.some'
    package: '@azure/cosmos'
    summary: >-
      Determines whether the specified callback function returns true for any
      element of an array.
    syntax:
      content: >-
        function some(callbackfn: (value: JSONValue, index: number, array:
        JSONValue[]) => unknown, thisArg?: any)
      parameters:
        - id: callbackfn
          type: '(value: JSONValue, index: number, array: JSONValue[]) =&gt; unknown'
          description: >-
            A function that accepts up to three arguments. The some method calls
            the callbackfn function for each element in array1 until the
            callbackfn returns true, or until the end of the array.
        - id: thisArg
          type: any
          description: >
            An object to which the this keyword can refer in the callbackfn
            function. If thisArg is omitted, undefined is used as the this
            value.
      return:
        type: boolean
        description: ''
  - name: 'sort((a: JSONValue, b: JSONValue) => number)'
    uid: '@azure/cosmos.JSONArray.sort'
    package: '@azure/cosmos'
    summary: Sorts an array.
    syntax:
      content: 'function sort(compareFn?: (a: JSONValue, b: JSONValue) => number)'
      parameters:
        - id: compareFn
          type: '(a: JSONValue, b: JSONValue) =&gt; number'
          description: >
            The name of the function used to determine the order of the
            elements. If omitted, the elements are sorted in ascending, ASCII
            character order.
      return:
        type: this
        description: ''
  - name: 'splice(number, number)'
    uid: '@azure/cosmos.JSONArray.splice'
    package: '@azure/cosmos'
    summary: >-
      Removes elements from an array and, if necessary, inserts new elements in
      their place, returning the deleted elements.
    syntax:
      content: 'function splice(start: number, deleteCount?: number)'
      parameters:
        - id: start
          type: number
          description: >-
            The zero-based location in the array from which to start removing
            elements.
        - id: deleteCount
          type: number
          description: |
            The number of elements to remove.
      return:
        type: '<xref uid="@azure/cosmos.JSONValue" />[]'
        description: ''
  - name: 'splice(number, number, JSONValue[])'
    uid: '@azure/cosmos.JSONArray.splice_1'
    package: '@azure/cosmos'
    summary: >-
      Removes elements from an array and, if necessary, inserts new elements in
      their place, returning the deleted elements.
    syntax:
      content: 'function splice(start: number, deleteCount: number, items: JSONValue[])'
      parameters:
        - id: start
          type: number
          description: >-
            The zero-based location in the array from which to start removing
            elements.
        - id: deleteCount
          type: number
          description: The number of elements to remove.
        - id: items
          type: '<xref uid="@azure/cosmos.JSONValue" />[]'
          description: |
            Elements to insert into the array in place of the deleted elements.
      return:
        type: '<xref uid="@azure/cosmos.JSONValue" />[]'
        description: ''
  - name: toLocaleString()
    uid: '@azure/cosmos.JSONArray.toLocaleString'
    package: '@azure/cosmos'
    summary: >-
      Returns a string representation of an array. The elements are converted to
      string using their toLocalString methods.
    syntax:
      content: function toLocaleString()
      return:
        type: string
        description: ''
  - name: toString()
    uid: '@azure/cosmos.JSONArray.toString'
    package: '@azure/cosmos'
    summary: Returns a string representation of an array.
    syntax:
      content: function toString()
      return:
        type: string
        description: ''
  - name: 'unshift(JSONValue[])'
    uid: '@azure/cosmos.JSONArray.unshift'
    package: '@azure/cosmos'
    summary: Inserts new elements at the start of an array.
    syntax:
      content: 'function unshift(items: JSONValue[])'
      parameters:
        - id: items
          type: '<xref uid="@azure/cosmos.JSONValue" />[]'
          description: |
            Elements to insert at the start of the Array.
      return:
        type: number
        description: ''
  - name: values()
    uid: '@azure/cosmos.JSONArray.values'
    package: '@azure/cosmos'
    summary: Returns an iterable of values in the array
    syntax:
      content: function values()
      return:
        type: IterableIterator&lt;<xref uid="@azure/cosmos.JSONValue" />&gt;
        description: ''
extends: Array&lt;<xref uid="@azure/cosmos.JSONValue" />&gt;
