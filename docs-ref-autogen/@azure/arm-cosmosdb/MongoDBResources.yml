### YamlMime:TSType
name: MongoDBResources
uid: '@azure/arm-cosmosdb.MongoDBResources'
package: '@azure/arm-cosmosdb'
summary: Class representing a MongoDBResources.
fullName: MongoDBResources
type: class
constructors:
  - name: MongoDBResources(CosmosDBManagementClientContext)
    uid: '@azure/arm-cosmosdb.MongoDBResources.constructor'
    package: '@azure/arm-cosmosdb'
    summary: Create a MongoDBResources.
    syntax:
      content: 'new MongoDBResources(client: CosmosDBManagementClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/arm-cosmosdb.CosmosDBManagementClientContext" />
          description: |
            Reference to the service client.
methods:
  - name: >-
      beginCreateUpdateMongoDBCollection(string, string, string, string,
      MongoDBCollectionCreateUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoDBCollection'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB MongoDB Collection
    syntax:
      content: >-
        function beginCreateUpdateMongoDBCollection(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        createUpdateMongoDBCollectionParameters:
        MongoDBCollectionCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: createUpdateMongoDBCollectionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBCollectionCreateUpdateParameters" />
          description: |-
            The parameters to provide for the current MongoDB
            Collection.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginCreateUpdateMongoDBDatabase(string, string, string,
      MongoDBDatabaseCreateUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoDBDatabase'
    package: '@azure/arm-cosmosdb'
    summary: Create or updates Azure Cosmos DB MongoDB database
    syntax:
      content: >-
        function beginCreateUpdateMongoDBDatabase(resourceGroupName: string,
        accountName: string, databaseName: string,
        createUpdateMongoDBDatabaseParameters:
        MongoDBDatabaseCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: createUpdateMongoDBDatabaseParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBDatabaseCreateUpdateParameters" />
          description: |-
            The parameters to provide for the current MongoDB
            database.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginDeleteMongoDBCollection(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoDBCollection'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB MongoDB Collection.
    syntax:
      content: >-
        function beginDeleteMongoDBCollection(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginDeleteMongoDBDatabase(string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoDBDatabase'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB MongoDB database.
    syntax:
      content: >-
        function beginDeleteMongoDBDatabase(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginUpdateMongoDBCollectionThroughput(string, string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginUpdateMongoDBCollectionThroughput
    package: '@azure/arm-cosmosdb'
    summary: Update the RUs per second of an Azure Cosmos DB MongoDB collection
    syntax:
      content: >-
        function beginUpdateMongoDBCollectionThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, collectionName:
        string, updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The RUs per second of the parameters to provide for the
            current MongoDB collection.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginUpdateMongoDBDatabaseThroughput(string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginUpdateMongoDBDatabaseThroughput'
    package: '@azure/arm-cosmosdb'
    summary: Update RUs per second of the an Azure Cosmos DB MongoDB database
    syntax:
      content: >-
        function beginUpdateMongoDBDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, updateThroughputParameters:
        ThroughputSettingsUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The RUs per second of the parameters to provide for the
            current MongoDB database.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      createUpdateMongoDBCollection(string, string, string, string,
      MongoDBCollectionCreateUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.MongoDBResources.createUpdateMongoDBCollection'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB MongoDB Collection
    syntax:
      content: >-
        function createUpdateMongoDBCollection(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        createUpdateMongoDBCollectionParameters:
        MongoDBCollectionCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: createUpdateMongoDBCollectionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBCollectionCreateUpdateParameters" />
          description: |-
            The parameters to provide for the current MongoDB
            Collection.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.MongoDBResourcesCreateUpdateMongoDBCollectionResponse"
          />&gt;
        description: Promise<Models.MongoDBResourcesCreateUpdateMongoDBCollectionResponse>
  - name: >-
      createUpdateMongoDBDatabase(string, string, string,
      MongoDBDatabaseCreateUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.MongoDBResources.createUpdateMongoDBDatabase'
    package: '@azure/arm-cosmosdb'
    summary: Create or updates Azure Cosmos DB MongoDB database
    syntax:
      content: >-
        function createUpdateMongoDBDatabase(resourceGroupName: string,
        accountName: string, databaseName: string,
        createUpdateMongoDBDatabaseParameters:
        MongoDBDatabaseCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: createUpdateMongoDBDatabaseParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBDatabaseCreateUpdateParameters" />
          description: |-
            The parameters to provide for the current MongoDB
            database.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.MongoDBResourcesCreateUpdateMongoDBDatabaseResponse"
          />&gt;
        description: Promise<Models.MongoDBResourcesCreateUpdateMongoDBDatabaseResponse>
  - name: >-
      deleteMongoDBCollection(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.MongoDBResources.deleteMongoDBCollection'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB MongoDB Collection.
    syntax:
      content: >-
        function deleteMongoDBCollection(resourceGroupName: string, accountName:
        string, databaseName: string, collectionName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: 'deleteMongoDBDatabase(string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.MongoDBResources.deleteMongoDBDatabase'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB MongoDB database.
    syntax:
      content: >-
        function deleteMongoDBDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: >-
      getMongoDBCollection(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollection'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the MongoDB collection under an existing Azure Cosmos DB database
      account.
    syntax:
      content: >-
        function getMongoDBCollection(resourceGroupName: string, accountName:
        string, databaseName: string, collectionName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.MongoDBResourcesGetMongoDBCollectionResponse" />&gt;
        description: Promise<Models.MongoDBResourcesGetMongoDBCollectionResponse>
  - name: >-
      getMongoDBCollection(string, string, string, string, RequestOptionsBase,
      ServiceCallback<MongoDBCollectionGetResults>)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollection_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    syntax:
      content: >-
        function getMongoDBCollection(resourceGroupName: string, accountName:
        string, databaseName: string, collectionName: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<MongoDBCollectionGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.MongoDBCollectionGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getMongoDBCollection(string, string, string, string,
      ServiceCallback<MongoDBCollectionGetResults>)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollection_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    syntax:
      content: >-
        function getMongoDBCollection(resourceGroupName: string, accountName:
        string, databaseName: string, collectionName: string, callback:
        ServiceCallback<MongoDBCollectionGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.MongoDBCollectionGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getMongoDBCollectionThroughput(string, string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollectionThroughput'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the RUs per second of the MongoDB collection under an existing Azure
      Cosmos DB database

      account with the provided name.
    syntax:
      content: >-
        function getMongoDBCollectionThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.MongoDBResourcesGetMongoDBCollectionThroughputResponse"
          />&gt;
        description: Promise<Models.MongoDBResourcesGetMongoDBCollectionThroughputResponse>
  - name: >-
      getMongoDBCollectionThroughput(string, string, string, string,
      RequestOptionsBase, ServiceCallback<ThroughputSettingsGetResults>)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollectionThroughput_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    syntax:
      content: >-
        function getMongoDBCollectionThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getMongoDBCollectionThroughput(string, string, string, string,
      ServiceCallback<ThroughputSettingsGetResults>)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollectionThroughput_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    syntax:
      content: >-
        function getMongoDBCollectionThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        callback: ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
          description: |
            The callback
  - name: 'getMongoDBDatabase(string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabase'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the MongoDB databases under an existing Azure Cosmos DB database
      account with the provided

      name.
    syntax:
      content: >-
        function getMongoDBDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.MongoDBResourcesGetMongoDBDatabaseResponse" />&gt;
        description: Promise<Models.MongoDBResourcesGetMongoDBDatabaseResponse>
  - name: >-
      getMongoDBDatabase(string, string, string, RequestOptionsBase,
      ServiceCallback<MongoDBDatabaseGetResults>)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabase_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    syntax:
      content: >-
        function getMongoDBDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, options: RequestOptionsBase, callback:
        ServiceCallback<MongoDBDatabaseGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.MongoDBDatabaseGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getMongoDBDatabase(string, string, string,
      ServiceCallback<MongoDBDatabaseGetResults>)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabase_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    syntax:
      content: >-
        function getMongoDBDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, callback:
        ServiceCallback<MongoDBDatabaseGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.MongoDBDatabaseGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getMongoDBDatabaseThroughput(string, string, string,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabaseThroughput'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the RUs per second of the MongoDB database under an existing Azure
      Cosmos DB database

      account with the provided name.
    syntax:
      content: >-
        function getMongoDBDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.MongoDBResourcesGetMongoDBDatabaseThroughputResponse"
          />&gt;
        description: Promise<Models.MongoDBResourcesGetMongoDBDatabaseThroughputResponse>
  - name: >-
      getMongoDBDatabaseThroughput(string, string, string, RequestOptionsBase,
      ServiceCallback<ThroughputSettingsGetResults>)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabaseThroughput_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    syntax:
      content: >-
        function getMongoDBDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options: RequestOptionsBase,
        callback: ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
          description: |
            The callback
  - name: >-
      getMongoDBDatabaseThroughput(string, string, string,
      ServiceCallback<ThroughputSettingsGetResults>)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabaseThroughput_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    syntax:
      content: >-
        function getMongoDBDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, callback:
        ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
          description: |
            The callback
  - name: 'listMongoDBCollections(string, string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBCollections'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Lists the MongoDB collection under an existing Azure Cosmos DB database
      account.
    syntax:
      content: >-
        function listMongoDBCollections(resourceGroupName: string, accountName:
        string, databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.MongoDBResourcesListMongoDBCollectionsResponse" />&gt;
        description: Promise<Models.MongoDBResourcesListMongoDBCollectionsResponse>
  - name: >-
      listMongoDBCollections(string, string, string, RequestOptionsBase,
      ServiceCallback<MongoDBCollectionListResult>)
    uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBCollections_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    syntax:
      content: >-
        function listMongoDBCollections(resourceGroupName: string, accountName:
        string, databaseName: string, options: RequestOptionsBase, callback:
        ServiceCallback<MongoDBCollectionListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.MongoDBCollectionListResult" />&gt;
          description: |
            The callback
  - name: >-
      listMongoDBCollections(string, string, string,
      ServiceCallback<MongoDBCollectionListResult>)
    uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBCollections_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    syntax:
      content: >-
        function listMongoDBCollections(resourceGroupName: string, accountName:
        string, databaseName: string, callback:
        ServiceCallback<MongoDBCollectionListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.MongoDBCollectionListResult" />&gt;
          description: |
            The callback
  - name: 'listMongoDBDatabases(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBDatabases'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Lists the MongoDB databases under an existing Azure Cosmos DB database
      account.
    syntax:
      content: >-
        function listMongoDBDatabases(resourceGroupName: string, accountName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.MongoDBResourcesListMongoDBDatabasesResponse" />&gt;
        description: Promise<Models.MongoDBResourcesListMongoDBDatabasesResponse>
  - name: >-
      listMongoDBDatabases(string, string, RequestOptionsBase,
      ServiceCallback<MongoDBDatabaseListResult>)
    uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBDatabases_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    syntax:
      content: >-
        function listMongoDBDatabases(resourceGroupName: string, accountName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<MongoDBDatabaseListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.MongoDBDatabaseListResult" />&gt;
          description: |
            The callback
  - name: >-
      listMongoDBDatabases(string, string,
      ServiceCallback<MongoDBDatabaseListResult>)
    uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBDatabases_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    syntax:
      content: >-
        function listMongoDBDatabases(resourceGroupName: string, accountName:
        string, callback: ServiceCallback<MongoDBDatabaseListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.MongoDBDatabaseListResult" />&gt;
          description: |
            The callback
  - name: >-
      updateMongoDBCollectionThroughput(string, string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.MongoDBResources.updateMongoDBCollectionThroughput'
    package: '@azure/arm-cosmosdb'
    summary: Update the RUs per second of an Azure Cosmos DB MongoDB collection
    syntax:
      content: >-
        function updateMongoDBCollectionThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The RUs per second of the parameters to provide for the
            current MongoDB collection.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.MongoDBResourcesUpdateMongoDBCollectionThroughputResponse"
          />&gt;
        description: >-
          Promise<Models.MongoDBResourcesUpdateMongoDBCollectionThroughputResponse>
  - name: >-
      updateMongoDBDatabaseThroughput(string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.MongoDBResources.updateMongoDBDatabaseThroughput'
    package: '@azure/arm-cosmosdb'
    summary: Update RUs per second of the an Azure Cosmos DB MongoDB database
    syntax:
      content: >-
        function updateMongoDBDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, updateThroughputParameters:
        ThroughputSettingsUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The RUs per second of the parameters to provide for the
            current MongoDB database.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse"
          />&gt;
        description: >-
          Promise<Models.MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse>
