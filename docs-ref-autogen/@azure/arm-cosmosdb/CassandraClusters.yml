### YamlMime:TSType
name: CassandraClusters
uid: '@azure/arm-cosmosdb.CassandraClusters'
package: '@azure/arm-cosmosdb'
summary: Class representing a CassandraClusters.
fullName: CassandraClusters
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: CassandraClusters(CosmosDBManagementClientContext)
    uid: '@azure/arm-cosmosdb.CassandraClusters.constructor'
    package: '@azure/arm-cosmosdb'
    summary: Create a CassandraClusters.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new CassandraClusters(client: CosmosDBManagementClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/arm-cosmosdb.CosmosDBManagementClientContext" />
          description: |
            Reference to the service client.
methods:
  - name: >-
      beginCreateUpdate(string, string, ClusterResource,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.CassandraClusters.beginCreateUpdate'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Create or update a managed Cassandra cluster. When updating, you must
      specify all writable

      properties. To update only some properties, use PATCH.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdate(resourceGroupName: string, clusterName:
        string, body: ClusterResource, options?: msRest.RequestOptionsBase):
        Promise<LROPoller>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: body
          type: <xref uid="@azure/arm-cosmosdb.ClusterResource" />
          description: >-
            The properties specifying the desired state of the managed Cassandra
            cluster.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRestAzure.LROPoller>
        type: Promise&lt;LROPoller&gt;
  - name: 'beginDeallocate(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.beginDeallocate'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Deallocate the Managed Cassandra Cluster and Associated Data Centers.
      Deallocation will

      deallocate the host virtual machine of this cluster, and reserved the data
      disk. This won't do

      anything on an already deallocated cluster. Use Start to restart the
      cluster.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeallocate(resourceGroupName: string, clusterName: string,
        options?: msRest.RequestOptionsBase): Promise<LROPoller>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRestAzure.LROPoller>
        type: Promise&lt;LROPoller&gt;
  - name: 'beginDeleteMethod(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.beginDeleteMethod'
    package: '@azure/arm-cosmosdb'
    summary: Deletes a managed Cassandra cluster.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMethod(resourceGroupName: string, clusterName:
        string, options?: msRest.RequestOptionsBase): Promise<LROPoller>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRestAzure.LROPoller>
        type: Promise&lt;LROPoller&gt;
  - name: >-
      beginInvokeCommand(string, string, CommandPostBody,
      msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.CassandraClusters.beginInvokeCommand'
    package: '@azure/arm-cosmosdb'
    summary: Invoke a command like nodetool for cassandra maintenance
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginInvokeCommand(resourceGroupName: string, clusterName:
        string, body: CommandPostBody, options?: msRest.RequestOptionsBase):
        Promise<LROPoller>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: body
          type: <xref uid="@azure/arm-cosmosdb.CommandPostBody" />
          description: Specification which command to run where
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRestAzure.LROPoller>
        type: Promise&lt;LROPoller&gt;
  - name: 'beginStart(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.beginStart'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Start the Managed Cassandra Cluster and Associated Data Centers. Start
      will start the host

      virtual machine of this cluster with reserved data disk. This won't do
      anything on an already

      running cluster. Use Deallocate to deallocate the cluster.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginStart(resourceGroupName: string, clusterName: string,
        options?: msRest.RequestOptionsBase): Promise<LROPoller>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRestAzure.LROPoller>
        type: Promise&lt;LROPoller&gt;
  - name: 'beginUpdate(string, string, ClusterResource, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.beginUpdate'
    package: '@azure/arm-cosmosdb'
    summary: Updates some of the properties of a managed Cassandra cluster.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdate(resourceGroupName: string, clusterName: string,
        body: ClusterResource, options?: msRest.RequestOptionsBase):
        Promise<LROPoller>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: body
          type: <xref uid="@azure/arm-cosmosdb.ClusterResource" />
          description: Parameters to provide for specifying the managed Cassandra cluster.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRestAzure.LROPoller>
        type: Promise&lt;LROPoller&gt;
  - name: 'createUpdate(string, string, ClusterResource, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.createUpdate'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Create or update a managed Cassandra cluster. When updating, you must
      specify all writable

      properties. To update only some properties, use PATCH.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createUpdate(resourceGroupName: string, clusterName: string,
        body: ClusterResource, options?: msRest.RequestOptionsBase):
        Promise<Models.CassandraClustersCreateUpdateResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: body
          type: <xref uid="@azure/arm-cosmosdb.ClusterResource" />
          description: >-
            The properties specifying the desired state of the managed Cassandra
            cluster.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.CassandraClustersCreateUpdateResponse>
        type: >-
          Promise&lt;<xref uid="Models.CassandraClustersCreateUpdateResponse"
          />&gt;
  - name: 'deallocate(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.deallocate'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Deallocate the Managed Cassandra Cluster and Associated Data Centers.
      Deallocation will

      deallocate the host virtual machine of this cluster, and reserved the data
      disk. This won't do

      anything on an already deallocated cluster. Use Start to restart the
      cluster.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deallocate(resourceGroupName: string, clusterName: string,
        options?: msRest.RequestOptionsBase): Promise<RestResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;RestResponse&gt;
  - name: 'deleteMethod(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.deleteMethod'
    package: '@azure/arm-cosmosdb'
    summary: Deletes a managed Cassandra cluster.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, clusterName: string,
        options?: msRest.RequestOptionsBase): Promise<RestResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;RestResponse&gt;
  - name: 'get(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.get'
    package: '@azure/arm-cosmosdb'
    summary: Get the properties of a managed Cassandra cluster.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, clusterName: string, options?:
        msRest.RequestOptionsBase): Promise<Models.CassandraClustersGetResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.CassandraClustersGetResponse>
        type: Promise&lt;<xref uid="Models.CassandraClustersGetResponse" />&gt;
  - name: 'get(string, string, RequestOptionsBase, ServiceCallback<ClusterResource>)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.get_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, clusterName: string, options:
        RequestOptionsBase, callback: ServiceCallback<ClusterResource>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-cosmosdb.ClusterResource"
            />&gt;
          description: |
            The callback
  - name: 'get(string, string, ServiceCallback<ClusterResource>)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.get_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, clusterName: string, callback:
        ServiceCallback<ClusterResource>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-cosmosdb.ClusterResource"
            />&gt;
          description: |
            The callback
  - name: 'invokeCommand(string, string, CommandPostBody, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.invokeCommand'
    package: '@azure/arm-cosmosdb'
    summary: Invoke a command like nodetool for cassandra maintenance
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function invokeCommand(resourceGroupName: string, clusterName: string,
        body: CommandPostBody, options?: msRest.RequestOptionsBase):
        Promise<Models.CassandraClustersInvokeCommandResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: body
          type: <xref uid="@azure/arm-cosmosdb.CommandPostBody" />
          description: Specification which command to run where
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.CassandraClustersInvokeCommandResponse>
        type: >-
          Promise&lt;<xref uid="Models.CassandraClustersInvokeCommandResponse"
          />&gt;
  - name: 'listByResourceGroup(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.listByResourceGroup'
    package: '@azure/arm-cosmosdb'
    summary: List all managed Cassandra clusters in this resource group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options?:
        msRest.RequestOptionsBase):
        Promise<Models.CassandraClustersListByResourceGroupResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.CassandraClustersListByResourceGroupResponse>
        type: >-
          Promise&lt;<xref
          uid="Models.CassandraClustersListByResourceGroupResponse" />&gt;
  - name: >-
      listByResourceGroup(string, RequestOptionsBase,
      ServiceCallback<ListClusters>)
    uid: '@azure/arm-cosmosdb.CassandraClusters.listByResourceGroup_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options:
        RequestOptionsBase, callback: ServiceCallback<ListClusters>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-cosmosdb.ListClusters"
            />&gt;
          description: |
            The callback
  - name: 'listByResourceGroup(string, ServiceCallback<ListClusters>)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.listByResourceGroup_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, callback:
        ServiceCallback<ListClusters>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-cosmosdb.ListClusters"
            />&gt;
          description: |
            The callback
  - name: listBySubscription(msRest.RequestOptionsBase)
    uid: '@azure/arm-cosmosdb.CassandraClusters.listBySubscription'
    package: '@azure/arm-cosmosdb'
    summary: List all managed Cassandra clusters in this subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBySubscription(options?: msRest.RequestOptionsBase):
        Promise<Models.CassandraClustersListBySubscriptionResponse>
      parameters:
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.CassandraClustersListBySubscriptionResponse>
        type: >-
          Promise&lt;<xref
          uid="Models.CassandraClustersListBySubscriptionResponse" />&gt;
  - name: 'listBySubscription(RequestOptionsBase, ServiceCallback<ListClusters>)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.listBySubscription_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBySubscription(options: RequestOptionsBase, callback:
        ServiceCallback<ListClusters>)
      parameters:
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-cosmosdb.ListClusters"
            />&gt;
          description: |
            The callback
  - name: listBySubscription(ServiceCallback<ListClusters>)
    uid: '@azure/arm-cosmosdb.CassandraClusters.listBySubscription_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listBySubscription(callback: ServiceCallback<ListClusters>)'
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-cosmosdb.ListClusters"
            />&gt;
          description: |
            The callback
  - name: 'start(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.start'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Start the Managed Cassandra Cluster and Associated Data Centers. Start
      will start the host

      virtual machine of this cluster with reserved data disk. This won't do
      anything on an already

      running cluster. Use Deallocate to deallocate the cluster.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function start(resourceGroupName: string, clusterName: string, options?:
        msRest.RequestOptionsBase): Promise<RestResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;RestResponse&gt;
  - name: 'status(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.status'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the CPU, memory, and disk usage statistics for each Cassandra node in
      a cluster.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function status(resourceGroupName: string, clusterName: string,
        options?: msRest.RequestOptionsBase):
        Promise<Models.CassandraClustersStatusResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.CassandraClustersStatusResponse>
        type: Promise&lt;<xref uid="Models.CassandraClustersStatusResponse" />&gt;
  - name: >-
      status(string, string, RequestOptionsBase,
      ServiceCallback<CassandraClusterPublicStatus>)
    uid: '@azure/arm-cosmosdb.CassandraClusters.status_2'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function status(resourceGroupName: string, clusterName: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<CassandraClusterPublicStatus>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.CassandraClusterPublicStatus" />&gt;
          description: |
            The callback
  - name: 'status(string, string, ServiceCallback<CassandraClusterPublicStatus>)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.status_1'
    package: '@azure/arm-cosmosdb'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function status(resourceGroupName: string, clusterName: string,
        callback: ServiceCallback<CassandraClusterPublicStatus>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cosmosdb.CassandraClusterPublicStatus" />&gt;
          description: |
            The callback
  - name: 'update(string, string, ClusterResource, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cosmosdb.CassandraClusters.update'
    package: '@azure/arm-cosmosdb'
    summary: Updates some of the properties of a managed Cassandra cluster.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, clusterName: string, body:
        ClusterResource, options?: msRest.RequestOptionsBase):
        Promise<Models.CassandraClustersUpdateResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: clusterName
          type: string
          description: Managed Cassandra cluster name.
        - id: body
          type: <xref uid="@azure/arm-cosmosdb.ClusterResource" />
          description: Parameters to provide for specifying the managed Cassandra cluster.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.CassandraClustersUpdateResponse>
        type: Promise&lt;<xref uid="Models.CassandraClustersUpdateResponse" />&gt;
