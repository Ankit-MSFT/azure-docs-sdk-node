### YamlMime:TSType
name: StartTask
uid: '@azure/batch.StartTask'
package: '@azure/batch'
summary: >-
  Batch will retry tasks when a recovery operation is triggered on a compute
  node. Examples of

  recovery operations include (but are not limited to) when an unhealthy compute
  node is rebooted

  or a compute node disappeared due to host failure. Retries due to recovery
  operations are

  independent of and are not counted against the maxTaskRetryCount. Even if the
  maxTaskRetryCount

  is 0, an internal retry due to a recovery operation may occur. Because of
  this, all tasks should

  be idempotent. This means tasks need to tolerate being interrupted and
  restarted without causing

  any corruption or duplicate data. The best practice for long running tasks is
  to use some form

  of checkpointing. In some cases the start task may be re-run even though the
  node was not

  rebooted. Special care should be taken to avoid start tasks which create
  breakaway process or

  install/launch services from the start task working directory, as this will
  block Batch from

  being able to re-run the start task.
fullName: StartTask
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: commandLine
    uid: '@azure/batch.StartTask.commandLine'
    package: '@azure/batch'
    summary: >-
      The command line of the start task. The command line does not run under a
      shell, and therefore

      cannot take advantage of shell features such as environment variable
      expansion. If you want to

      take advantage of such features, you should invoke the shell in the
      command line, for example

      using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
      the command line

      refers to file paths, it should use a relative path (relative to the task
      working directory),

      or use the Batch provided environment variable

      (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
    fullName: commandLine
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'commandLine: string'
      return:
        type: string
        description: ''
  - name: containerSettings
    uid: '@azure/batch.StartTask.containerSettings'
    package: '@azure/batch'
    summary: >-
      The settings for the container under which the start task runs. When this
      is specified, all

      directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of
      Azure Batch directories

      on the node) are mapped into the container, all task environment variables
      are mapped into the

      container, and the task command line is executed in the container.
    fullName: containerSettings
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'containerSettings?: TaskContainerSettings'
      return:
        type: <xref uid="@azure/batch.TaskContainerSettings" />
        description: ''
  - name: environmentSettings
    uid: '@azure/batch.StartTask.environmentSettings'
    package: '@azure/batch'
    summary: A list of environment variable settings for the start task.
    fullName: environmentSettings
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'environmentSettings?: EnvironmentSetting[]'
      return:
        type: '<xref uid="@azure/batch.EnvironmentSetting" />[]'
        description: ''
  - name: maxTaskRetryCount
    uid: '@azure/batch.StartTask.maxTaskRetryCount'
    package: '@azure/batch'
    summary: >-
      The maximum number of times the task may be retried. The Batch service
      retries a task if its

      exit code is nonzero. Note that this value specifically controls the
      number of retries. The

      Batch service will try the task once, and may then retry up to this limit.
      For example, if the

      maximum retry count is 3, Batch tries the task up to 4 times (one initial
      try and 3 retries).

      If the maximum retry count is 0, the Batch service does not retry the
      task. If the maximum

      retry count is -1, the Batch service retries the task without limit.
    fullName: maxTaskRetryCount
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'maxTaskRetryCount?: undefined | number'
      return:
        type: undefined | number
        description: ''
  - name: resourceFiles
    uid: '@azure/batch.StartTask.resourceFiles'
    package: '@azure/batch'
    summary: >-
      A list of files that the Batch service will download to the compute node
      before running the

      command line.  There is a maximum size for the list of resource files.
      When the max size is

      exceeded, the request will fail and the response error code will be
      RequestEntityTooLarge. If

      this occurs, the collection of ResourceFiles must be reduced in size. This
      can be achieved

      using .zip files, Application Packages, or Docker Containers. Files listed
      under this element

      are located in the task's working directory.
    fullName: resourceFiles
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'resourceFiles?: ResourceFile[]'
      return:
        type: '<xref uid="@azure/batch.ResourceFile" />[]'
        description: ''
  - name: userIdentity
    uid: '@azure/batch.StartTask.userIdentity'
    package: '@azure/batch'
    summary: >-
      The user identity under which the start task runs. If omitted, the task
      runs as a

      non-administrative user unique to the task.
    fullName: userIdentity
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'userIdentity?: UserIdentity'
      return:
        type: <xref uid="@azure/batch.UserIdentity" />
        description: ''
  - name: waitForSuccess
    uid: '@azure/batch.StartTask.waitForSuccess'
    package: '@azure/batch'
    summary: >-
      Whether the Batch service should wait for the start task to complete
      successfully (that is, to

      exit with exit code 0) before scheduling any tasks on the compute node. If
      true and the start

      task fails on a compute node, the Batch service retries the start task up
      to its maximum retry

      count (maxTaskRetryCount). If the task has still not completed
      successfully after all retries,

      then the Batch service marks the compute node unusable, and will not
      schedule tasks to it.

      This condition can be detected via the node state and failure info
      details. If false, the

      Batch service will not wait for the start task to complete. In this case,
      other tasks can

      start executing on the compute node while the start task is still running;
      and even if the

      start task fails, new tasks will continue to be scheduled on the node. The
      default is false.
    fullName: waitForSuccess
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'waitForSuccess?: undefined | false | true'
      return:
        type: undefined | false | true
        description: ''
