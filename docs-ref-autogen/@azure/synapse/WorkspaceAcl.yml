### YamlMime:UniversalReference
items:
  - uid: '@azure/synapse.WorkspaceAcl'
    name: WorkspaceAcl
    fullName: WorkspaceAcl
    children:
      - '@azure/synapse.WorkspaceAcl.getAccessControlInfo'
      - '@azure/synapse.WorkspaceAcl.getAccessControlInfo_2'
      - '@azure/synapse.WorkspaceAcl.getAccessControlInfo_1'
      - '@azure/synapse.WorkspaceAcl.setWorkspaceAdministrators'
      - '@azure/synapse.WorkspaceAcl.setWorkspaceAdministrators_2'
      - '@azure/synapse.WorkspaceAcl.setWorkspaceAdministrators_1'
      - '@azure/synapse.WorkspaceAcl.constructor'
    langs:
      - typeScript
    type: class
    summary: Class representing a WorkspaceAcl.
    package: '@azure/synapse'
  - uid: '@azure/synapse.WorkspaceAcl.getAccessControlInfo'
    name: >-
      getAccessControlInfo(string, GetAccessControlInfoRequest,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get access control info.
    syntax:
      content: >-
        function getAccessControlInfo(workspaceName: string, resource:
        GetAccessControlInfoRequest, options?: msRest.RequestOptionsBase)
      parameters:
        - id: workspaceName
          type:
            - string
          description: The name of the workspace to execute operations on.
        - id: resource
          type:
            - '@azure/synapse.GetAccessControlInfoRequest'
          description: The resource to get the access control info for.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.WorkspaceAclGetAccessControlInfoResponse>
        description: Promise<Models.WorkspaceAclGetAccessControlInfoResponse>
    package: '@azure/synapse'
  - uid: '@azure/synapse.WorkspaceAcl.getAccessControlInfo_2'
    name: >-
      getAccessControlInfo(string, GetAccessControlInfoRequest,
      RequestOptionsBase, ServiceCallback<WorkspaceAccessControlResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAccessControlInfo(workspaceName: string, resource:
        GetAccessControlInfoRequest, options: RequestOptionsBase, callback:
        ServiceCallback<WorkspaceAccessControlResponse>)
      parameters:
        - id: workspaceName
          type:
            - string
          description: The name of the workspace to execute operations on.
        - id: resource
          type:
            - '@azure/synapse.GetAccessControlInfoRequest'
          description: The resource to get the access control info for.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/synapse.WorkspaceAccessControlResponse>
          description: |
            The callback
    package: '@azure/synapse'
  - uid: '@azure/synapse.WorkspaceAcl.getAccessControlInfo_1'
    name: >-
      getAccessControlInfo(string, GetAccessControlInfoRequest,
      ServiceCallback<WorkspaceAccessControlResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAccessControlInfo(workspaceName: string, resource:
        GetAccessControlInfoRequest, callback:
        ServiceCallback<WorkspaceAccessControlResponse>)
      parameters:
        - id: workspaceName
          type:
            - string
          description: The name of the workspace to execute operations on.
        - id: resource
          type:
            - '@azure/synapse.GetAccessControlInfoRequest'
          description: The resource to get the access control info for.
        - id: callback
          type:
            - ServiceCallback<@azure/synapse.WorkspaceAccessControlResponse>
          description: |
            The callback
    package: '@azure/synapse'
  - uid: '@azure/synapse.WorkspaceAcl.setWorkspaceAdministrators'
    name: >-
      setWorkspaceAdministrators(string, SetWorkspaceAdministratorsRequest,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Replace Admins of the Workspace.
    syntax:
      content: >-
        function setWorkspaceAdministrators(workspaceName: string, request:
        SetWorkspaceAdministratorsRequest, options?: msRest.RequestOptionsBase)
      parameters:
        - id: workspaceName
          type:
            - string
          description: The name of the workspace to execute operations on.
        - id: request
          type:
            - '@azure/synapse.SetWorkspaceAdministratorsRequest'
          description: Details of administrators object-ids.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.WorkspaceAclSetWorkspaceAdministratorsResponse>
        description: Promise<Models.WorkspaceAclSetWorkspaceAdministratorsResponse>
    package: '@azure/synapse'
  - uid: '@azure/synapse.WorkspaceAcl.setWorkspaceAdministrators_2'
    name: >-
      setWorkspaceAdministrators(string, SetWorkspaceAdministratorsRequest,
      RequestOptionsBase, ServiceCallback<WorkspaceAccessControlResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setWorkspaceAdministrators(workspaceName: string, request:
        SetWorkspaceAdministratorsRequest, options: RequestOptionsBase,
        callback: ServiceCallback<WorkspaceAccessControlResponse>)
      parameters:
        - id: workspaceName
          type:
            - string
          description: The name of the workspace to execute operations on.
        - id: request
          type:
            - '@azure/synapse.SetWorkspaceAdministratorsRequest'
          description: Details of administrators object-ids.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/synapse.WorkspaceAccessControlResponse>
          description: |
            The callback
    package: '@azure/synapse'
  - uid: '@azure/synapse.WorkspaceAcl.setWorkspaceAdministrators_1'
    name: >-
      setWorkspaceAdministrators(string, SetWorkspaceAdministratorsRequest,
      ServiceCallback<WorkspaceAccessControlResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setWorkspaceAdministrators(workspaceName: string, request:
        SetWorkspaceAdministratorsRequest, callback:
        ServiceCallback<WorkspaceAccessControlResponse>)
      parameters:
        - id: workspaceName
          type:
            - string
          description: The name of the workspace to execute operations on.
        - id: request
          type:
            - '@azure/synapse.SetWorkspaceAdministratorsRequest'
          description: Details of administrators object-ids.
        - id: callback
          type:
            - ServiceCallback<@azure/synapse.WorkspaceAccessControlResponse>
          description: |
            The callback
    package: '@azure/synapse'
  - uid: '@azure/synapse.WorkspaceAcl.constructor'
    name: WorkspaceAcl(SynapseClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a WorkspaceAcl.
    syntax:
      content: 'new WorkspaceAcl(client: SynapseClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/synapse.SynapseClientContext'
          description: |
            Reference to the service client.
    package: '@azure/synapse'
references:
  - uid: '@azure/synapse.SynapseClientContext'
    name: SynapseClientContext
    spec.typeScript:
      - name: SynapseClientContext
        fullName: SynapseClientContext
        uid: '@azure/synapse.SynapseClientContext'
  - uid: '@azure/synapse.GetAccessControlInfoRequest'
    name: GetAccessControlInfoRequest
    spec.typeScript:
      - name: GetAccessControlInfoRequest
        fullName: GetAccessControlInfoRequest
        uid: '@azure/synapse.GetAccessControlInfoRequest'
  - uid: ServiceCallback<@azure/synapse.WorkspaceAccessControlResponse>
    name: WorkspaceAccessControlResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: WorkspaceAccessControlResponse
        fullName: WorkspaceAccessControlResponse
        uid: '@azure/synapse.WorkspaceAccessControlResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/synapse.SetWorkspaceAdministratorsRequest'
    name: SetWorkspaceAdministratorsRequest
    spec.typeScript:
      - name: SetWorkspaceAdministratorsRequest
        fullName: SetWorkspaceAdministratorsRequest
        uid: '@azure/synapse.SetWorkspaceAdministratorsRequest'
