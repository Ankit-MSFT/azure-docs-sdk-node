### YamlMime:TSType
name: CdnManagementClient
uid: '@azure/arm-cdn.CdnManagementClient'
package: '@azure/arm-cdn'
summary: ''
fullName: CdnManagementClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      CdnManagementClient(ServiceClientCredentials | TokenCredential, string,
      Models.CdnManagementClientOptions)
    uid: '@azure/arm-cdn.CdnManagementClient.constructor'
    package: '@azure/arm-cdn'
    summary: Initializes a new instance of the CdnManagementClient class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new CdnManagementClient(credentials: ServiceClientCredentials |
        TokenCredential, subscriptionId: string, options?:
        Models.CdnManagementClientOptions)
      parameters:
        - id: credentials
          type: ServiceClientCredentials | TokenCredential
          description: >-
            Credentials needed for the client to connect to Azure. Credentials

            implementing the TokenCredential interface from the @azure/identity
            package are recommended. For

            more information about these credentials, see

            https://www.npmjs.com/package/@azure/identity. Credentials
            implementing the

            ServiceClientCredentials interface from the older packages
            @azure/ms-rest-nodeauth and
        - id: subscriptionId
          type: string
          description: Azure Subscription ID.
        - id: options
          type: <xref uid="Models.CdnManagementClientOptions" />
          description: ''
properties:
  - name: acceptLanguage
    uid: '@azure/arm-cdn.CdnManagementClient.acceptLanguage'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: acceptLanguage
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'acceptLanguage: string'
      return:
        description: ''
        type: string
  - name: apiVersion
    uid: '@azure/arm-cdn.CdnManagementClient.apiVersion'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: apiVersion
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'apiVersion?: undefined | string'
      return:
        description: ''
        type: undefined | string
  - name: credentials
    uid: '@azure/arm-cdn.CdnManagementClient.credentials'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: credentials
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'credentials: ServiceClientCredentials | TokenCredential'
      return:
        description: ''
        type: ServiceClientCredentials | TokenCredential
  - name: customDomains
    uid: '@azure/arm-cdn.CdnManagementClient.customDomains'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: customDomains
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'customDomains: CustomDomains'
      return:
        description: ''
        type: <xref uid="@azure/arm-cdn.CustomDomains" />
  - name: edgeNodes
    uid: '@azure/arm-cdn.CdnManagementClient.edgeNodes'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: edgeNodes
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'edgeNodes: EdgeNodes'
      return:
        description: ''
        type: <xref uid="@azure/arm-cdn.EdgeNodes" />
  - name: endpoints
    uid: '@azure/arm-cdn.CdnManagementClient.endpoints'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: endpoints
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'endpoints: Endpoints'
      return:
        description: ''
        type: <xref uid="@azure/arm-cdn.Endpoints" />
  - name: longRunningOperationRetryTimeout
    uid: '@azure/arm-cdn.CdnManagementClient.longRunningOperationRetryTimeout'
    package: '@azure/arm-cdn'
    summary: >-
      The retry timeout in seconds for Long Running Operations. Default value is
      30.
    fullName: longRunningOperationRetryTimeout
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'longRunningOperationRetryTimeout?: undefined | number'
      return:
        description: ''
        type: undefined | number
  - name: managedRuleSets
    uid: '@azure/arm-cdn.CdnManagementClient.managedRuleSets'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: managedRuleSets
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'managedRuleSets: ManagedRuleSets'
      return:
        description: ''
        type: <xref uid="@azure/arm-cdn.ManagedRuleSets" />
  - name: operations
    uid: '@azure/arm-cdn.CdnManagementClient.operations'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: operations
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'operations: Operations'
      return:
        description: ''
        type: <xref uid="@azure/arm-cdn.Operations" />
  - name: originGroups
    uid: '@azure/arm-cdn.CdnManagementClient.originGroups'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: originGroups
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'originGroups: OriginGroups'
      return:
        description: ''
        type: <xref uid="@azure/arm-cdn.OriginGroups" />
  - name: origins
    uid: '@azure/arm-cdn.CdnManagementClient.origins'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: origins
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'origins: Origins'
      return:
        description: ''
        type: <xref uid="@azure/arm-cdn.Origins" />
  - name: policies
    uid: '@azure/arm-cdn.CdnManagementClient.policies'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: policies
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'policies: Policies'
      return:
        description: ''
        type: <xref uid="@azure/arm-cdn.Policies" />
  - name: profiles
    uid: '@azure/arm-cdn.CdnManagementClient.profiles'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: profiles
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'profiles: Profiles'
      return:
        description: ''
        type: <xref uid="@azure/arm-cdn.Profiles" />
  - name: resourceUsage
    uid: '@azure/arm-cdn.CdnManagementClient.resourceUsage'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: resourceUsage
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'resourceUsage: ResourceUsageOperations'
      return:
        description: ''
        type: <xref uid="@azure/arm-cdn.ResourceUsageOperations" />
  - name: subscriptionId
    uid: '@azure/arm-cdn.CdnManagementClient.subscriptionId'
    package: '@azure/arm-cdn'
    summary: ''
    fullName: subscriptionId
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'subscriptionId: string'
      return:
        description: ''
        type: string
methods:
  - name: >-
      beginLongRunningRequest(RequestPrepareOptions | WebResource,
      RequestOptionsBase)
    uid: '@azure/arm-cdn.CdnManagementClient.beginLongRunningRequest'
    package: '@azure/arm-cdn'
    summary: >-
      Send the initial request of a LRO (long running operation) and get back an

      HttpLongRunningOperationResponse that provides methods for polling the LRO
      and checking if the

      LRO is finished.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginLongRunningRequest(request: RequestPrepareOptions |
        WebResource, options?: RequestOptionsBase): Promise<LROPoller>
      parameters:
        - id: request
          type: RequestPrepareOptions | WebResource
          description: The request object
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: |-
          The HttpLongRunningOperationResponse
          that provides methods for interacting with the LRO.
        type: Promise&lt;LROPoller&gt;
  - name: 'checkNameAvailability(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cdn.CdnManagementClient.checkNameAvailability'
    package: '@azure/arm-cdn'
    summary: >-
      Check the availability of a resource name. This is needed for resources
      where name is globally

      unique, such as a CDN endpoint.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailability(name: string, options?:
        msRest.RequestOptionsBase):
        Promise<Models.CheckNameAvailabilityResponse>
      parameters:
        - id: name
          type: string
          description: The resource name to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.CheckNameAvailabilityResponse>
        type: Promise&lt;<xref uid="Models.CheckNameAvailabilityResponse" />&gt;
  - name: >-
      checkNameAvailability(string, RequestOptionsBase,
      ServiceCallback<CheckNameAvailabilityOutput>)
    uid: '@azure/arm-cdn.CdnManagementClient.checkNameAvailability_2'
    package: '@azure/arm-cdn'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailability(name: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<CheckNameAvailabilityOutput>)
      parameters:
        - id: name
          type: string
          description: The resource name to validate.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cdn.CheckNameAvailabilityOutput" />&gt;
          description: |
            The callback
  - name: >-
      checkNameAvailability(string,
      ServiceCallback<CheckNameAvailabilityOutput>)
    uid: '@azure/arm-cdn.CdnManagementClient.checkNameAvailability_1'
    package: '@azure/arm-cdn'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailability(name: string, callback:
        ServiceCallback<CheckNameAvailabilityOutput>)
      parameters:
        - id: name
          type: string
          description: The resource name to validate.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cdn.CheckNameAvailabilityOutput" />&gt;
          description: |
            The callback
  - name: 'checkNameAvailabilityWithSubscription(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cdn.CdnManagementClient.checkNameAvailabilityWithSubscription'
    package: '@azure/arm-cdn'
    summary: >-
      Check the availability of a resource name. This is needed for resources
      where name is globally

      unique, such as a CDN endpoint.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailabilityWithSubscription(name: string, options?:
        msRest.RequestOptionsBase):
        Promise<Models.CheckNameAvailabilityWithSubscriptionResponse>
      parameters:
        - id: name
          type: string
          description: The resource name to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.CheckNameAvailabilityWithSubscriptionResponse>
        type: >-
          Promise&lt;<xref
          uid="Models.CheckNameAvailabilityWithSubscriptionResponse" />&gt;
  - name: >-
      checkNameAvailabilityWithSubscription(string, RequestOptionsBase,
      ServiceCallback<CheckNameAvailabilityOutput>)
    uid: '@azure/arm-cdn.CdnManagementClient.checkNameAvailabilityWithSubscription_2'
    package: '@azure/arm-cdn'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailabilityWithSubscription(name: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<CheckNameAvailabilityOutput>)
      parameters:
        - id: name
          type: string
          description: The resource name to validate.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cdn.CheckNameAvailabilityOutput" />&gt;
          description: |
            The callback
  - name: >-
      checkNameAvailabilityWithSubscription(string,
      ServiceCallback<CheckNameAvailabilityOutput>)
    uid: '@azure/arm-cdn.CdnManagementClient.checkNameAvailabilityWithSubscription_1'
    package: '@azure/arm-cdn'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailabilityWithSubscription(name: string, callback:
        ServiceCallback<CheckNameAvailabilityOutput>)
      parameters:
        - id: name
          type: string
          description: The resource name to validate.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-cdn.CheckNameAvailabilityOutput" />&gt;
          description: |
            The callback
  - name: restoreLROPoller(LROPollState)
    uid: '@azure/arm-cdn.CdnManagementClient.restoreLROPoller'
    package: '@azure/arm-cdn'
    summary: >-
      Restore an LROPoller from the provided LROPollState. This method can be
      used to recreate an

      LROPoller on a different process or machine.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function restoreLROPoller(lroPollState: LROPollState): LROPoller'
      parameters:
        - id: lroPollState
          type: LROPollState
          description: ''
      return:
        description: ''
        type: LROPoller
  - name: >-
      sendLongRunningRequest(RequestPrepareOptions | WebResource,
      RequestOptionsBase)
    uid: '@azure/arm-cdn.CdnManagementClient.sendLongRunningRequest'
    package: '@azure/arm-cdn'
    summary: >-
      Provides a mechanism to make a request that will poll and provide the
      final result.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendLongRunningRequest(request: RequestPrepareOptions |
        WebResource, options?: RequestOptionsBase):
        Promise<HttpOperationResponse>
      parameters:
        - id: request
          type: RequestPrepareOptions | WebResource
          description: The request object
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: >-
          The HttpOperationResponse containing the final polling request,
          response and the responseBody.
        type: Promise&lt;HttpOperationResponse&gt;
  - name: 'sendLRORequest(OperationArguments, OperationSpec, RequestOptionsBase)'
    uid: '@azure/arm-cdn.CdnManagementClient.sendLRORequest'
    package: '@azure/arm-cdn'
    summary: >-
      Send the initial request of a LRO (long running operation) and get back an

      LROPoller that provides methods for polling the LRO and checking if the
      LRO is finished.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendLRORequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, options?: RequestOptionsBase):
        Promise<LROPoller>
      parameters:
        - id: operationArguments
          type: OperationArguments
          description: The arguments to the operation.
        - id: operationSpec
          type: OperationSpec
          description: The specification for the operation.
        - id: options
          type: RequestOptionsBase
          description: Additional options to be sent while making the request.
      return:
        description: >-
          The LROPoller object that provides methods for interacting with the
          LRO.
        type: Promise&lt;LROPoller&gt;
  - name: >-
      sendOperationRequest(OperationArguments, OperationSpec,
      ServiceCallback<any>)
    uid: '@azure/arm-cdn.CdnManagementClient.sendOperationRequest'
    package: '@azure/arm-cdn'
    summary: Send an HTTP request that is populated using the provided OperationSpec.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendOperationRequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, callback?: ServiceCallback<any>):
        Promise<RestResponse>
      parameters:
        - id: operationArguments
          type: OperationArguments
          description: >-
            The arguments that the HTTP request's templated values will be
            populated from.
        - id: operationSpec
          type: OperationSpec
          description: The OperationSpec to use to populate the httpRequest.
        - id: callback
          type: ServiceCallback&lt;any&gt;
          description: |
            The callback to call when the response is received.
      return:
        description: ''
        type: Promise&lt;RestResponse&gt;
  - name: sendRequest(RequestPrepareOptions | WebResourceLike)
    uid: '@azure/arm-cdn.CdnManagementClient.sendRequest'
    package: '@azure/arm-cdn'
    summary: Send the provided httpRequest.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendRequest(options: RequestPrepareOptions | WebResourceLike):
        Promise<HttpOperationResponse>
      parameters:
        - id: options
          type: RequestPrepareOptions | WebResourceLike
          description: ''
      return:
        description: ''
        type: Promise&lt;HttpOperationResponse&gt;
  - name: 'validateProbe(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-cdn.CdnManagementClient.validateProbe'
    package: '@azure/arm-cdn'
    summary: >-
      Check if the probe path is a valid path and the file can be accessed.
      Probe path is the path to

      a file hosted on the origin server to help accelerate the delivery of
      dynamic content via the

      CDN endpoint. This path is relative to the origin path specified in the
      endpoint configuration.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function validateProbe(probeURL: string, options?:
        msRest.RequestOptionsBase): Promise<Models.ValidateProbeResponse>
      parameters:
        - id: probeURL
          type: string
          description: The probe URL to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.ValidateProbeResponse>
        type: Promise&lt;<xref uid="Models.ValidateProbeResponse" />&gt;
  - name: >-
      validateProbe(string, RequestOptionsBase,
      ServiceCallback<ValidateProbeOutput>)
    uid: '@azure/arm-cdn.CdnManagementClient.validateProbe_2'
    package: '@azure/arm-cdn'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function validateProbe(probeURL: string, options: RequestOptionsBase,
        callback: ServiceCallback<ValidateProbeOutput>)
      parameters:
        - id: probeURL
          type: string
          description: The probe URL to validate.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-cdn.ValidateProbeOutput"
            />&gt;
          description: |
            The callback
  - name: 'validateProbe(string, ServiceCallback<ValidateProbeOutput>)'
    uid: '@azure/arm-cdn.CdnManagementClient.validateProbe_1'
    package: '@azure/arm-cdn'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function validateProbe(probeURL: string, callback:
        ServiceCallback<ValidateProbeOutput>)
      parameters:
        - id: probeURL
          type: string
          description: The probe URL to validate.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/arm-cdn.ValidateProbeOutput"
            />&gt;
          description: |
            The callback
extends: <xref uid="@azure/arm-cdn.CdnManagementClientContext" />
