### YamlMime:TSType
name: MessageSession
uid: '@azure/service-bus.MessageSession'
package: '@azure/service-bus'
summary: ''
fullName: MessageSession
type: class
constructors:
  - name: 'MessageSession(ClientEntityContext, MessageSessionOptions)'
    uid: '@azure/service-bus.MessageSession.constructor'
    package: '@azure/service-bus'
    summary: ''
    syntax:
      content: >-
        new MessageSession(context: ClientEntityContext, options?:
        MessageSessionOptions)
      parameters:
        - id: context
          type: <xref uid="@azure/service-bus.ClientEntityContext" />
          description: ''
        - id: options
          type: <xref uid="@azure/service-bus.MessageSessionOptions" />
          description: ''
properties:
  - name: address
    uid: '@azure/service-bus.MessageSession.address'
    package: '@azure/service-bus'
    summary: |-
      {string} address The client entity address in one of the following forms:

      **Sender**
      - `"<queue-name>"`.
      - `"<topic-name>"`.

      **Receiver**
      - `"<queue-name>"`.
      - `"<topic-name>"`.

      **ManagementClient**
      -`"$management"`.
    fullName: address
    syntax:
      content: 'address: string'
      return:
        type: string
        description: ''
  - name: audience
    uid: '@azure/service-bus.MessageSession.audience'
    package: '@azure/service-bus'
    summary: >-
      {string} audience The client entity token audience in one of the following
      forms:


      **Sender**

      - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`

      - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`


      **Receiver**

      - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`

      - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`


      **ManagementClient**

      -
      `"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management"`.

      -
      `"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management"`.
    fullName: audience
    syntax:
      content: 'audience: string'
      return:
        type: string
        description: ''
  - name: autoComplete
    uid: '@azure/service-bus.MessageSession.autoComplete'
    package: '@azure/service-bus'
    summary: >-
      {boolean} autoComplete Indicates whether `Message.complete()` should be
      called

      automatically after the message processing is complete while receiving
      messages with handlers.

      Default: false.
    fullName: autoComplete
    syntax:
      content: 'autoComplete: boolean'
      return:
        type: boolean
        description: ''
  - name: autoRenewLock
    uid: '@azure/service-bus.MessageSession.autoRenewLock'
    package: '@azure/service-bus'
    summary: '{boolean} autoRenewLock Should lock renewal happen automatically.'
    fullName: autoRenewLock
    syntax:
      content: 'autoRenewLock: boolean'
      return:
        type: boolean
        description: ''
  - name: callee
    uid: '@azure/service-bus.MessageSession.callee'
    package: '@azure/service-bus'
    summary: >-
      {SessionCallee} callee Describes who instantied the MessageSession.
      Whether it was

      called by the SessionManager or it was called standalone.

      - Default: "standalone"
    fullName: callee
    syntax:
      content: 'callee: SessionCallee'
      return:
        type: <xref uid="@azure/service-bus.SessionCallee" />
        description: ''
  - name: isConnecting
    uid: '@azure/service-bus.MessageSession.isConnecting'
    package: '@azure/service-bus'
    summary: >-
      {boolean} isConnecting Indicates whether the link is in the process of
      connecting

      (establishing) itself. Default value: `false`.
    fullName: isConnecting
    syntax:
      content: 'isConnecting: boolean = false'
      return:
        type: boolean
        description: ''
  - name: isReceivingMessages
    uid: '@azure/service-bus.MessageSession.isReceivingMessages'
    package: '@azure/service-bus'
    summary: Denotes if we are currently receiving messages
    fullName: isReceivingMessages
    syntax:
      content: 'isReceivingMessages: boolean'
      return:
        type: boolean
        description: ''
  - name: maxAutoRenewDurationInSeconds
    uid: '@azure/service-bus.MessageSession.maxAutoRenewDurationInSeconds'
    package: '@azure/service-bus'
    summary: >-
      {number} maxAutoRenewDurationInSeconds The maximum duration within which
      the

      lock will be renewed automatically. This value should be greater than the
      longest message

      lock duration; for example, the `lockDuration` property on the received
      message.


      Default: `300` (5 minutes);
    fullName: maxAutoRenewDurationInSeconds
    syntax:
      content: 'maxAutoRenewDurationInSeconds: number'
      return:
        type: number
        description: ''
  - name: maxConcurrentCalls
    uid: '@azure/service-bus.MessageSession.maxConcurrentCalls'
    package: '@azure/service-bus'
    summary: >-
      {number} [maxConcurrentCalls] The maximum number of messages that should
      be

      processed concurrently in a session while in streaming mode. Once this
      limit has been reached,

      more messages will not be received until the user's message handler has
      completed processing current message.

      - **Default**: `1` (message in a session at a time).
    fullName: maxConcurrentCalls
    syntax:
      content: 'maxConcurrentCalls: number = 1'
      return:
        type: number
        description: ''
  - name: maxConcurrentSessions
    uid: '@azure/service-bus.MessageSession.maxConcurrentSessions'
    package: '@azure/service-bus'
    summary: >-
      {number} [maxConcurrentSessions] The maximum number of concurrent sessions
      that the

      client should initate.

      - **Default**: `1`.
    fullName: maxConcurrentSessions
    syntax:
      content: 'maxConcurrentSessions?: undefined | number'
      return:
        type: undefined | number
        description: ''
  - name: name
    uid: '@azure/service-bus.MessageSession.name'
    package: '@azure/service-bus'
    summary: |-
      {string} id The unique name for the entity in the format:
      `${name of the entity}-${guid}`.
    fullName: name
    syntax:
      content: 'name: string'
      return:
        type: string
        description: ''
  - name: newMessageWaitTimeoutInSeconds
    uid: '@azure/service-bus.MessageSession.newMessageWaitTimeoutInSeconds'
    package: '@azure/service-bus'
    summary: >-
      {number} [newMessageWaitTimeoutInSeconds] The maximum amount of idle time
      the session

      reaceiver will wait ater a message has been received. If no messages are
      received in that

      time frame then the session will be closed.
    fullName: newMessageWaitTimeoutInSeconds
    syntax:
      content: 'newMessageWaitTimeoutInSeconds?: undefined | number'
      return:
        type: undefined | number
        description: ''
  - name: receiveMode
    uid: '@azure/service-bus.MessageSession.receiveMode'
    package: '@azure/service-bus'
    summary: |-
      {number} [receiveMode] The mode in which messages should be received.
      Default: ReceiveMode.peekLock
    fullName: receiveMode
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type: <xref uid="@azure/service-bus.ReceiveMode" />
        description: ''
  - name: sessionId
    uid: '@azure/service-bus.MessageSession.sessionId'
    package: '@azure/service-bus'
    summary: >-
      {string} [sessionId] The sessionId for the message session. Empty string
      is valid sessionId
    fullName: sessionId
    syntax:
      content: 'sessionId?: undefined | string'
      return:
        type: undefined | string
        description: ''
  - name: sessionLockedUntilUtc
    uid: '@azure/service-bus.MessageSession.sessionLockedUntilUtc'
    package: '@azure/service-bus'
    summary: >-
      {Date} [sessionLockedUntilUtc] Provides the duration until which the
      session is locked.
    fullName: sessionLockedUntilUtc
    syntax:
      content: 'sessionLockedUntilUtc?: Date'
      return:
        type: Date
        description: ''
methods:
  - name: close(undefined | false | true)
    uid: '@azure/service-bus.MessageSession.close'
    package: '@azure/service-bus'
    summary: Closes the underlying AMQP receiver link.
    syntax:
      content: 'function close(isClosedDueToExpiry?: undefined | false | true)'
      parameters:
        - id: isClosedDueToExpiry
          type: undefined | false | true
          description: >
            Flag that denotes if close is invoked due to session expiring.

            This is so that the internal map of expired sessions doesn't get
            cleared when session is

            closed due to expiry.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'create(ClientEntityContext, MessageSessionOptions)'
    uid: '@azure/service-bus.MessageSession.create'
    package: '@azure/service-bus'
    summary: >-
      Creates a new instance of the MessageSession based on the provided
      parameters.
    syntax:
      content: >-
        static function create(context: ClientEntityContext, options?:
        MessageSessionOptions)
      parameters:
        - id: context
          type: <xref uid="@azure/service-bus.ClientEntityContext" />
          description: The client entity context
        - id: options
          type: <xref uid="@azure/service-bus.MessageSessionOptions" />
          description: |
            Options that can be provided while creating the MessageSession.
      return:
        type: Promise&lt;<xref uid="@azure/service-bus.MessageSession" />&gt;
        description: ''
  - name: isOpen()
    uid: '@azure/service-bus.MessageSession.isOpen'
    package: '@azure/service-bus'
    summary: >-
      Determines whether the AMQP receiver link is open. If open then returns
      true else returns false.
    syntax:
      content: function isOpen()
      return:
        type: boolean
        description: ''
  - name: 'receive(OnMessage, OnError, SessionMessageHandlerOptions)'
    uid: '@azure/service-bus.MessageSession.receive'
    package: '@azure/service-bus'
    summary: >-
      Registers handlers to deal with the incoming stream of messages over an
      AMQP receiver link

      from a Queue/Subscription.

      To stop receiving messages, call `close()` on the SessionReceiver or set
      the property

      `newMessageWaitTimeoutInSeconds` in the options to provide a timeout.
    syntax:
      content: >-
        function receive(onMessage: OnMessage, onError: OnError, options?:
        SessionMessageHandlerOptions)
      parameters:
        - id: onMessage
          type: <xref uid="@azure/service-bus.OnMessage" />
          description: Handler for processing each incoming message.
        - id: onError
          type: <xref uid="@azure/service-bus.OnError" />
          description: >-
            Handler for any error that occurs while receiving or processing
            messages.
        - id: options
          type: <xref uid="@azure/service-bus.SessionMessageHandlerOptions" />
          description: >
            Options to control whether messages should be automatically
            completed. You can

            also provide a timeout in seconds to denote the amount of time to
            wait for a new message

            before closing the receiver.
  - name: 'receiveMessages(number, undefined | number)'
    uid: '@azure/service-bus.MessageSession.receiveMessages'
    package: '@azure/service-bus'
    summary: >-
      Returns a batch of messages based on given count and timeout over an AMQP
      receiver link

      from a Queue/Subscription.
    syntax:
      content: >-
        function receiveMessages(maxMessageCount: number, maxWaitTimeInSeconds?:
        undefined | number)
      parameters:
        - id: maxMessageCount
          type: number
          description: The maximum number of messages to receive from Queue/Subscription.
        - id: maxWaitTimeInSeconds
          type: undefined | number
          description: >-
            The total wait time in seconds until which the receiver will attempt
            to receive specified number of messages.

            If this time elapses before the `maxMessageCount` is reached, then
            messages collected till then will be returned to the user.

            - **Default**: `60` seconds.
      return:
        type: 'Promise&lt;<xref uid="@azure/service-bus.ServiceBusMessage" />[]&gt;'
        description: >-
          Promise<ServiceBusMessage[]> A promise that resolves with an array of
          Message objects.
  - name: >-
      settleMessage(ServiceBusMessage, DispositionType,
      DispositionStatusOptions)
    uid: '@azure/service-bus.MessageSession.settleMessage'
    package: '@azure/service-bus'
    summary: Settles the message with the specified disposition.
    syntax:
      content: >-
        function settleMessage(message: ServiceBusMessage, operation:
        DispositionType, options?: DispositionStatusOptions)
      parameters:
        - id: message
          type: <xref uid="@azure/service-bus.ServiceBusMessage" />
          description: The ServiceBus Message that needs to be settled.
        - id: operation
          type: <xref uid="@azure/service-bus.DispositionType" />
          description: The disposition type.
        - id: options
          type: <xref uid="@azure/service-bus.DispositionStatusOptions" />
          description: >
            Optional parameters that can be provided while disposing the
            message.
      return:
        type: Promise&lt;any&gt;
        description: ''
extends: <xref uid="@azure/service-bus.LinkEntity" />
