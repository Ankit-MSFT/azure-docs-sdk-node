### YamlMime:TSType
name: ManagementClient
uid: '@azure/service-bus.ManagementClient'
package: '@azure/service-bus'
summary: ''
fullName: ManagementClient
type: class
constructors:
  - name: 'ManagementClient(ClientEntityContext, ManagementClientOptions)'
    uid: '@azure/service-bus.ManagementClient.constructor'
    package: '@azure/service-bus'
    summary: ''
    syntax:
      content: >-
        new ManagementClient(context: ClientEntityContext, options?:
        ManagementClientOptions)
      parameters:
        - id: context
          type: <xref uid="@azure/service-bus.ClientEntityContext" />
          description: The client entity context.
        - id: options
          type: <xref uid="@azure/service-bus.ManagementClientOptions" />
          description: ''
properties:
  - name: address
    uid: '@azure/service-bus.ManagementClient.address'
    package: '@azure/service-bus'
    summary: |-
      {string} address The client entity address in one of the following forms:

      **Sender**
      - `"<queue-name>"`.
      - `"<topic-name>"`.

      **Receiver**
      - `"<queue-name>"`.
      - `"<topic-name>"`.

      **ManagementClient**
      -`"$management"`.
    fullName: address
    syntax:
      content: 'address: string'
      return:
        type: string
        description: ''
  - name: audience
    uid: '@azure/service-bus.ManagementClient.audience'
    package: '@azure/service-bus'
    summary: >-
      {string} audience The client entity token audience in one of the following
      forms:


      **Sender**

      - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`

      - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`


      **Receiver**

      - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`

      - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`


      **ManagementClient**

      -
      `"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management"`.

      -
      `"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management"`.
    fullName: audience
    syntax:
      content: 'audience: string'
      return:
        type: string
        description: ''
  - name: entityPath
    uid: '@azure/service-bus.ManagementClient.entityPath'
    package: '@azure/service-bus'
    summary: >-
      {string} entityPath - The name/path of the entity
      (queue/topic/subscription name)

      for which the management request needs to be made.
    fullName: entityPath
    syntax:
      content: 'entityPath: string'
      return:
        type: string
        description: ''
  - name: isConnecting
    uid: '@azure/service-bus.ManagementClient.isConnecting'
    package: '@azure/service-bus'
    summary: >-
      {boolean} isConnecting Indicates whether the link is in the process of
      connecting

      (establishing) itself. Default value: `false`.
    fullName: isConnecting
    syntax:
      content: 'isConnecting: boolean = false'
      return:
        type: boolean
        description: ''
  - name: managementLock
    uid: '@azure/service-bus.ManagementClient.managementLock'
    package: '@azure/service-bus'
    summary: ''
    fullName: managementLock
    syntax:
      content: >-
        managementLock: string =
        `${Constants.managementRequestKey}-${generate_uuid()}`
      return:
        type: string
        description: ''
  - name: name
    uid: '@azure/service-bus.ManagementClient.name'
    package: '@azure/service-bus'
    summary: |-
      {string} id The unique name for the entity in the format:
      `${name of the entity}-${guid}`.
    fullName: name
    syntax:
      content: 'name: string'
      return:
        type: string
        description: ''
  - name: replyTo
    uid: '@azure/service-bus.ManagementClient.replyTo'
    package: '@azure/service-bus'
    summary: '{string} replyTo The reply to Guid for the management client.'
    fullName: replyTo
    syntax:
      content: 'replyTo: string = generate_uuid()'
      return:
        type: string
        description: ''
methods:
  - name: 'addRule(string, boolean | string | CorrelationFilter, undefined | string)'
    uid: '@azure/service-bus.ManagementClient.addRule'
    package: '@azure/service-bus'
    summary: >-
      Adds a rule on the subscription as defined by the given rule name, filter
      and action
    syntax:
      content: >-
        function addRule(ruleName: string, filter: boolean | string |
        CorrelationFilter, sqlRuleActionExpression?: undefined | string)
      parameters:
        - id: ruleName
          type: string
          description: Name of the rule
        - id: filter
          type: >-
            boolean | string | <xref uid="@azure/service-bus.CorrelationFilter"
            />
          description: 'A Boolean, SQL expression or a Correlation filter'
        - id: sqlRuleActionExpression
          type: undefined | string
          description: |
            Action to perform if the message satisfies the filtering expression
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'cancelScheduledMessages(Long[])'
    uid: '@azure/service-bus.ManagementClient.cancelScheduledMessages'
    package: '@azure/service-bus'
    summary: Cancels an array of messages that were scheduled.
    syntax:
      content: 'function cancelScheduledMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type: 'Long[]'
          description: An Array of sequence numbers of the message to be cancelled.
      return:
        type: Promise&lt;void&gt;
        description: Promise<void>
  - name: close()
    uid: '@azure/service-bus.ManagementClient.close'
    package: '@azure/service-bus'
    summary: >-
      Closes the AMQP management session to the ServiceBus namespace for this
      client,

      returning a promise that will be resolved when disconnection is completed.
    syntax:
      content: function close()
      return:
        type: Promise&lt;void&gt;
        description: Promise<void>
  - name: getRules()
    uid: '@azure/service-bus.ManagementClient.getRules'
    package: '@azure/service-bus'
    summary: Get all the rules on the Subscription.
    syntax:
      content: function getRules()
      return:
        type: 'Promise&lt;<xref uid="@azure/service-bus.RuleDescription" />[]&gt;'
        description: 'Promise<RuleDescription[]> A list of rules.'
  - name: getSessionState(string)
    uid: '@azure/service-bus.ManagementClient.getSessionState'
    package: '@azure/service-bus'
    summary: Gets the state of the specified session.
    syntax:
      content: 'function getSessionState(sessionId: string)'
      parameters:
        - id: sessionId
          type: string
          description: The session for which the state needs to be retrieved.
      return:
        type: Promise&lt;any&gt;
        description: Promise<any> The state of that session
  - name: 'listMessageSessions(number, number, Date)'
    uid: '@azure/service-bus.ManagementClient.listMessageSessions'
    package: '@azure/service-bus'
    summary: Lists the sessions on the ServiceBus Queue/Topic.
    syntax:
      content: >-
        function listMessageSessions(skip: number, top: number,
        lastUpdatedTime?: Date)
      parameters:
        - id: skip
          type: number
          description: The number of sessions to skip
        - id: top
          type: number
          description: Maximum numer of sessions.
        - id: lastUpdatedTime
          type: Date
          description: ''
      return:
        type: 'Promise&lt;string[]&gt;'
        description: 'Promise<string[]> A list of session ids.'
  - name: peek(undefined | number)
    uid: '@azure/service-bus.ManagementClient.peek'
    package: '@azure/service-bus'
    summary: >-
      Fetches the next batch of active messages. The first call to `peek()`
      fetches the first

      active message for this client. Each subsequent call fetches the
      subsequent message in the

      entity.

      Unlike a `received` message, `peeked` message will not have lock token
      associated with it,

      and hence it cannot be
      `Completed/Abandoned/Deferred/Deadlettered/Renewed`. This method will

      also fetch even Deferred messages (but not Deadlettered message).
    syntax:
      content: 'function peek(messageCount?: undefined | number)'
      parameters:
        - id: messageCount
          type: undefined | number
          description: ''
      return:
        type: 'Promise&lt;<xref uid="@azure/service-bus.ReceivedMessageInfo" />[]&gt;'
        description: 'Promise<ReceivedSBMessage[]>'
  - name: 'peekBySequenceNumber(Long, undefined | number, undefined | string)'
    uid: '@azure/service-bus.ManagementClient.peekBySequenceNumber'
    package: '@azure/service-bus'
    summary: Peeks the desired number of messages from the specified sequence number.
    syntax:
      content: >-
        function peekBySequenceNumber(fromSequenceNumber: Long,
        maxMessageCount?: undefined | number, sessionId?: undefined | string)
      parameters:
        - id: fromSequenceNumber
          type: Long
          description: The sequence number from where to read the message.
        - id: maxMessageCount
          type: undefined | number
          description: ''
        - id: sessionId
          type: undefined | string
          description: The sessionId from which messages need to be peeked.
      return:
        type: 'Promise&lt;<xref uid="@azure/service-bus.ReceivedMessageInfo" />[]&gt;'
        description: 'Promise<ReceivedMessageInfo[]>'
  - name: 'peekMessagesBySession(string, undefined | number)'
    uid: '@azure/service-bus.ManagementClient.peekMessagesBySession'
    package: '@azure/service-bus'
    summary: >-
      Fetches the next batch of active messages in the current MessageSession.
      The first call to

      `peek()` fetches the first active message for this client. Each subsequent
      call fetches the

      subsequent message in the entity.

      Unlike a `received` message, `peeked` message will not have lock token
      associated with it,

      and hence it cannot be
      `Completed/Abandoned/Deferred/Deadlettered/Renewed`.  This method will

      also fetch even Deferred messages (but not Deadlettered message).
    syntax:
      content: >-
        function peekMessagesBySession(sessionId: string, messageCount?:
        undefined | number)
      parameters:
        - id: sessionId
          type: string
          description: The sessionId from which messages need to be peeked.
        - id: messageCount
          type: undefined | number
          description: ''
      return:
        type: 'Promise&lt;<xref uid="@azure/service-bus.ReceivedMessageInfo" />[]&gt;'
        description: 'Promise<ReceivedMessageInfo[]>'
  - name: 'receiveDeferredMessages(Long[], ReceiveMode, undefined | string)'
    uid: '@azure/service-bus.ManagementClient.receiveDeferredMessages'
    package: '@azure/service-bus'
    summary: Receives a list of deferred messages identified by `sequenceNumbers`.
    syntax:
      content: >-
        function receiveDeferredMessages(sequenceNumbers: Long[], receiveMode:
        ReceiveMode, sessionId?: undefined | string)
      parameters:
        - id: sequenceNumbers
          type: 'Long[]'
          description: A list containing the sequence numbers to receive.
        - id: receiveMode
          type: <xref uid="@azure/service-bus.ReceiveMode" />
          description: The mode in which the receiver was created.
        - id: sessionId
          type: undefined | string
          description: ''
      return:
        type: 'Promise&lt;<xref uid="@azure/service-bus.ServiceBusMessage" />[]&gt;'
        description: |-
          Promise<ServiceBusMessage[]>
          - Returns a list of messages identified by the given sequenceNumbers.
          - Returns an empty list if no messages are found.
          - Throws an error if the messages have not been deferred.
  - name: removeRule(string)
    uid: '@azure/service-bus.ManagementClient.removeRule'
    package: '@azure/service-bus'
    summary: Removes the rule on the Subscription identified by the given rule name.
    syntax:
      content: 'function removeRule(ruleName: string)'
      parameters:
        - id: ruleName
          type: string
          description: |+

      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'renewLock(string, SendRequestOptions)'
    uid: '@azure/service-bus.ManagementClient.renewLock'
    package: '@azure/service-bus'
    summary: >
      Renews the lock on the message. The lock will be renewed based on the
      setting specified on

      the queue.

      When a message is received in `PeekLock` mode, the message is locked on
      the server for this

      receiver instance for a duration as specified during the
      Queue/Subscription creation

      (LockDuration). If processing of the message requires longer than this
      duration, the

      lock needs to be renewed. For each renewal, it resets the time the message
      is locked by the

      LockDuration set on the Entity.
    syntax:
      content: 'function renewLock(lockToken: string, options?: SendRequestOptions)'
      parameters:
        - id: lockToken
          type: string
          description: Lock token of the message
        - id: options
          type: SendRequestOptions
          description: ''
      return:
        type: Promise&lt;Date&gt;
        description: Promise<Date> New lock token expiry date and time in UTC format.
  - name: 'renewSessionLock(string, SendRequestOptions)'
    uid: '@azure/service-bus.ManagementClient.renewSessionLock'
    package: '@azure/service-bus'
    summary: Renews the lock for the specified session.
    syntax:
      content: >-
        function renewSessionLock(sessionId: string, options?:
        SendRequestOptions)
      parameters:
        - id: sessionId
          type: string
          description: Id of the session for which the lock needs to be renewed
        - id: options
          type: SendRequestOptions
          description: Options that can be set while sending the request.
      return:
        type: Promise&lt;Date&gt;
        description: Promise<Date> New lock token expiry date and time in UTC format.
  - name: 'scheduleMessages(Date, SendableMessageInfo[])'
    uid: '@azure/service-bus.ManagementClient.scheduleMessages'
    package: '@azure/service-bus'
    summary: Schedules an array of messages to appear on Service Bus at a later time.
    syntax:
      content: >-
        function scheduleMessages(scheduledEnqueueTimeUtc: Date, messages:
        SendableMessageInfo[])
      parameters:
        - id: scheduledEnqueueTimeUtc
          type: Date
          description: The UTC time at which the messages should be enqueued.
        - id: messages
          type: '<xref uid="@azure/service-bus.SendableMessageInfo" />[]'
          description: An array of messages that needs to be scheduled.
      return:
        type: 'Promise&lt;Long[]&gt;'
        description: Promise<number> The sequence numbers of messages that were scheduled.
  - name: 'setSessionState(string, any)'
    uid: '@azure/service-bus.ManagementClient.setSessionState'
    package: '@azure/service-bus'
    summary: Sets the state of the specified session.
    syntax:
      content: 'function setSessionState(sessionId: string, state: any)'
      parameters:
        - id: sessionId
          type: string
          description: The session for which the state needs to be set
        - id: state
          type: any
          description: The state that needs to be set.
      return:
        type: Promise&lt;void&gt;
        description: Promise<void>
  - name: >-
      updateDispositionStatus(string, DispositionStatus,
      DispositionStatusOptions)
    uid: '@azure/service-bus.ManagementClient.updateDispositionStatus'
    package: '@azure/service-bus'
    summary: Updates the disposition status of deferred messages.
    syntax:
      content: >-
        function updateDispositionStatus(lockToken: string, dispositionStatus:
        DispositionStatus, options?: DispositionStatusOptions)
      parameters:
        - id: lockToken
          type: string
          description: ''
        - id: dispositionStatus
          type: <xref uid="@azure/service-bus.DispositionStatus" />
          description: The disposition status to be set
        - id: options
          type: <xref uid="@azure/service-bus.DispositionStatusOptions" />
          description: >
            Optional parameters that can be provided while updating the
            disposition status.
      return:
        type: Promise&lt;void&gt;
        description: Promise<void>
extends: <xref uid="@azure/service-bus.LinkEntity" />
