### YamlMime:TSPackage
uid: '@azure/service-bus'
name: '@azure/service-bus'
summary: ''
type: package
enums:
  - '@azure/service-bus.ClientType'
  - '@azure/service-bus.ReceiverType'
  - '@azure/service-bus.DispositionStatus'
  - '@azure/service-bus.DispositionType'
  - '@azure/service-bus.ReceiveMode'
  - '@azure/service-bus.SessionCallee'
  - '@azure/service-bus.SessionEntityType'
interfaces:
  - '@azure/service-bus.Client'
  - '@azure/service-bus.ClientEntityContextBase'
  - '@azure/service-bus.ClientEntityContextOptions'
  - '@azure/service-bus.LinkEntityOptions'
  - '@azure/service-bus.CorrelationFilter'
  - '@azure/service-bus.DispositionStatusOptions'
  - '@azure/service-bus.ManagementClientOptions'
  - '@azure/service-bus.RuleDescription'
  - '@azure/service-bus.OnAmqpEventAsPromise'
  - '@azure/service-bus.OnError'
  - '@azure/service-bus.OnMessage'
  - '@azure/service-bus.PromiseLike'
  - '@azure/service-bus.ReceiveOptions'
  - '@azure/service-bus.MessageHandlerOptions'
  - '@azure/service-bus.ServiceBusClientOptions'
  - '@azure/service-bus.DeadLetterOptions'
  - '@azure/service-bus.ReceivedMessageInfo'
  - '@azure/service-bus.SendableMessageInfo'
  - '@azure/service-bus.ServiceBusDeliveryAnnotations'
  - '@azure/service-bus.ServiceBusMessageAnnotations'
  - '@azure/service-bus.CreateMessageSessionReceiverLinkOptions'
  - '@azure/service-bus.SessionManagerOptions'
  - '@azure/service-bus.SessionMessageHandlerOptions'
  - '@azure/service-bus.SessionReceiverOptions'
classes:
  - '@azure/service-bus.BatchingReceiver'
  - '@azure/service-bus.LinkEntity'
  - '@azure/service-bus.ManagementClient'
  - '@azure/service-bus.MessageReceiver'
  - '@azure/service-bus.MessageSender'
  - '@azure/service-bus.StreamingReceiver'
  - '@azure/service-bus.QueueClient'
  - '@azure/service-bus.Receiver'
  - '@azure/service-bus.SessionReceiver'
  - '@azure/service-bus.Sender'
  - '@azure/service-bus.ServiceBusClient'
  - '@azure/service-bus.ServiceBusMessage'
  - '@azure/service-bus.MessageSession'
  - '@azure/service-bus.SessionManager'
  - '@azure/service-bus.SubscriptionClient'
  - '@azure/service-bus.TopicClient'
  - '@azure/service-bus.ConcurrentExpiringMap'
  - '@azure/service-bus.Semaphore'
functions:
  - name: getMessagePropertyTypeMismatchError(SendableMessageInfo)
    uid: '@azure/service-bus.getMessagePropertyTypeMismatchError'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getMessagePropertyTypeMismatchError(msg: SendableMessageInfo)'
      parameters:
        - id: msg
          type: <xref uid="@azure/service-bus.SendableMessageInfo" />
          description: ''
      return:
        type: Error | undefined
        description: ''
  - name: toAmqpMessage(SendableMessageInfo)
    uid: '@azure/service-bus.toAmqpMessage'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toAmqpMessage(msg: SendableMessageInfo)'
      parameters:
        - id: msg
          type: <xref uid="@azure/service-bus.SendableMessageInfo" />
          description: ''
      return:
        type: AmqpMessage
        description: ''
  - name: 'generateKey(string, string)'
    uid: '@azure/service-bus.generateKey'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function generateKey(secret: string, stringToSign: string)'
      parameters:
        - id: secret
          type: string
          description: ''
        - id: stringToSign
          type: string
          description: ''
      return:
        type: Promise&lt;string&gt;
        description: ''
  - name: 'generateKey(string, string)'
    uid: '@azure/service-bus.generateKey'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function generateKey(secret: string, stringToSign: string)'
      parameters:
        - id: secret
          type: string
          description: ''
        - id: stringToSign
          type: string
          description: ''
      return:
        type: Promise&lt;string&gt;
        description: ''
  - name: 'getAlreadyReceivingErrorMsg(string, undefined | string)'
    uid: '@azure/service-bus.getAlreadyReceivingErrorMsg'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAlreadyReceivingErrorMsg(entityPath: string, sessionId?:
        undefined | string)
      parameters:
        - id: entityPath
          type: string
          description: >-
            Value of the `entityPath` property on the client which denotes its
            name
        - id: sessionId
          type: undefined | string
          description: |
            If using session receiver, then the id of the session
      return:
        type: string
        description: ''
  - name: getClientClosedErrorMsg(string)
    uid: '@azure/service-bus.getClientClosedErrorMsg'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getClientClosedErrorMsg(entityPath: string)'
      parameters:
        - id: entityPath
          type: string
          description: >
            Value of the `entityPath` property on the client which denotes its
            name
      return:
        type: string
        description: ''
  - name: getErrorMessageNotSupportedInReceiveAndDeleteMode(string)
    uid: '@azure/service-bus.getErrorMessageNotSupportedInReceiveAndDeleteMode'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getErrorMessageNotSupportedInReceiveAndDeleteMode(failedToDo:
        string)
      parameters:
        - id: failedToDo
          type: string
          description: >
            A string to add to the placeholder in the error message. Denotes the
            action

            that is not supported in ReceiveAndDelete mode
      return:
        type: string
        description: ''
  - name: 'getOpenReceiverErrorMsg(ClientType, string, undefined | string)'
    uid: '@azure/service-bus.getOpenReceiverErrorMsg'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getOpenReceiverErrorMsg(clientType: ClientType, entityPath:
        string, sessionId?: undefined | string)
      parameters:
        - id: clientType
          type: <xref uid="@azure/service-bus.ClientType" />
          description: '''QueueClient'' or ''SubscriptionClient'''
        - id: entityPath
          type: string
          description: >-
            Value of the `entityPath` property on the client which denotes its
            name
        - id: sessionId
          type: undefined | string
          description: |
            If using session receiver, then the id of the session
      return:
        type: string
        description: ''
  - name: 'getOpenSenderErrorMsg(string, string)'
    uid: '@azure/service-bus.getOpenSenderErrorMsg'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getOpenSenderErrorMsg(clientType: string, entityPath: string)'
      parameters:
        - id: clientType
          type: string
          description: '''QueueClient'' or ''TopicClient'''
        - id: entityPath
          type: string
          description: >
            Value of the `entityPath` property on the client which denotes its
            name
      return:
        type: string
        description: ''
  - name: 'getReceiverClosedErrorMsg(string, ClientType, boolean, undefined | string)'
    uid: '@azure/service-bus.getReceiverClosedErrorMsg'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getReceiverClosedErrorMsg(entityPath: string, clientType:
        ClientType, isClientClosed: boolean, sessionId?: undefined | string)
      parameters:
        - id: entityPath
          type: string
          description: >-
            Value of the `entityPath` property on the client which denotes its
            name
        - id: clientType
          type: <xref uid="@azure/service-bus.ClientType" />
          description: >-
            One of "QueueClient", "TopicClient" or "SubscriptionClient", used
            for logging
        - id: isClientClosed
          type: boolean
          description: >-
            Denotes if the close() was called on the client that created the
            sender
        - id: sessionId
          type: undefined | string
          description: |
            If using session receiver, then the id of the session
      return:
        type: string
        description: ''
  - name: 'getSenderClosedErrorMsg(string, ClientType, boolean)'
    uid: '@azure/service-bus.getSenderClosedErrorMsg'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSenderClosedErrorMsg(entityPath: string, clientType:
        ClientType, isClientClosed: boolean)
      parameters:
        - id: entityPath
          type: string
          description: >-
            Value of the `entityPath` property on the client which denotes its
            name
        - id: clientType
          type: <xref uid="@azure/service-bus.ClientType" />
          description: >-
            One of "QueueClient", "TopicClient" or "SubscriptionClient", used
            for logging
        - id: isClientClosed
          type: boolean
          description: >
            Denotes if the close() was called on the client that created the
            sender
      return:
        type: string
        description: ''
  - name: 'throwErrorIfClientOrConnectionClosed(ConnectionContext, string, boolean)'
    uid: '@azure/service-bus.throwErrorIfClientOrConnectionClosed'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function throwErrorIfClientOrConnectionClosed(context:
        ConnectionContext, entityPath: string, isClientClosed: boolean)
      parameters:
        - id: context
          type: <xref uid="@azure/service-bus.ConnectionContext" />
          description: The ConnectionContext associated with the current AMQP connection.
        - id: entityPath
          type: string
          description: >-
            Entity Path of the client which denotes the name of the
            Queue/Topic/Subscription
        - id: isClientClosed
          type: boolean
          description: |
            Boolean denoting if the client is closed or not
  - name: throwErrorIfConnectionClosed(ConnectionContext)
    uid: '@azure/service-bus.throwErrorIfConnectionClosed'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function throwErrorIfConnectionClosed(context: ConnectionContext)'
      parameters:
        - id: context
          type: <xref uid="@azure/service-bus.ConnectionContext" />
          description: |
            The ConnectionContext associated with the current AMQP connection.
  - name: 'throwTypeErrorIfParameterIsEmptyString(string, string, string)'
    uid: '@azure/service-bus.throwTypeErrorIfParameterIsEmptyString'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function throwTypeErrorIfParameterIsEmptyString(connectionId: string,
        parameterName: string, parameterValue: string)
      parameters:
        - id: connectionId
          type: string
          description: Id of the underlying AMQP connection used for logging
        - id: parameterName
          type: string
          description: Name of the parameter to type check
        - id: parameterValue
          type: string
          description: |
            Value of the parameter to type check
      return:
        type: TypeError | undefined
        description: ''
  - name: 'throwTypeErrorIfParameterMissing(string, string, any)'
    uid: '@azure/service-bus.throwTypeErrorIfParameterMissing'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function throwTypeErrorIfParameterMissing(connectionId: string,
        parameterName: string, parameterValue: any)
      parameters:
        - id: connectionId
          type: string
          description: Id of the underlying AMQP connection used for logging
        - id: parameterName
          type: string
          description: Name of the parameter to check
        - id: parameterValue
          type: any
          description: |
            Value of the parameter to check
  - name: 'throwTypeErrorIfParameterNotLong(string, string, any)'
    uid: '@azure/service-bus.throwTypeErrorIfParameterNotLong'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function throwTypeErrorIfParameterNotLong(connectionId: string,
        parameterName: string, parameterValue: any)
      parameters:
        - id: connectionId
          type: string
          description: Id of the underlying AMQP connection used for logging
        - id: parameterName
          type: string
          description: Name of the parameter to type check
        - id: parameterValue
          type: any
          description: |
            Value of the parameter to type check
      return:
        type: TypeError | undefined
        description: ''
  - name: 'throwTypeErrorIfParameterNotLongArray(string, string, any[])'
    uid: '@azure/service-bus.throwTypeErrorIfParameterNotLongArray'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function throwTypeErrorIfParameterNotLongArray(connectionId: string,
        parameterName: string, parameterValue: any[])
      parameters:
        - id: connectionId
          type: string
          description: Id of the underlying AMQP connection used for logging
        - id: parameterName
          type: string
          description: Name of the parameter to type check
        - id: parameterValue
          type: 'any[]'
          description: |
            Value of the parameter to type check
      return:
        type: TypeError | undefined
        description: ''
  - name: 'throwTypeErrorIfParameterTypeMismatch(string, string, any, string)'
    uid: '@azure/service-bus.throwTypeErrorIfParameterTypeMismatch'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function throwTypeErrorIfParameterTypeMismatch(connectionId: string,
        parameterName: string, parameterValue: any, expectedType: string)
      parameters:
        - id: connectionId
          type: string
          description: Id of the underlying AMQP connection used for logging
        - id: parameterName
          type: string
          description: Name of the parameter to type check
        - id: parameterValue
          type: any
          description: Value of the parameter to type check
        - id: expectedType
          type: string
          description: |
            Expected type of the parameter
  - name: parseURL(string)
    uid: '@azure/service-bus.parseURL'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function parseURL(rawUrl: string)'
      parameters:
        - id: rawUrl
          type: string
          description: ''
      return:
        type: any
        description: ''
  - name: parseURL(string)
    uid: '@azure/service-bus.parseURL'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function parseURL(rawUrl: string)'
      parameters:
        - id: rawUrl
          type: string
          description: ''
      return:
        type: URL
        description: ''
  - name: getDispositionType(DispositionStatus)
    uid: '@azure/service-bus.getDispositionType'
    package: '@azure/service-bus'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getDispositionType(dispositionStatus: DispositionStatus)'
      parameters:
        - id: dispositionStatus
          type: <xref uid="@azure/service-bus.DispositionStatus" />
          description: ''
      return:
        type: <xref uid="@azure/service-bus.DispositionType" /> | undefined
        description: ''
typeAliases:
  - '@azure/service-bus.MessageSessionOptions'
