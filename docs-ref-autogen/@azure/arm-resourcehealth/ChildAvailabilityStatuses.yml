### YamlMime:TSType
name: ChildAvailabilityStatuses
uid: '@azure/arm-resourcehealth.ChildAvailabilityStatuses'
package: '@azure/arm-resourcehealth'
summary: Class representing a ChildAvailabilityStatuses.
fullName: ChildAvailabilityStatuses
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: ChildAvailabilityStatuses(MicrosoftResourceHealthContext)
    uid: '@azure/arm-resourcehealth.ChildAvailabilityStatuses.constructor'
    package: '@azure/arm-resourcehealth'
    summary: Create a ChildAvailabilityStatuses.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new ChildAvailabilityStatuses(client: MicrosoftResourceHealthContext)'
      parameters:
        - id: client
          type: >-
            <xref uid="@azure/arm-resourcehealth.MicrosoftResourceHealthContext"
            />
          description: |
            Reference to the service client.
methods:
  - name: >-
      getByResource(string,
      ChildAvailabilityStatusesGetByResourceOptionalParams,
      ServiceCallback<AvailabilityStatus>)
    uid: '@azure/arm-resourcehealth.ChildAvailabilityStatuses.getByResource_2'
    package: '@azure/arm-resourcehealth'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getByResource(resourceUri: string, options:
        ChildAvailabilityStatusesGetByResourceOptionalParams, callback:
        ServiceCallback<AvailabilityStatus>)
      parameters:
        - id: resourceUri
          type: string
          description: >-
            The fully qualified ID of the resource, including the resource name
            and

            resource type. Currently the API only support one nesting level
            resource types :

            /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resourcehealth.ChildAvailabilityStatusesGetByResourceOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resourcehealth.AvailabilityStatus" />&gt;
          description: |
            The callback
  - name: >-
      getByResource(string,
      Models.ChildAvailabilityStatusesGetByResourceOptionalParams)
    uid: '@azure/arm-resourcehealth.ChildAvailabilityStatuses.getByResource'
    package: '@azure/arm-resourcehealth'
    summary: Gets current availability status for a single resource
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getByResource(resourceUri: string, options?:
        Models.ChildAvailabilityStatusesGetByResourceOptionalParams):
        Promise<Models.ChildAvailabilityStatusesGetByResourceResponse>
      parameters:
        - id: resourceUri
          type: string
          description: >-
            The fully qualified ID of the resource, including the resource name
            and

            resource type. Currently the API only support one nesting level
            resource types :

            /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
        - id: options
          type: >-
            <xref
            uid="Models.ChildAvailabilityStatusesGetByResourceOptionalParams" />
          description: ''
      return:
        description: Promise<Models.ChildAvailabilityStatusesGetByResourceResponse>
        type: >-
          Promise&lt;<xref
          uid="Models.ChildAvailabilityStatusesGetByResourceResponse" />&gt;
  - name: 'getByResource(string, ServiceCallback<AvailabilityStatus>)'
    uid: '@azure/arm-resourcehealth.ChildAvailabilityStatuses.getByResource_1'
    package: '@azure/arm-resourcehealth'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getByResource(resourceUri: string, callback:
        ServiceCallback<AvailabilityStatus>)
      parameters:
        - id: resourceUri
          type: string
          description: >-
            The fully qualified ID of the resource, including the resource name
            and

            resource type. Currently the API only support one nesting level
            resource types :

            /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resourcehealth.AvailabilityStatus" />&gt;
          description: |
            The callback
  - name: >-
      list(string, ChildAvailabilityStatusesListOptionalParams,
      ServiceCallback<AvailabilityStatusListResult>)
    uid: '@azure/arm-resourcehealth.ChildAvailabilityStatuses.list_2'
    package: '@azure/arm-resourcehealth'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function list(resourceUri: string, options:
        ChildAvailabilityStatusesListOptionalParams, callback:
        ServiceCallback<AvailabilityStatusListResult>)
      parameters:
        - id: resourceUri
          type: string
          description: >-
            The fully qualified ID of the resource, including the resource name
            and

            resource type. Currently the API only support one nesting level
            resource types :

            /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resourcehealth.ChildAvailabilityStatusesListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resourcehealth.AvailabilityStatusListResult" />&gt;
          description: |
            The callback
  - name: 'list(string, Models.ChildAvailabilityStatusesListOptionalParams)'
    uid: '@azure/arm-resourcehealth.ChildAvailabilityStatuses.list'
    package: '@azure/arm-resourcehealth'
    summary: >-
      Lists the historical availability statuses for a single child resource.
      Use the nextLink

      property in the response to get the next page of availability status
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function list(resourceUri: string, options?:
        Models.ChildAvailabilityStatusesListOptionalParams):
        Promise<Models.ChildAvailabilityStatusesListResponse>
      parameters:
        - id: resourceUri
          type: string
          description: >-
            The fully qualified ID of the resource, including the resource name
            and

            resource type. Currently the API only support one nesting level
            resource types :

            /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
        - id: options
          type: <xref uid="Models.ChildAvailabilityStatusesListOptionalParams" />
          description: ''
      return:
        description: Promise<Models.ChildAvailabilityStatusesListResponse>
        type: >-
          Promise&lt;<xref uid="Models.ChildAvailabilityStatusesListResponse"
          />&gt;
  - name: 'list(string, ServiceCallback<AvailabilityStatusListResult>)'
    uid: '@azure/arm-resourcehealth.ChildAvailabilityStatuses.list_1'
    package: '@azure/arm-resourcehealth'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function list(resourceUri: string, callback:
        ServiceCallback<AvailabilityStatusListResult>)
      parameters:
        - id: resourceUri
          type: string
          description: >-
            The fully qualified ID of the resource, including the resource name
            and

            resource type. Currently the API only support one nesting level
            resource types :

            /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resourcehealth.AvailabilityStatusListResult" />&gt;
          description: |
            The callback
  - name: >-
      listNext(string, ChildAvailabilityStatusesListNextOptionalParams,
      ServiceCallback<AvailabilityStatusListResult>)
    uid: '@azure/arm-resourcehealth.ChildAvailabilityStatuses.listNext_2'
    package: '@azure/arm-resourcehealth'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options:
        ChildAvailabilityStatusesListNextOptionalParams, callback:
        ServiceCallback<AvailabilityStatusListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resourcehealth.ChildAvailabilityStatusesListNextOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resourcehealth.AvailabilityStatusListResult" />&gt;
          description: |
            The callback
  - name: 'listNext(string, Models.ChildAvailabilityStatusesListNextOptionalParams)'
    uid: '@azure/arm-resourcehealth.ChildAvailabilityStatuses.listNext'
    package: '@azure/arm-resourcehealth'
    summary: >-
      Lists the historical availability statuses for a single child resource.
      Use the nextLink

      property in the response to get the next page of availability status
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options?:
        Models.ChildAvailabilityStatusesListNextOptionalParams):
        Promise<Models.ChildAvailabilityStatusesListNextResponse>
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref uid="Models.ChildAvailabilityStatusesListNextOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.ChildAvailabilityStatusesListNextResponse>
        type: >-
          Promise&lt;<xref
          uid="Models.ChildAvailabilityStatusesListNextResponse" />&gt;
  - name: 'listNext(string, ServiceCallback<AvailabilityStatusListResult>)'
    uid: '@azure/arm-resourcehealth.ChildAvailabilityStatuses.listNext_1'
    package: '@azure/arm-resourcehealth'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, callback:
        ServiceCallback<AvailabilityStatusListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resourcehealth.AvailabilityStatusListResult" />&gt;
          description: |
            The callback
