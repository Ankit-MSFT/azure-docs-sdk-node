### YamlMime:TSType
name: Deployments
uid: '@azure/arm-resources.operations.deployments.d.Deployments'
package: '@azure/arm-resources'
summary: Class representing a Deployments.
fullName: Deployments
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: Deployments(ResourceManagementClientContext)
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.constructor'
    package: '@azure/arm-resources'
    summary: Create a Deployments.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new Deployments(client: ResourceManagementClientContext)'
      parameters:
        - id: client
          type: >-
            <xref
            uid="@azure/arm-resources.resourceManagementClientContext.d.ResourceManagementClientContext"
            />
          description: |
            Reference to the service client.
methods:
  - name: 'beginCreateOrUpdate(string, string, Deployment, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginCreateOrUpdate
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdate(resourceGroupName: string, deploymentName:
        string, parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group to deploy the resources to. The name
            is

            case insensitive. The resource group must already exist.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.Deployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginCreateOrUpdateAtManagementGroupScope(string, string,
      ScopedDeployment, msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginCreateOrUpdateAtManagementGroupScope
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAtManagementGroupScope(groupId: string,
        deploymentName: string, parameters: ScopedDeployment, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.ScopedDeployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginCreateOrUpdateAtScope(string, string, Deployment,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginCreateOrUpdateAtScope
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAtScope(scope: string, deploymentName:
        string, parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.Deployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginCreateOrUpdateAtSubscriptionScope(string, Deployment,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginCreateOrUpdateAtSubscriptionScope
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAtSubscriptionScope(deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.Deployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginCreateOrUpdateAtTenantScope(string, ScopedDeployment,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginCreateOrUpdateAtTenantScope
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAtTenantScope(deploymentName: string,
        parameters: ScopedDeployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.ScopedDeployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginDeleteAtManagementGroupScope(string, string,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginDeleteAtManagementGroupScope
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAtManagementGroupScope(groupId: string,
        deploymentName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: 'beginDeleteAtScope(string, string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginDeleteAtScope
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAtScope(scope: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: 'beginDeleteAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginDeleteAtSubscriptionScope
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAtSubscriptionScope(deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: 'beginDeleteAtTenantScope(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginDeleteAtTenantScope
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAtTenantScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: 'beginDeleteMethod(string, string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginDeleteMethod
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. Deleting a
      template deployment does not

      affect the state of the resource group. This is an asynchronous operation
      that returns a status

      of 202 until the template deployment is successfully deleted. The Location
      response header

      contains the URI that is used to obtain the status of the process. While
      the process is running,

      a call to the URI in the Location header returns a status of 202. When the
      process finishes, the

      URI in the Location header returns a status of 204 on success. If the
      asynchronous request

      failed, the URI in the Location header returns an error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMethod(resourceGroupName: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group with the deployment to delete. The
            name

            is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: 'beginValidate(string, string, Deployment, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.beginValidate'
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidate(resourceGroupName: string, deploymentName:
        string, parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: |-
            The name of the resource group the template will be deployed to. The
            name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.Deployment" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginValidateAtManagementGroupScope(string, string, ScopedDeployment,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginValidateAtManagementGroupScope
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateAtManagementGroupScope(groupId: string,
        deploymentName: string, parameters: ScopedDeployment, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.ScopedDeployment" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginValidateAtScope(string, string, Deployment,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginValidateAtScope
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateAtScope(scope: string, deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.Deployment" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginValidateAtSubscriptionScope(string, Deployment,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginValidateAtSubscriptionScope
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateAtSubscriptionScope(deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.Deployment" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginValidateAtTenantScope(string, ScopedDeployment,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginValidateAtTenantScope
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateAtTenantScope(deploymentName: string, parameters:
        ScopedDeployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.ScopedDeployment" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: 'beginWhatIf(string, string, DeploymentWhatIf, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.beginWhatIf'
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the resource

      group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginWhatIf(resourceGroupName: string, deploymentName: string,
        parameters: DeploymentWhatIf, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: |-
            The name of the resource group the template will be deployed to. The
            name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.DeploymentWhatIf" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginWhatIfAtManagementGroupScope(string, string, ScopedDeploymentWhatIf,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginWhatIfAtManagementGroupScope
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the management

      group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginWhatIfAtManagementGroupScope(groupId: string,
        deploymentName: string, parameters: ScopedDeploymentWhatIf, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: >-
            <xref
            uid="@azure/arm-resources.models.index.d.ScopedDeploymentWhatIf" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginWhatIfAtSubscriptionScope(string, DeploymentWhatIf,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginWhatIfAtSubscriptionScope
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the

      subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginWhatIfAtSubscriptionScope(deploymentName: string,
        parameters: DeploymentWhatIf, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.DeploymentWhatIf" />
          description: Parameters to What If.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: >-
      beginWhatIfAtTenantScope(string, ScopedDeploymentWhatIf,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.beginWhatIfAtTenantScope
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the tenant

      group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginWhatIfAtTenantScope(deploymentName: string, parameters:
        ScopedDeploymentWhatIf, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: >-
            <xref
            uid="@azure/arm-resources.models.index.d.ScopedDeploymentWhatIf" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;LROPoller&gt;
        description: Promise<msRestAzure.LROPoller>
  - name: 'calculateTemplateHash(any, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.calculateTemplateHash
    package: '@azure/arm-resources'
    summary: Calculate the hash of the given template.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function calculateTemplateHash(template: any, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: template
          type: any
          description: The template provided to calculate hash.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.DeploymentsCalculateTemplateHashResponse"
          />&gt;
        description: Promise<Models.DeploymentsCalculateTemplateHashResponse>
  - name: >-
      calculateTemplateHash(any, RequestOptionsBase,
      ServiceCallback<TemplateHashResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.calculateTemplateHash_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function calculateTemplateHash(template: any, options:
        RequestOptionsBase, callback: ServiceCallback<TemplateHashResult>)
      parameters:
        - id: template
          type: any
          description: The template provided to calculate hash.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.TemplateHashResult" />&gt;
          description: |
            The callback
  - name: 'calculateTemplateHash(any, ServiceCallback<TemplateHashResult>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.calculateTemplateHash_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function calculateTemplateHash(template: any, callback:
        ServiceCallback<TemplateHashResult>)
      parameters:
        - id: template
          type: any
          description: The template provided to calculate hash.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.TemplateHashResult" />&gt;
          description: |
            The callback
  - name: 'cancel(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.cancel'
    package: '@azure/arm-resources'
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template

      deployment stops the currently running template deployment and leaves the
      resource group

      partially deployed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancel(resourceGroupName: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: 'cancel(string, string, RequestOptionsBase, ServiceCallback<void>)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.cancel_2'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancel(resourceGroupName: string, deploymentName: string,
        options: RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'cancel(string, string, ServiceCallback<void>)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.cancel_1'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancel(resourceGroupName: string, deploymentName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'cancelAtManagementGroupScope(string, string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.cancelAtManagementGroupScope
    package: '@azure/arm-resources'
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template

      deployment stops the currently running template deployment and leaves the
      resources partially

      deployed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtManagementGroupScope(groupId: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: >-
      cancelAtManagementGroupScope(string, string, RequestOptionsBase,
      ServiceCallback<void>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.cancelAtManagementGroupScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtManagementGroupScope(groupId: string, deploymentName:
        string, options: RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'cancelAtManagementGroupScope(string, string, ServiceCallback<void>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.cancelAtManagementGroupScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtManagementGroupScope(groupId: string, deploymentName:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'cancelAtScope(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.cancelAtScope'
    package: '@azure/arm-resources'
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template

      deployment stops the currently running template deployment and leaves the
      resources partially

      deployed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtScope(scope: string, deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: 'cancelAtScope(string, string, RequestOptionsBase, ServiceCallback<void>)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.cancelAtScope_2'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtScope(scope: string, deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'cancelAtScope(string, string, ServiceCallback<void>)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.cancelAtScope_1'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtScope(scope: string, deploymentName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'cancelAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.cancelAtSubscriptionScope
    package: '@azure/arm-resources'
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template

      deployment stops the currently running template deployment and leaves the
      resources partially

      deployed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtSubscriptionScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: >-
      cancelAtSubscriptionScope(string, RequestOptionsBase,
      ServiceCallback<void>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.cancelAtSubscriptionScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtSubscriptionScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'cancelAtSubscriptionScope(string, ServiceCallback<void>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.cancelAtSubscriptionScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtSubscriptionScope(deploymentName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'cancelAtTenantScope(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.cancelAtTenantScope
    package: '@azure/arm-resources'
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template

      deployment stops the currently running template deployment and leaves the
      resources partially

      deployed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtTenantScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: 'cancelAtTenantScope(string, RequestOptionsBase, ServiceCallback<void>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.cancelAtTenantScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtTenantScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'cancelAtTenantScope(string, ServiceCallback<void>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.cancelAtTenantScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAtTenantScope(deploymentName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'checkExistence(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.checkExistence'
    package: '@azure/arm-resources'
    summary: Checks whether the deployment exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistence(resourceGroupName: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group with the deployment to check. The
            name

            is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.DeploymentsCheckExistenceResponse" />&gt;
        description: Promise<Models.DeploymentsCheckExistenceResponse>
  - name: >-
      checkExistence(string, string, RequestOptionsBase,
      ServiceCallback<boolean>)
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.checkExistence_2'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistence(resourceGroupName: string, deploymentName:
        string, options: RequestOptionsBase, callback: ServiceCallback<boolean>)
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group with the deployment to check. The
            name

            is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;boolean&gt;
          description: |
            The callback
  - name: 'checkExistence(string, string, ServiceCallback<boolean>)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.checkExistence_1'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistence(resourceGroupName: string, deploymentName:
        string, callback: ServiceCallback<boolean>)
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group with the deployment to check. The
            name

            is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: ServiceCallback&lt;boolean&gt;
          description: |
            The callback
  - name: >-
      checkExistenceAtManagementGroupScope(string, string,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.checkExistenceAtManagementGroupScope
    package: '@azure/arm-resources'
    summary: Checks whether the deployment exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtManagementGroupScope(groupId: string,
        deploymentName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse"
          />&gt;
        description: >-
          Promise<Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse>
  - name: >-
      checkExistenceAtManagementGroupScope(string, string, RequestOptionsBase,
      ServiceCallback<boolean>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.checkExistenceAtManagementGroupScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtManagementGroupScope(groupId: string,
        deploymentName: string, options: RequestOptionsBase, callback:
        ServiceCallback<boolean>)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;boolean&gt;
          description: |
            The callback
  - name: >-
      checkExistenceAtManagementGroupScope(string, string,
      ServiceCallback<boolean>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.checkExistenceAtManagementGroupScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtManagementGroupScope(groupId: string,
        deploymentName: string, callback: ServiceCallback<boolean>)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: ServiceCallback&lt;boolean&gt;
          description: |
            The callback
  - name: 'checkExistenceAtScope(string, string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.checkExistenceAtScope
    package: '@azure/arm-resources'
    summary: Checks whether the deployment exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtScope(scope: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.DeploymentsCheckExistenceAtScopeResponse"
          />&gt;
        description: Promise<Models.DeploymentsCheckExistenceAtScopeResponse>
  - name: >-
      checkExistenceAtScope(string, string, RequestOptionsBase,
      ServiceCallback<boolean>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.checkExistenceAtScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtScope(scope: string, deploymentName: string,
        options: RequestOptionsBase, callback: ServiceCallback<boolean>)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;boolean&gt;
          description: |
            The callback
  - name: 'checkExistenceAtScope(string, string, ServiceCallback<boolean>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.checkExistenceAtScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtScope(scope: string, deploymentName: string,
        callback: ServiceCallback<boolean>)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: ServiceCallback&lt;boolean&gt;
          description: |
            The callback
  - name: 'checkExistenceAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.checkExistenceAtSubscriptionScope
    package: '@azure/arm-resources'
    summary: Checks whether the deployment exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtSubscriptionScope(deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse"
          />&gt;
        description: Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>
  - name: >-
      checkExistenceAtSubscriptionScope(string, RequestOptionsBase,
      ServiceCallback<boolean>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.checkExistenceAtSubscriptionScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtSubscriptionScope(deploymentName: string,
        options: RequestOptionsBase, callback: ServiceCallback<boolean>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;boolean&gt;
          description: |
            The callback
  - name: 'checkExistenceAtSubscriptionScope(string, ServiceCallback<boolean>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.checkExistenceAtSubscriptionScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtSubscriptionScope(deploymentName: string,
        callback: ServiceCallback<boolean>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: ServiceCallback&lt;boolean&gt;
          description: |
            The callback
  - name: 'checkExistenceAtTenantScope(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.checkExistenceAtTenantScope
    package: '@azure/arm-resources'
    summary: Checks whether the deployment exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtTenantScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsCheckExistenceAtTenantScopeResponse" />&gt;
        description: Promise<Models.DeploymentsCheckExistenceAtTenantScopeResponse>
  - name: >-
      checkExistenceAtTenantScope(string, RequestOptionsBase,
      ServiceCallback<boolean>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.checkExistenceAtTenantScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtTenantScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<boolean>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;boolean&gt;
          description: |
            The callback
  - name: 'checkExistenceAtTenantScope(string, ServiceCallback<boolean>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.checkExistenceAtTenantScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkExistenceAtTenantScope(deploymentName: string, callback:
        ServiceCallback<boolean>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: ServiceCallback&lt;boolean&gt;
          description: |
            The callback
  - name: 'createOrUpdate(string, string, Deployment, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.createOrUpdate'
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdate(resourceGroupName: string, deploymentName:
        string, parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group to deploy the resources to. The name
            is

            case insensitive. The resource group must already exist.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.Deployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.DeploymentsCreateOrUpdateResponse" />&gt;
        description: Promise<Models.DeploymentsCreateOrUpdateResponse>
  - name: >-
      createOrUpdateAtManagementGroupScope(string, string, ScopedDeployment,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.createOrUpdateAtManagementGroupScope
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateAtManagementGroupScope(groupId: string,
        deploymentName: string, parameters: ScopedDeployment, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.ScopedDeployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse"
          />&gt;
        description: >-
          Promise<Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>
  - name: >-
      createOrUpdateAtScope(string, string, Deployment,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.createOrUpdateAtScope
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateAtScope(scope: string, deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.Deployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.DeploymentsCreateOrUpdateAtScopeResponse"
          />&gt;
        description: Promise<Models.DeploymentsCreateOrUpdateAtScopeResponse>
  - name: >-
      createOrUpdateAtSubscriptionScope(string, Deployment,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.createOrUpdateAtSubscriptionScope
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateAtSubscriptionScope(deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.Deployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse"
          />&gt;
        description: Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>
  - name: >-
      createOrUpdateAtTenantScope(string, ScopedDeployment,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.createOrUpdateAtTenantScope
    package: '@azure/arm-resources'
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateAtTenantScope(deploymentName: string, parameters:
        ScopedDeployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.ScopedDeployment" />
          description: Additional parameters supplied to the operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsCreateOrUpdateAtTenantScopeResponse" />&gt;
        description: Promise<Models.DeploymentsCreateOrUpdateAtTenantScopeResponse>
  - name: 'deleteAtManagementGroupScope(string, string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.deleteAtManagementGroupScope
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteAtManagementGroupScope(groupId: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: 'deleteAtScope(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.deleteAtScope'
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteAtScope(scope: string, deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: 'deleteAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.deleteAtSubscriptionScope
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteAtSubscriptionScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: 'deleteAtTenantScope(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.deleteAtTenantScope
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteAtTenantScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: 'deleteMethod(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.deleteMethod'
    package: '@azure/arm-resources'
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. Deleting a
      template deployment does not

      affect the state of the resource group. This is an asynchronous operation
      that returns a status

      of 202 until the template deployment is successfully deleted. The Location
      response header

      contains the URI that is used to obtain the status of the process. While
      the process is running,

      a call to the URI in the Location header returns a status of 202. When the
      process finishes, the

      URI in the Location header returns a status of 204 on success. If the
      asynchronous request

      failed, the URI in the Location header returns an error-level status code.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group with the deployment to delete. The
            name

            is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;RestResponse&gt;
        description: Promise<msRest.RestResponse>
  - name: 'exportTemplate(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.exportTemplate'
    package: '@azure/arm-resources'
    summary: Exports the template used for specified deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplate(resourceGroupName: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.DeploymentsExportTemplateResponse" />&gt;
        description: Promise<Models.DeploymentsExportTemplateResponse>
  - name: >-
      exportTemplate(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExportResult>)
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.exportTemplate_2'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplate(resourceGroupName: string, deploymentName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExportResult"
            />&gt;
          description: |
            The callback
  - name: 'exportTemplate(string, string, ServiceCallback<DeploymentExportResult>)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.exportTemplate_1'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplate(resourceGroupName: string, deploymentName:
        string, callback: ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExportResult"
            />&gt;
          description: |
            The callback
  - name: >-
      exportTemplateAtManagementGroupScope(string, string,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.exportTemplateAtManagementGroupScope
    package: '@azure/arm-resources'
    summary: Exports the template used for specified deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtManagementGroupScope(groupId: string,
        deploymentName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsExportTemplateAtManagementGroupScopeResponse"
          />&gt;
        description: >-
          Promise<Models.DeploymentsExportTemplateAtManagementGroupScopeResponse>
  - name: >-
      exportTemplateAtManagementGroupScope(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExportResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.exportTemplateAtManagementGroupScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtManagementGroupScope(groupId: string,
        deploymentName: string, options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExportResult"
            />&gt;
          description: |
            The callback
  - name: >-
      exportTemplateAtManagementGroupScope(string, string,
      ServiceCallback<DeploymentExportResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.exportTemplateAtManagementGroupScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtManagementGroupScope(groupId: string,
        deploymentName: string, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExportResult"
            />&gt;
          description: |
            The callback
  - name: 'exportTemplateAtScope(string, string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.exportTemplateAtScope
    package: '@azure/arm-resources'
    summary: Exports the template used for specified deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtScope(scope: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.DeploymentsExportTemplateAtScopeResponse"
          />&gt;
        description: Promise<Models.DeploymentsExportTemplateAtScopeResponse>
  - name: >-
      exportTemplateAtScope(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExportResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.exportTemplateAtScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtScope(scope: string, deploymentName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExportResult"
            />&gt;
          description: |
            The callback
  - name: >-
      exportTemplateAtScope(string, string,
      ServiceCallback<DeploymentExportResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.exportTemplateAtScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtScope(scope: string, deploymentName: string,
        callback: ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExportResult"
            />&gt;
          description: |
            The callback
  - name: 'exportTemplateAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.exportTemplateAtSubscriptionScope
    package: '@azure/arm-resources'
    summary: Exports the template used for specified deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtSubscriptionScope(deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsExportTemplateAtSubscriptionScopeResponse"
          />&gt;
        description: Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>
  - name: >-
      exportTemplateAtSubscriptionScope(string, RequestOptionsBase,
      ServiceCallback<DeploymentExportResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.exportTemplateAtSubscriptionScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtSubscriptionScope(deploymentName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExportResult"
            />&gt;
          description: |
            The callback
  - name: >-
      exportTemplateAtSubscriptionScope(string,
      ServiceCallback<DeploymentExportResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.exportTemplateAtSubscriptionScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtSubscriptionScope(deploymentName: string,
        callback: ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExportResult"
            />&gt;
          description: |
            The callback
  - name: 'exportTemplateAtTenantScope(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.exportTemplateAtTenantScope
    package: '@azure/arm-resources'
    summary: Exports the template used for specified deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtTenantScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsExportTemplateAtTenantScopeResponse" />&gt;
        description: Promise<Models.DeploymentsExportTemplateAtTenantScopeResponse>
  - name: >-
      exportTemplateAtTenantScope(string, RequestOptionsBase,
      ServiceCallback<DeploymentExportResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.exportTemplateAtTenantScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtTenantScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExportResult"
            />&gt;
          description: |
            The callback
  - name: >-
      exportTemplateAtTenantScope(string,
      ServiceCallback<DeploymentExportResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.exportTemplateAtTenantScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exportTemplateAtTenantScope(deploymentName: string, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExportResult"
            />&gt;
          description: |
            The callback
  - name: 'get(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.get'
    package: '@azure/arm-resources'
    summary: Gets a deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.DeploymentsGetResponse" />&gt;
        description: Promise<Models.DeploymentsGetResponse>
  - name: >-
      get(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExtended>)
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.get_2'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExtended" />&gt;
          description: |
            The callback
  - name: 'get(string, string, ServiceCallback<DeploymentExtended>)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.get_1'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, deploymentName: string,
        callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExtended" />&gt;
          description: |
            The callback
  - name: 'getAtManagementGroupScope(string, string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.getAtManagementGroupScope
    package: '@azure/arm-resources'
    summary: Gets a deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtManagementGroupScope(groupId: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsGetAtManagementGroupScopeResponse" />&gt;
        description: Promise<Models.DeploymentsGetAtManagementGroupScopeResponse>
  - name: >-
      getAtManagementGroupScope(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExtended>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.getAtManagementGroupScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtManagementGroupScope(groupId: string, deploymentName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentExtended>)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExtended" />&gt;
          description: |
            The callback
  - name: >-
      getAtManagementGroupScope(string, string,
      ServiceCallback<DeploymentExtended>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.getAtManagementGroupScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtManagementGroupScope(groupId: string, deploymentName:
        string, callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExtended" />&gt;
          description: |
            The callback
  - name: 'getAtScope(string, string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.getAtScope'
    package: '@azure/arm-resources'
    summary: Gets a deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtScope(scope: string, deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.DeploymentsGetAtScopeResponse" />&gt;
        description: Promise<Models.DeploymentsGetAtScopeResponse>
  - name: >-
      getAtScope(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExtended>)
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.getAtScope_2'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtScope(scope: string, deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExtended" />&gt;
          description: |
            The callback
  - name: 'getAtScope(string, string, ServiceCallback<DeploymentExtended>)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.getAtScope_1'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtScope(scope: string, deploymentName: string, callback:
        ServiceCallback<DeploymentExtended>)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExtended" />&gt;
          description: |
            The callback
  - name: 'getAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.getAtSubscriptionScope
    package: '@azure/arm-resources'
    summary: Gets a deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtSubscriptionScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsGetAtSubscriptionScopeResponse" />&gt;
        description: Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>
  - name: >-
      getAtSubscriptionScope(string, RequestOptionsBase,
      ServiceCallback<DeploymentExtended>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.getAtSubscriptionScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtSubscriptionScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExtended" />&gt;
          description: |
            The callback
  - name: 'getAtSubscriptionScope(string, ServiceCallback<DeploymentExtended>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.getAtSubscriptionScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtSubscriptionScope(deploymentName: string, callback:
        ServiceCallback<DeploymentExtended>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExtended" />&gt;
          description: |
            The callback
  - name: 'getAtTenantScope(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.getAtTenantScope'
    package: '@azure/arm-resources'
    summary: Gets a deployment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtTenantScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.DeploymentsGetAtTenantScopeResponse"
          />&gt;
        description: Promise<Models.DeploymentsGetAtTenantScopeResponse>
  - name: >-
      getAtTenantScope(string, RequestOptionsBase,
      ServiceCallback<DeploymentExtended>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.getAtTenantScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtTenantScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExtended" />&gt;
          description: |
            The callback
  - name: 'getAtTenantScope(string, ServiceCallback<DeploymentExtended>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.getAtTenantScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAtTenantScope(deploymentName: string, callback:
        ServiceCallback<DeploymentExtended>)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentExtended" />&gt;
          description: |
            The callback
  - name: >-
      listAtManagementGroupScope(string,
      DeploymentsListAtManagementGroupScopeOptionalParams,
      ServiceCallback<DeploymentListResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtManagementGroupScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtManagementGroupScope(groupId: string, options:
        DeploymentsListAtManagementGroupScopeOptionalParams, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.models.index.d.DeploymentsListAtManagementGroupScopeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: >-
      listAtManagementGroupScope(string,
      Models.DeploymentsListAtManagementGroupScopeOptionalParams)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtManagementGroupScope
    package: '@azure/arm-resources'
    summary: Get all the deployments for a management group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtManagementGroupScope(groupId: string, options?:
        Models.DeploymentsListAtManagementGroupScopeOptionalParams)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: options
          type: >-
            <xref
            uid="Models.DeploymentsListAtManagementGroupScopeOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsListAtManagementGroupScopeResponse" />&gt;
        description: Promise<Models.DeploymentsListAtManagementGroupScopeResponse>
  - name: 'listAtManagementGroupScope(string, ServiceCallback<DeploymentListResult>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtManagementGroupScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtManagementGroupScope(groupId: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: 'listAtManagementGroupScopeNext(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtManagementGroupScopeNext
    package: '@azure/arm-resources'
    summary: Get all the deployments for a management group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtManagementGroupScopeNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsListAtManagementGroupScopeNextResponse" />&gt;
        description: Promise<Models.DeploymentsListAtManagementGroupScopeNextResponse>
  - name: >-
      listAtManagementGroupScopeNext(string, RequestOptionsBase,
      ServiceCallback<DeploymentListResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtManagementGroupScopeNext_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtManagementGroupScopeNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: >-
      listAtManagementGroupScopeNext(string,
      ServiceCallback<DeploymentListResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtManagementGroupScopeNext_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtManagementGroupScopeNext(nextPageLink: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: >-
      listAtScope(string, DeploymentsListAtScopeOptionalParams,
      ServiceCallback<DeploymentListResult>)
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.listAtScope_2'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtScope(scope: string, options:
        DeploymentsListAtScopeOptionalParams, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.models.index.d.DeploymentsListAtScopeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: 'listAtScope(string, Models.DeploymentsListAtScopeOptionalParams)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.listAtScope'
    package: '@azure/arm-resources'
    summary: Get all the deployments at the given scope.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtScope(scope: string, options?:
        Models.DeploymentsListAtScopeOptionalParams)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: options
          type: <xref uid="Models.DeploymentsListAtScopeOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.DeploymentsListAtScopeResponse" />&gt;
        description: Promise<Models.DeploymentsListAtScopeResponse>
  - name: 'listAtScope(string, ServiceCallback<DeploymentListResult>)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.listAtScope_1'
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtScope(scope: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: 'listAtScopeNext(string, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.listAtScopeNext'
    package: '@azure/arm-resources'
    summary: Get all the deployments at the given scope.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtScopeNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.DeploymentsListAtScopeNextResponse"
          />&gt;
        description: Promise<Models.DeploymentsListAtScopeNextResponse>
  - name: >-
      listAtScopeNext(string, RequestOptionsBase,
      ServiceCallback<DeploymentListResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtScopeNext_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtScopeNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: 'listAtScopeNext(string, ServiceCallback<DeploymentListResult>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtScopeNext_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtScopeNext(nextPageLink: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: >-
      listAtSubscriptionScope(DeploymentsListAtSubscriptionScopeOptionalParams,
      ServiceCallback<DeploymentListResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtSubscriptionScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtSubscriptionScope(options:
        DeploymentsListAtSubscriptionScopeOptionalParams, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.models.index.d.DeploymentsListAtSubscriptionScopeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: >-
      listAtSubscriptionScope(Models.DeploymentsListAtSubscriptionScopeOptionalParams)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtSubscriptionScope
    package: '@azure/arm-resources'
    summary: Get all the deployments for a subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtSubscriptionScope(options?:
        Models.DeploymentsListAtSubscriptionScopeOptionalParams)
      parameters:
        - id: options
          type: >-
            <xref uid="Models.DeploymentsListAtSubscriptionScopeOptionalParams"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsListAtSubscriptionScopeResponse" />&gt;
        description: Promise<Models.DeploymentsListAtSubscriptionScopeResponse>
  - name: listAtSubscriptionScope(ServiceCallback<DeploymentListResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtSubscriptionScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtSubscriptionScope(callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: 'listAtSubscriptionScopeNext(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtSubscriptionScopeNext
    package: '@azure/arm-resources'
    summary: Get all the deployments for a subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtSubscriptionScopeNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsListAtSubscriptionScopeNextResponse" />&gt;
        description: Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>
  - name: >-
      listAtSubscriptionScopeNext(string, RequestOptionsBase,
      ServiceCallback<DeploymentListResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtSubscriptionScopeNext_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtSubscriptionScopeNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: 'listAtSubscriptionScopeNext(string, ServiceCallback<DeploymentListResult>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtSubscriptionScopeNext_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtSubscriptionScopeNext(nextPageLink: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: >-
      listAtTenantScope(DeploymentsListAtTenantScopeOptionalParams,
      ServiceCallback<DeploymentListResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtTenantScope_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtTenantScope(options:
        DeploymentsListAtTenantScopeOptionalParams, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.models.index.d.DeploymentsListAtTenantScopeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: listAtTenantScope(Models.DeploymentsListAtTenantScopeOptionalParams)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtTenantScope
    package: '@azure/arm-resources'
    summary: Get all the deployments at the tenant scope.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtTenantScope(options?:
        Models.DeploymentsListAtTenantScopeOptionalParams)
      parameters:
        - id: options
          type: <xref uid="Models.DeploymentsListAtTenantScopeOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.DeploymentsListAtTenantScopeResponse"
          />&gt;
        description: Promise<Models.DeploymentsListAtTenantScopeResponse>
  - name: listAtTenantScope(ServiceCallback<DeploymentListResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtTenantScope_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtTenantScope(callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: 'listAtTenantScopeNext(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtTenantScopeNext
    package: '@azure/arm-resources'
    summary: Get all the deployments at the tenant scope.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtTenantScopeNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.DeploymentsListAtTenantScopeNextResponse"
          />&gt;
        description: Promise<Models.DeploymentsListAtTenantScopeNextResponse>
  - name: >-
      listAtTenantScopeNext(string, RequestOptionsBase,
      ServiceCallback<DeploymentListResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtTenantScopeNext_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtTenantScopeNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: 'listAtTenantScopeNext(string, ServiceCallback<DeploymentListResult>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listAtTenantScopeNext_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAtTenantScopeNext(nextPageLink: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: >-
      listByResourceGroup(string, DeploymentsListByResourceGroupOptionalParams,
      ServiceCallback<DeploymentListResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listByResourceGroup_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options:
        DeploymentsListByResourceGroupOptionalParams, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group with the deployments to get. The name
            is

            case insensitive.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-resources.models.index.d.DeploymentsListByResourceGroupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: >-
      listByResourceGroup(string,
      Models.DeploymentsListByResourceGroupOptionalParams)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listByResourceGroup
    package: '@azure/arm-resources'
    summary: Get all the deployments for a resource group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options?:
        Models.DeploymentsListByResourceGroupOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group with the deployments to get. The name
            is

            case insensitive.
        - id: options
          type: <xref uid="Models.DeploymentsListByResourceGroupOptionalParams" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.DeploymentsListByResourceGroupResponse"
          />&gt;
        description: Promise<Models.DeploymentsListByResourceGroupResponse>
  - name: 'listByResourceGroup(string, ServiceCallback<DeploymentListResult>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listByResourceGroup_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: >-
            The name of the resource group with the deployments to get. The name
            is

            case insensitive.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: 'listByResourceGroupNext(string, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listByResourceGroupNext
    package: '@azure/arm-resources'
    summary: Get all the deployments for a resource group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsListByResourceGroupNextResponse" />&gt;
        description: Promise<Models.DeploymentsListByResourceGroupNextResponse>
  - name: >-
      listByResourceGroupNext(string, RequestOptionsBase,
      ServiceCallback<DeploymentListResult>)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listByResourceGroupNext_2
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: 'listByResourceGroupNext(string, ServiceCallback<DeploymentListResult>)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.listByResourceGroupNext_1
    package: '@azure/arm-resources'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/arm-resources.models.index.d.DeploymentListResult"
            />&gt;
          description: |
            The callback
  - name: 'validate(string, string, Deployment, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.validate'
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function validate(resourceGroupName: string, deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: |-
            The name of the resource group the template will be deployed to. The
            name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.Deployment" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.DeploymentsValidateResponse" />&gt;
        description: Promise<Models.DeploymentsValidateResponse>
  - name: >-
      validateAtManagementGroupScope(string, string, ScopedDeployment,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.validateAtManagementGroupScope
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function validateAtManagementGroupScope(groupId: string, deploymentName:
        string, parameters: ScopedDeployment, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.ScopedDeployment" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsValidateAtManagementGroupScopeResponse" />&gt;
        description: Promise<Models.DeploymentsValidateAtManagementGroupScopeResponse>
  - name: 'validateAtScope(string, string, Deployment, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.validateAtScope'
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function validateAtScope(scope: string, deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type: string
          description: The resource scope.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.Deployment" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.DeploymentsValidateAtScopeResponse"
          />&gt;
        description: Promise<Models.DeploymentsValidateAtScopeResponse>
  - name: 'validateAtSubscriptionScope(string, Deployment, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.validateAtSubscriptionScope
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function validateAtSubscriptionScope(deploymentName: string, parameters:
        Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.Deployment" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsValidateAtSubscriptionScopeResponse" />&gt;
        description: Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>
  - name: 'validateAtTenantScope(string, ScopedDeployment, msRest.RequestOptionsBase)'
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.validateAtTenantScope
    package: '@azure/arm-resources'
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function validateAtTenantScope(deploymentName: string, parameters:
        ScopedDeployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.ScopedDeployment" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.DeploymentsValidateAtTenantScopeResponse"
          />&gt;
        description: Promise<Models.DeploymentsValidateAtTenantScopeResponse>
  - name: 'whatIf(string, string, DeploymentWhatIf, msRest.RequestOptionsBase)'
    uid: '@azure/arm-resources.operations.deployments.d.Deployments.whatIf'
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the resource

      group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function whatIf(resourceGroupName: string, deploymentName: string,
        parameters: DeploymentWhatIf, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type: string
          description: |-
            The name of the resource group the template will be deployed to. The
            name is case insensitive.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.DeploymentWhatIf" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.DeploymentsWhatIfResponse" />&gt;
        description: Promise<Models.DeploymentsWhatIfResponse>
  - name: >-
      whatIfAtManagementGroupScope(string, string, ScopedDeploymentWhatIf,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.whatIfAtManagementGroupScope
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the management

      group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function whatIfAtManagementGroupScope(groupId: string, deploymentName:
        string, parameters: ScopedDeploymentWhatIf, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type: string
          description: The management group ID.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: >-
            <xref
            uid="@azure/arm-resources.models.index.d.ScopedDeploymentWhatIf" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsWhatIfAtManagementGroupScopeResponse" />&gt;
        description: Promise<Models.DeploymentsWhatIfAtManagementGroupScopeResponse>
  - name: >-
      whatIfAtSubscriptionScope(string, DeploymentWhatIf,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.whatIfAtSubscriptionScope
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the

      subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function whatIfAtSubscriptionScope(deploymentName: string, parameters:
        DeploymentWhatIf, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: <xref uid="@azure/arm-resources.models.index.d.DeploymentWhatIf" />
          description: Parameters to What If.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.DeploymentsWhatIfAtSubscriptionScopeResponse" />&gt;
        description: Promise<Models.DeploymentsWhatIfAtSubscriptionScopeResponse>
  - name: >-
      whatIfAtTenantScope(string, ScopedDeploymentWhatIf,
      msRest.RequestOptionsBase)
    uid: >-
      @azure/arm-resources.operations.deployments.d.Deployments.whatIfAtTenantScope
    package: '@azure/arm-resources'
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the tenant

      group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function whatIfAtTenantScope(deploymentName: string, parameters:
        ScopedDeploymentWhatIf, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: parameters
          type: >-
            <xref
            uid="@azure/arm-resources.models.index.d.ScopedDeploymentWhatIf" />
          description: Parameters to validate.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.DeploymentsWhatIfAtTenantScopeResponse"
          />&gt;
        description: Promise<Models.DeploymentsWhatIfAtTenantScopeResponse>
