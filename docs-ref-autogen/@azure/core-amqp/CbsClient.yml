### YamlMime:TSType
name: CbsClient
uid: '@azure/core-amqp.CbsClient'
package: '@azure/core-amqp'
summary: ''
fullName: CbsClient
type: class
constructors:
  - name: 'CbsClient(Connection, string)'
    uid: '@azure/core-amqp.CbsClient.constructor'
    package: '@azure/core-amqp'
    summary: ''
    syntax:
      content: 'new CbsClient(connection: Connection, connectionLock: string)'
      parameters:
        - id: connection
          type: Connection
          description: The AMQP connection.
        - id: connectionLock
          type: string
          description: |
            A unique string (usually a guid) per connection.
properties:
  - name: cbsLock
    uid: '@azure/core-amqp.CbsClient.cbsLock'
    package: '@azure/core-amqp'
    summary: >-
      {string} cbsLock The unique lock name per $cbs session per connection that
      is used to

      acquire the lock for establishing a cbs session if one does not exist for
      an amqp connection.
    fullName: cbsLock
    syntax:
      content: 'cbsLock: string'
      return:
        type: string
        description: ''
  - name: connection
    uid: '@azure/core-amqp.CbsClient.connection'
    package: '@azure/core-amqp'
    summary: '{Connection} connection The AMQP connection.'
    fullName: connection
    syntax:
      content: 'connection: Connection'
      return:
        type: Connection
        description: ''
  - name: connectionLock
    uid: '@azure/core-amqp.CbsClient.connectionLock'
    package: '@azure/core-amqp'
    summary: >-
      {string} connectionLock The unique lock name per connection that is used
      to

      acquire the lock for establishing an amqp connection if one does not
      exist.
    fullName: connectionLock
    syntax:
      content: 'connectionLock: string'
      return:
        type: string
        description: ''
  - name: endpoint
    uid: '@azure/core-amqp.CbsClient.endpoint'
    package: '@azure/core-amqp'
    summary: '{string} endpoint CBS endpoint - "$cbs"'
    fullName: endpoint
    syntax:
      content: 'endpoint: string'
      return:
        type: string
        description: ''
  - name: replyTo
    uid: '@azure/core-amqp.CbsClient.replyTo'
    package: '@azure/core-amqp'
    summary: >-
      {string} replyTo CBS replyTo - The receiver link name that the service
      should reply to.
    fullName: replyTo
    syntax:
      content: 'replyTo: string'
      return:
        type: string
        description: ''
methods:
  - name: close()
    uid: '@azure/core-amqp.CbsClient.close'
    package: '@azure/core-amqp'
    summary: |-
      Closes the AMQP cbs session to the EventHub/ServiceBus for this client,
      returning a promise that will be resolved when disconnection is completed.
    syntax:
      content: function close()
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: init()
    uid: '@azure/core-amqp.CbsClient.init'
    package: '@azure/core-amqp'
    summary: >-
      Creates a singleton instance of the CBS session if it hasn't been
      initialized previously on

      the given connection.
    syntax:
      content: function init()
      return:
        type: Promise&lt;void&gt;
        description: Promise<void>.
  - name: 'negotiateClaim(string, AccessToken, TokenType)'
    uid: '@azure/core-amqp.CbsClient.negotiateClaim'
    package: '@azure/core-amqp'
    summary: Negotiates the CBS claim with the EventHub/ServiceBus Service.
    syntax:
      content: >-
        function negotiateClaim(audience: string, tokenObject: AccessToken,
        tokenType: TokenType)
      parameters:
        - id: audience
          type: string
          description: |-
            The entity token audience for which the token is requested in one
            of the following forms:

            - **ServiceBus**
               - **Sender**
                   - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`
                   - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`

               - **Receiver**
                    - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`
                    - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`

               - **ManagementClient**
                    - `"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management"`.
                    - `"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management"`.

            - **EventHubs**
                - **Sender**
                     - `"sb://<yournamespace>.servicebus.windows.net/<hubName>"`
                     - `"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>"`.

                - **Receiver**
                    - `"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>"`.

                - **ManagementClient**
                    - `"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/$management"`.
        - id: tokenObject
          type: AccessToken
          description: The token object that needs to be sent in the put-token request.
        - id: tokenType
          type: <xref uid="@azure/core-amqp.TokenType" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/core-amqp.CbsResponse" />&gt;
        description: |-
          Returns a Promise that resolves when $cbs authentication is successful
          and rejects when an error occurs during $cbs authentication.
  - name: remove()
    uid: '@azure/core-amqp.CbsClient.remove'
    package: '@azure/core-amqp'
    summary: 'Removes the AMQP cbs session to the EventHub/ServiceBus for this client,'
    syntax:
      content: function remove()
