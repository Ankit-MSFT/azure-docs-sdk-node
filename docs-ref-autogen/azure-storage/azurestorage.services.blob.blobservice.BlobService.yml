### YamlMime:UniversalReference
items:
  - uid: azure-storage.azurestorage.services.blob.blobservice.BlobService
    name: BlobService
    fullName: BlobService
    children:
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.abortCopyBlob_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.abortCopyBlob
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.acquireLease_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.acquireLease
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.appendBlockFromStream
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.appendBlockFromStream_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.appendBlockFromText
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.appendBlockFromText_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromBrowserFile_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromBrowserFile
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromLocalFile
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromLocalFile_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromStream
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromStream_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromText
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromText_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.constructor
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobToText
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.breakLease
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.breakLease_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.changeLease
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.changeLease_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.clearPageRange_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.clearPageRange
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.commitBlocks
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.commitBlocks_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromBrowserFile_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromBrowserFile
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromLocalFile
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromLocalFile_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromStream
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromStream_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromText_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromText
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlobSnapshot_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlobSnapshot
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromBrowserFile_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromBrowserFile
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromLocalFile
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromLocalFile_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromStream
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromStream_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromText
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromText_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromStream
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromStream_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromText_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromText
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromURL
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromURL_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createContainer
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createContainer_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createContainerIfNotExists_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createContainerIfNotExists
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createOrReplaceAppendBlob_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createOrReplaceAppendBlob
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlob
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlob_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromBrowserFile_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromBrowserFile
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromLocalFile
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromLocalFile_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromStream_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromStream
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createPagesFromStream_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createPagesFromStream
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createReadStream
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createReadStream_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToBlockBlob_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToBlockBlob
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToExistingAppendBlob
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToExistingAppendBlob_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToExistingPageBlob
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToExistingPageBlob_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToNewAppendBlob
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToNewAppendBlob_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToNewPageBlob_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToNewPageBlob
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.defaultEnableReuseSocket
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteBlob
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteBlob_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteBlobIfExists
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteBlobIfExists_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteContainer
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteContainer_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteContainerIfExists_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteContainerIfExists
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.doesBlobExist_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.doesBlobExist
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.doesContainerExist
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.doesContainerExist_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.generateBlockIdPrefix
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.generateSharedAccessSignature
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.generateSharedAccessSignatureWithVersion
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getAccountProperties
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getAccountProperties_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobMetadata
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobMetadata_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobProperties
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobProperties_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToLocalFile_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToLocalFile
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToStream_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToStream
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToText_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToText
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlockId
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerAcl
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerAcl_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerMetadata
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerMetadata_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerProperties
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerProperties_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getPageRangesDiff_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getPageRangesDiff
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getServiceProperties_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getServiceProperties
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getServiceStats
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.getServiceStats_1
      - azure-storage.azurestorage.services.blob.blobservice.BlobService.getUrl
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseRequestOptions
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobsSegmented
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobsSegmented_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobsSegmentedWithPrefix_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobsSegmentedWithPrefix
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlocks
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlocks_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.listContainersSegmented
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.listContainersSegmented_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.listContainersSegmentedWithPrefix
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.listContainersSegmentedWithPrefix_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.listPageRanges
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.listPageRanges_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.parallelOperationThreadCount
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.releaseLease
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.releaseLease_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.renewLease
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.renewLease_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.resizePageBlob
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.resizePageBlob_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobMetadata
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobMetadata_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobProperties_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobProperties
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobTier_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobTier
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setContainerAcl
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setContainerAcl_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setContainerMetadata
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setContainerMetadata_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setPageBlobSequenceNumber
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setPageBlobSequenceNumber_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setServiceProperties_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.setServiceProperties
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.singleBlobPutThresholdInBytes
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.SpeedSummary
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.startCopyBlob
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.startCopyBlob_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.undeleteBlob
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.undeleteBlob_1
      - >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.withFilter
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: >-
        azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.abortCopyBlob_1
    name: abortCopyBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: Abort a blob copy operation.
    syntax:
      content: >-
        function abortCopyBlob(container: string, blob: string, copyId: string,
        callback: ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: copyId
          type:
            - string
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.abortCopyBlob
    name: abortCopyBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: Abort a blob copy operation.
    syntax:
      content: >-
        function abortCopyBlob(container: string, blob: string, copyId: string,
        options: BlobRequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: The destination container name.
        - id: blob
          type:
            - string
          description: The destination blob name.
        - id: copyId
          type:
            - string
          description: The copy operation identifier.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: |
            `error` will contain information.
                                                                                  `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.acquireLease_1
    name: acquireLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Acquires a new lease. If container and blob are specified, acquires a blob
      lease. Otherwise, if only container is specified and blob is null,
      acquires a container lease.
    syntax:
      content: >-
        function acquireLease(container: string, blob: string, options:
        AcquireLeaseRequestOptions, callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.AcquireLeaseRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.acquireLease
    name: acquireLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Acquires a new lease. If container and blob are specified, acquires a blob
      lease. Otherwise, if only container is specified and blob is null,
      acquires a container lease.
    syntax:
      content: >-
        function acquireLease(container: string, blob: string, callback:
        ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendBlockFromStream
    name: appendBlockFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new block from a read stream to be appended to an append blob.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    syntax:
      content: >-
        function appendBlockFromStream(container: string, blob: string,
        readStream: stream.Readable, streamLength: number, options:
        AppendBlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: readStream
          type:
            - stream.Readable
          description: The Node.js Readable stream.
        - id: streamLength
          type:
            - number
          description: The stream length.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.AppendBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will contain
                                                                                  information about the blob.
                                                                                  `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendBlockFromStream_1
    name: appendBlockFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new block from a read stream to be appended to an append blob.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    syntax:
      content: >-
        function appendBlockFromStream(container: string, blob: string,
        readStream: stream.Readable, streamLength: number, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: readStream
          type:
            - stream.Readable
          description: ''
        - id: streamLength
          type:
            - number
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendBlockFromText
    name: appendBlockFromText
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new block from a text to be appended to an append blob.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    syntax:
      content: >-
        function appendBlockFromText(container: string, blob: string, content:
        string | Buffer, options: AppendBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: content
          type:
            - string | Buffer
          description: 'The block text, as a string or in a Buffer.'
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.AppendBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will contain
                                                                                  information about the blob.
                                                                                  `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendBlockFromText_1
    name: appendBlockFromText
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new block from a text to be appended to an append blob.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    syntax:
      content: >-
        function appendBlockFromText(container: string, blob: string, content:
        string | Buffer, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: content
          type:
            - string | Buffer
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromBrowserFile_1
    name: appendFromBrowserFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Appends to an append blob from an HTML File object. Assumes the blob
      already exists on the service.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      (Only available in the JavaScript Client Library for Browsers)
    syntax:
      content: >-
        function appendFromBrowserFile(container: string, blob: string,
        browserFile: Object, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: browserFile
          type:
            - Object
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromBrowserFile
    name: appendFromBrowserFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Appends to an append blob from an HTML File object. Assumes the blob
      already exists on the service.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      (Only available in the JavaScript Client Library for Browsers)
    syntax:
      content: >-
        function appendFromBrowserFile(container: string, blob: string,
        browserFile: Object, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: browserFile
          type:
            - Object
          description: The File object to be uploaded created by HTML File API.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                      the blob information.
                                                                                      `response` will contain information related to this operation.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromLocalFile
    name: appendFromLocalFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Appends to an append blob from a local file. Assumes the blob already
      exists on the service.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    syntax:
      content: >-
        function appendFromLocalFile(container: string, blob: string,
        localFileName: string, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: localFileName
          type:
            - string
          description: The local path to the file to be uploaded.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: The callback function.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromLocalFile_1
    name: appendFromLocalFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Appends to an append blob from a local file. Assumes the blob already
      exists on the service.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    syntax:
      content: >-
        function appendFromLocalFile(container: string, blob: string,
        localFileName: string, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: localFileName
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromStream
    name: appendFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Appends to an append blob from a stream. Assumes the blob already exists
      on the service.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    syntax:
      content: >-
        function appendFromStream(container: string, blob: string, stream:
        stream.Readable, streamLength: number, options:
        CreateBlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: stream
          type:
            - stream.Readable
          description: ''
        - id: streamLength
          type:
            - number
          description: The length of the stream to upload.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: The callback function.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromStream_1
    name: appendFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Appends to an append blob from a stream. Assumes the blob already exists
      on the service.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    syntax:
      content: >-
        function appendFromStream(container: string, blob: string, stream:
        stream.Readable, streamLength: number, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: stream
          type:
            - stream.Readable
          description: ''
        - id: streamLength
          type:
            - number
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromText
    name: appendFromText
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Appends to an append blob from a text string. Assumes the blob already
      exists on the service.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    syntax:
      content: >-
        function appendFromText(container: string, blob: string, text: string,
        options: CreateBlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: text
          type:
            - string
          description: 'The blob text, as a string or in a Buffer.'
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      information about the blob.
                                                                                      `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromText_1
    name: appendFromText
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Appends to an append blob from a text string. Assumes the blob already
      exists on the service.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    syntax:
      content: >-
        function appendFromText(container: string, blob: string, text: string,
        callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: text
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.constructor
    name: BlobService
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates a new BlobService object.

      If no connection string or storageaccount and storageaccesskey are
      provided,

      the AZURE_STORAGE_CONNECTION_STRING or AZURE_STORAGE_ACCOUNT and
      AZURE_STORAGE_ACCESS_KEY environment variables will be used.
    syntax:
      content: >-
        new BlobService(storageAccountOrConnectionString: string,
        storageAccessKey?: string, host?: string | StorageHost, sasToken?:
        string, endpointSuffix?: string)
      parameters:
        - id: storageAccountOrConnectionString
          type:
            - string
          description: ''
        - id: storageAccessKey
          type:
            - string
          description: ''
          optional: true
        - id: host
          type:
            - string | azure-storage.azurestorage.StorageHost
          description: ''
          optional: true
        - id: sasToken
          type:
            - string
          description: ''
          optional: true
        - id: endpointSuffix
          type:
            - string
          description: ''
          optional: true
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobToText
    name: BlobToText
    fullName: BlobToText
    children: []
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.breakLease
    name: breakLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Breaks the lease but ensures that another client cannot acquire a new
      lease until the current lease period has expired. If container and blob
      are specified, breaks the blob lease.

      Otherwise, if only container is specified and blob is null, breaks the
      container lease.
    syntax:
      content: >-
        function breakLease(container: string, blob: string, callback:
        ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.breakLease_1
    name: breakLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Breaks the lease but ensures that another client cannot acquire a new
      lease until the current lease period has expired. If container and blob
      are specified, breaks the blob lease.

      Otherwise, if only container is specified and blob is null, breaks the
      container lease.
    syntax:
      content: >-
        function breakLease(container: string, blob: string, options:
        BreakLeaseRequestOptions, callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BreakLeaseRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.changeLease
    name: changeLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Changes the lease ID of an active lease. If container and blob are
      specified, changes the blob lease. Otherwise, if only container is
      specified and blob is null, changes the

      container lease.
    syntax:
      content: >-
        function changeLease(container: string, blob: string, leaseId: string,
        proposedLeaseId: string, callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: leaseId
          type:
            - string
          description: The current lease identifier.
        - id: proposedLeaseId
          type:
            - string
          description: The proposed lease identifier. Must be a GUID.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult>
          description: |
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain  the lease information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.changeLease_1
    name: changeLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Changes the lease ID of an active lease. If container and blob are
      specified, changes the blob lease. Otherwise, if only container is
      specified and blob is null, changes the

      container lease.
    syntax:
      content: >-
        function changeLease(container: string, blob: string, leaseId: string,
        proposedLeaseId: string, options: LeaseRequestOptions, callback:
        ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: leaseId
          type:
            - string
          description: The current lease identifier.
        - id: proposedLeaseId
          type:
            - string
          description: The proposed lease identifier. Must be a GUID.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult>
          description: |
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain  the lease information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.clearPageRange_1
    name: clearPageRange
    children: []
    type: method
    langs:
      - typeScript
    summary: Clears a range of pages.
    syntax:
      content: >-
        function clearPageRange(container: string, blob: string, rangeStart:
        number, rangeEnd: number, callback: ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: rangeStart
          type:
            - number
          description: ''
        - id: rangeEnd
          type:
            - number
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.clearPageRange
    name: clearPageRange
    children: []
    type: method
    langs:
      - typeScript
    summary: Clears a range of pages.
    syntax:
      content: >-
        function clearPageRange(container: string, blob: string, rangeStart:
        number, rangeEnd: number, options: BlobRequestOptions, callback:
        ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: rangeStart
          type:
            - number
          description: The range start.
        - id: rangeEnd
          type:
            - number
          description: The range end.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.commitBlocks
    name: commitBlocks
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Writes a blob by specifying the list of block IDs that make up the blob.

      In order to be written as part of a blob, a block must have been
      successfully written to the server in a prior

      createBlock operation.

      Note: If no valid list is specified in the blockList parameter, blob would
      be updated with empty content,

      i.e. existing blocks in the blob will be removed, this behavior is kept
      for backward compatibility consideration.
    syntax:
      content: >-
        function commitBlocks(container: string, blob: string, blockList:
        PutBlockListRequest, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: blockList
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.PutBlockListRequest
          description: >-
            The wrapper for block ID list contains block IDs that make up the
            blob.
                                                                                      Three kinds of list are provided, please choose one to use according to requirement.
                                                                                      For more background knowledge, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-list
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      the blocklist information.
                                                                                      `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.commitBlocks_1
    name: commitBlocks
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Writes a blob by specifying the list of block IDs that make up the blob.

      In order to be written as part of a blob, a block must have been
      successfully written to the server in a prior

      createBlock operation.

      Note: If no valid list is specified in the blockList parameter, blob would
      be updated with empty content,

      i.e. existing blocks in the blob will be removed, this behavior is kept
      for backward compatibility consideration.
    syntax:
      content: >-
        function commitBlocks(container: string, blob: string, blockList:
        PutBlockListRequest, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: blockList
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.PutBlockListRequest
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromBrowserFile_1
    name: createAppendBlobFromBrowserFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new append blob from an HTML File object. If the blob already
      exists on the service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      If you want to append data to an already existing blob, please look at
      appendFromBrowserFile.

      (Only available in the JavaScript Client Library for Browsers)
    syntax:
      content: >-
        function createAppendBlobFromBrowserFile(container: string, blob:
        string, browserFile: Object, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: browserFile
          type:
            - Object
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromBrowserFile
    name: createAppendBlobFromBrowserFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new append blob from an HTML File object. If the blob already
      exists on the service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      If you want to append data to an already existing blob, please look at
      appendFromBrowserFile.

      (Only available in the JavaScript Client Library for Browsers)
    syntax:
      content: >-
        function createAppendBlobFromBrowserFile(container: string, blob:
        string, browserFile: Object, options: CreateBlobRequestOptions,
        callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: browserFile
          type:
            - Object
          description: The File object to be uploaded created by HTML File API.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                      the blob information.
                                                                                      `response` will contain information related to this operation.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromLocalFile
    name: createAppendBlobFromLocalFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new append blob from a local file. If the blob already exists on
      the service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      If you want to append data to an already existing blob, please look at
      appendFromLocalFile.
    syntax:
      content: >-
        function createAppendBlobFromLocalFile(container: string, blob: string,
        localFileName: string, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: localFileName
          type:
            - string
          description: The local path to the file to be uploaded.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: The callback function.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromLocalFile_1
    name: createAppendBlobFromLocalFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new append blob from a local file. If the blob already exists on
      the service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      If you want to append data to an already existing blob, please look at
      appendFromLocalFile.
    syntax:
      content: >-
        function createAppendBlobFromLocalFile(container: string, blob: string,
        localFileName: string, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: localFileName
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromStream
    name: createAppendBlobFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Uploads an append blob from a stream. If the blob already exists on the
      service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      If you want to append data to an already existing blob, please look at
      appendFromStream.
    syntax:
      content: >-
        function createAppendBlobFromStream(container: string, blob: string,
        stream: stream.Readable, streamLength: number, options:
        CreateBlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: stream
          type:
            - stream.Readable
          description: ''
        - id: streamLength
          type:
            - number
          description: The length of the stream to upload.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: The callback function.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromStream_1
    name: createAppendBlobFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Uploads an append blob from a stream. If the blob already exists on the
      service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      If you want to append data to an already existing blob, please look at
      appendFromStream.
    syntax:
      content: >-
        function createAppendBlobFromStream(container: string, blob: string,
        stream: stream.Readable, streamLength: number, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: stream
          type:
            - stream.Readable
          description: ''
        - id: streamLength
          type:
            - number
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromText_1
    name: createAppendBlobFromText
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Uploads an append blob from a text string. If the blob already exists on
      the service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      If you want to append data to an already existing blob, please look at
      appendFromText.
    syntax:
      content: >-
        function createAppendBlobFromText(container: string, blob: string, text:
        string | Buffer, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: text
          type:
            - string | Buffer
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromText
    name: createAppendBlobFromText
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Uploads an append blob from a text string. If the blob already exists on
      the service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      If you want to append data to an already existing blob, please look at
      appendFromText.
    syntax:
      content: >-
        function createAppendBlobFromText(container: string, blob: string, text:
        string | Buffer, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: text
          type:
            - string | Buffer
          description: 'The blob text, as a string or in a Buffer.'
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      information about the blob.
                                                                                      `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlobSnapshot_1
    name: createBlobSnapshot
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a read-only snapshot of a blob.
    syntax:
      content: >-
        function createBlobSnapshot(container: string, blob: string, callback:
        ErrorOrResult<string>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResult<string>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlobSnapshot
    name: createBlobSnapshot
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a read-only snapshot of a blob.
    syntax:
      content: >-
        function createBlobSnapshot(container: string, blob: string, options:
        BlobRequestOptions, callback: ErrorOrResult<string>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResult<string>
          description: |
            `error` will contain information
                                                                              if an error occurs; otherwise `result` will contain
                                                                              the ID of the snapshot.
                                                                              `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromBrowserFile_1
    name: createBlockBlobFromBrowserFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new block blob. If the blob already exists on the service, it
      will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      (Only available in the JavaScript Client Library for Browsers)
    syntax:
      content: >-
        function createBlockBlobFromBrowserFile(container: string, blob: string,
        browserFile: Object, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: browserFile
          type:
            - Object
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromBrowserFile
    name: createBlockBlobFromBrowserFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new block blob. If the blob already exists on the service, it
      will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      (Only available in the JavaScript Client Library for Browsers)
    syntax:
      content: >-
        function createBlockBlobFromBrowserFile(container: string, blob: string,
        browserFile: Object, options: CreateBlockBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: browserFile
          type:
            - Object
          description: The File object to be uploaded created by HTML File API.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                      the blob information.
                                                                                      `response` will contain information related to this operation.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromLocalFile
    name: createBlockBlobFromLocalFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new block blob or updates the content of an existing block blob.

      Updating an existing block blob overwrites any existing metadata on the
      blob.

      Partial updates are not supported with Put Blob; The content of the
      existing blob is overwritten with the content of the new blob.

      To perform a partial update of the content of a block blob, use the Put
      Block List operation.

      Calling Put Blob to create a page blob only initializes the blob. To add
      content to a page blob, call the Put Page operation.
    syntax:
      content: >-
        function createBlockBlobFromLocalFile(container: string, blob: string,
        localFileName: string, options: CreateBlockBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: localFileName
          type:
            - string
          description: The local path to the file to be uploaded.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information
                                                                                        if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                        the blob information.
                                                                                        `response` will contain information related to this operation.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromLocalFile_1
    name: createBlockBlobFromLocalFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new block blob or updates the content of an existing block blob.

      Updating an existing block blob overwrites any existing metadata on the
      blob.

      Partial updates are not supported with Put Blob; The content of the
      existing blob is overwritten with the content of the new blob.

      To perform a partial update of the content of a block blob, use the Put
      Block List operation.

      Calling Put Blob to create a page blob only initializes the blob. To add
      content to a page blob, call the Put Page operation.
    syntax:
      content: >-
        function createBlockBlobFromLocalFile(container: string, blob: string,
        localFileName: string, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: localFileName
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromStream
    name: createBlockBlobFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: Uploads a block blob from a stream.
    syntax:
      content: >-
        function createBlockBlobFromStream(container: string, blob: string,
        stream: stream.Readable, streamLength: number, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: stream
          type:
            - stream.Readable
          description: ''
        - id: streamLength
          type:
            - number
          description: The length of the stream to upload.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: The callback function.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromStream_1
    name: createBlockBlobFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: Uploads a block blob from a stream.
    syntax:
      content: >-
        function createBlockBlobFromStream(container: string, blob: string,
        stream: stream.Readable, streamLength: number, options:
        CreateBlockBlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: stream
          type:
            - stream.Readable
          description: ''
        - id: streamLength
          type:
            - number
          description: The length of the stream to upload.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: The callback function.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromText
    name: createBlockBlobFromText
    children: []
    type: method
    langs:
      - typeScript
    summary: Uploads a block blob from a text string.
    syntax:
      content: >-
        function createBlockBlobFromText(container: string, blob: string, text:
        string | Buffer, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: text
          type:
            - string | Buffer
          description: 'The blob text, as a string or in a Buffer.'
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                        if an error occurs; otherwise `result` will contain
                                                                                        information about the blob.
                                                                                        `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromText_1
    name: createBlockBlobFromText
    children: []
    type: method
    langs:
      - typeScript
    summary: Uploads a block blob from a text string.
    syntax:
      content: >-
        function createBlockBlobFromText(container: string, blob: string, text:
        string | Buffer, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: text
          type:
            - string | Buffer
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromStream
    name: createBlockFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new block to be committed as part of a blob.
    syntax:
      content: >-
        function createBlockFromStream(blockId: string, container: string, blob:
        string, readStream: stream.Readable, streamLength: number, options:
        BlobRequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: blockId
          type:
            - string
          description: The block identifier.
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: readStream
          type:
            - stream.Readable
          description: The Node.js Readable stream.
        - id: streamLength
          type:
            - number
          description: The stream length.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise
                                                                                  `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromStream_1
    name: createBlockFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new block to be committed as part of a blob.
    syntax:
      content: >-
        function createBlockFromStream(blockId: string, container: string, blob:
        string, readStream: stream.Readable, streamLength: number, callback:
        ErrorOrResponse)
      parameters:
        - id: blockId
          type:
            - string
          description: ''
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: readStream
          type:
            - stream.Readable
          description: ''
        - id: streamLength
          type:
            - number
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromText_1
    name: createBlockFromText
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new block to be committed as part of a blob.
    syntax:
      content: >-
        function createBlockFromText(blockId: string, container: string, blob:
        string, content: string | Buffer, callback: ErrorOrResponse)
      parameters:
        - id: blockId
          type:
            - string
          description: ''
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: content
          type:
            - string | Buffer
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromText
    name: createBlockFromText
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new block to be committed as part of a blob.
    syntax:
      content: >-
        function createBlockFromText(blockId: string, container: string, blob:
        string, content: string | Buffer, options: BlobRequestOptions, callback:
        ErrorOrResponse)
      parameters:
        - id: blockId
          type:
            - string
          description: The block identifier.
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: content
          type:
            - string | Buffer
          description: The block content.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise
                                                                                  `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromURL
    name: createBlockFromURL
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new block to be committed as part of a blob from an URL of an
      Azure blob or file.
    syntax:
      content: >-
        function createBlockFromURL(blockId: string, container: string, blob:
        string, sourceURL: string, sourceRangeStart: number, sourceRangeEnd:
        number, options: CreateBlockRequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: blockId
          type:
            - string
          description: The block identifier.
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: sourceURL
          type:
            - string
          description: |-
            The URL of the source data.
                                                                                  It can point to any Azure Blob or File, that is either public or has a shared access signature attached.
        - id: sourceRangeStart
          type:
            - number
          description: >-
            The start of the range of bytes(inclusive) that has to be taken from
            the copy source.
        - id: sourceRangeEnd
          type:
            - number
          description: >-
            The end of the range of bytes(inclusive) that has to be taken from
            the copy source.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockRequestOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise
                                                                                  `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromURL_1
    name: createBlockFromURL
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new block to be committed as part of a blob from an URL of an
      Azure blob or file.
    syntax:
      content: >-
        function createBlockFromURL(blockId: string, container: string, blob:
        string, sourceURL: string, sourceRangeStart: number, sourceRangeEnd:
        number, callback: ErrorOrResponse)
      parameters:
        - id: blockId
          type:
            - string
          description: ''
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: sourceURL
          type:
            - string
          description: ''
        - id: sourceRangeStart
          type:
            - number
          description: ''
        - id: sourceRangeEnd
          type:
            - number
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createContainer
    name: createContainer
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a new container under the specified account.
      If a container with the same name already exists, the operation fails.
    syntax:
      content: >-
        function createContainer(container: string, callback:
        ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult>
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            the container information.
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createContainer_1
    name: createContainer
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a new container under the specified account.
      If a container with the same name already exists, the operation fails.
    syntax:
      content: >-
        function createContainer(container: string, options:
        CreateContainerOptions, callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateContainerOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult>
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            the container information.
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createContainerIfNotExists_1
    name: createContainerIfNotExists
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new container under the specified account if the container does
      not exists.
    syntax:
      content: >-
        function createContainerIfNotExists(container: string, options:
        CreateContainerOptions, callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateContainerOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult>
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will
                                                                                  be true if the container was created, or false if the container
                                                                                  already exists.
                                                                                  `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createContainerIfNotExists
    name: createContainerIfNotExists
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new container under the specified account if the container does
      not exists.
    syntax:
      content: >-
        function createContainerIfNotExists(container: string, callback:
        ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult>
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will
                                                                                  be true if the container was created, or false if the container
                                                                                  already exists.
                                                                                  `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createOrReplaceAppendBlob_1
    name: createOrReplaceAppendBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an empty append blob. If the blob already exists on the service,
      it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.
    syntax:
      content: >-
        function createOrReplaceAppendBlob(container: string, blob: string,
        callback: ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createOrReplaceAppendBlob
    name: createOrReplaceAppendBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an empty append blob. If the blob already exists on the service,
      it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.
    syntax:
      content: >-
        function createOrReplaceAppendBlob(container: string, blob: string,
        options: CreateBlobRequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: |
            `error` will contain information
                                                                                      if an error occurs; otherwise
                                                                                      `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlob
    name: createPageBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createPageBlob(container: string, blob: string, length: number,
        callback: ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: length
          type:
            - number
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlob_1
    name: createPageBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createPageBlob(container: string, blob: string, length: number,
        options: CreatePageBlobOptions, callback: ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: length
          type:
            - number
          description: ''
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromBrowserFile_1
    name: createPageBlobFromBrowserFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Uploads a page blob from an HTML file. If the blob already exists on the
      service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      (Only available in the JavaScript Client Library for Browsers)
    syntax:
      content: >-
        function createPageBlobFromBrowserFile(container: string, blob: string,
        browserFile: Object, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: browserFile
          type:
            - Object
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromBrowserFile
    name: createPageBlobFromBrowserFile
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Uploads a page blob from an HTML file. If the blob already exists on the
      service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      (Only available in the JavaScript Client Library for Browsers)
    syntax:
      content: >-
        function createPageBlobFromBrowserFile(container: string, blob: string,
        browserFile: Object, options: CreatePageBlobOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: browserFile
          type:
            - Object
          description: The File object to be uploaded created by HTML File API.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information
                                                                                            if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                            the blob information.
                                                                                            `response` will contain information related to this operation.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromLocalFile
    name: createPageBlobFromLocalFile
    children: []
    type: method
    langs:
      - typeScript
    summary: Uploads a page blob from file.
    syntax:
      content: >-
        function createPageBlobFromLocalFile(container: string, blob: string,
        localFileName: string, options: CreatePageBlobOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: localFileName
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: The callback function.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromLocalFile_1
    name: createPageBlobFromLocalFile
    children: []
    type: method
    langs:
      - typeScript
    summary: Uploads a page blob from file.
    syntax:
      content: >-
        function createPageBlobFromLocalFile(container: string, blob: string,
        localFileName: string, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: localFileName
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromStream_1
    name: createPageBlobFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: Uploads a page blob from a stream.
    syntax:
      content: >-
        function createPageBlobFromStream(container: string, blob: string,
        stream: stream.Readable, streamLength: number, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: stream
          type:
            - stream.Readable
          description: ''
        - id: streamLength
          type:
            - number
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromStream
    name: createPageBlobFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: Uploads a page blob from a stream.
    syntax:
      content: >-
        function createPageBlobFromStream(container: string, blob: string,
        stream: stream.Readable, streamLength: number, options:
        CreatePageBlobOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: stream
          type:
            - stream.Readable
          description: ''
        - id: streamLength
          type:
            - number
          description: The length of the stream to upload.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: The callback function.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPagesFromStream_1
    name: createPagesFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates a page blob from a stream.
    syntax:
      content: >-
        function createPagesFromStream(container: string, blob: string,
        readStream: stream.Readable, rangeStart: number, rangeEnd: number,
        callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: readStream
          type:
            - stream.Readable
          description: ''
        - id: rangeStart
          type:
            - number
          description: ''
        - id: rangeEnd
          type:
            - number
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPagesFromStream
    name: createPagesFromStream
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates a page blob from a stream.
    syntax:
      content: >-
        function createPagesFromStream(container: string, blob: string,
        readStream: stream.Readable, rangeStart: number, rangeEnd: number,
        options: BlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: readStream
          type:
            - stream.Readable
          description: The Node.js Readable stream.
        - id: rangeStart
          type:
            - number
          description: The range start.
        - id: rangeEnd
          type:
            - number
          description: The range end.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the blob information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createReadStream
    name: createReadStream
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides a stream to read from a blob.
    syntax:
      content: >-
        function createReadStream(container: string, blob: string, options:
        GetBlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain the blob information.
                                                                                    `response` will contain information related to this operation.
      return:
        type:
          - stream.Readable
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createReadStream_1
    name: createReadStream
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides a stream to read from a blob.
    syntax:
      content: >-
        function createReadStream(container: string, blob: string, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - stream.Readable
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToBlockBlob_1
    name: createWriteStreamToBlockBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Provides a stream to write to a block blob.
      Please note the `Stream` returned by this API should be used with piping.
    syntax:
      content: >-
        function createWriteStreamToBlockBlob(container: string, blob: string,
        callback?: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
          optional: true
      return:
        type:
          - stream.Writable
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToBlockBlob
    name: createWriteStreamToBlockBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Provides a stream to write to a block blob.
      Please note the `Stream` returned by this API should be used with piping.
    syntax:
      content: >-
        function createWriteStreamToBlockBlob(container: string, blob: string,
        options: CreateBlockBlobRequestOptions, callback?:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information
                                                                                        if an error occurs; otherwise `result` will contain
                                                                                        information about the blob.
                                                                                        `response` will contain information related to this operation.
          optional: true
      return:
        type:
          - stream.Writable
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToExistingAppendBlob
    name: createWriteStreamToExistingAppendBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides a stream to write to an existing append blob. Assumes that the
      blob exists.

      If it does not, please create the blob using createAppendBlob before
      calling this method or use createWriteStreamToNewAppendBlob.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      Please note the `Stream` returned by this API should be used with piping.
    syntax:
      content: >-
        function createWriteStreamToExistingAppendBlob(container: string, blob:
        string, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      information about the blob.
                                                                                      `response` will contain information related to this operation.
      return:
        type:
          - stream.Writable
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToExistingAppendBlob_1
    name: createWriteStreamToExistingAppendBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides a stream to write to an existing append blob. Assumes that the
      blob exists.

      If it does not, please create the blob using createAppendBlob before
      calling this method or use createWriteStreamToNewAppendBlob.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      Please note the `Stream` returned by this API should be used with piping.
    syntax:
      content: >-
        function createWriteStreamToExistingAppendBlob(container: string, blob:
        string, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - stream.Writable
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToExistingPageBlob
    name: createWriteStreamToExistingPageBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides a stream to write to a page blob. Assumes that the blob exists.

      If it does not, please create the blob using createPageBlob before calling
      this method or use createWriteStreamNewPageBlob.

      Please note the `Stream` returned by this API should be used with piping.
    syntax:
      content: >-
        function createWriteStreamToExistingPageBlob(container: string, blob:
        string, options: CreatePageBlobOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information
                                                                                        if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                        the blob information.
                                                                                        `response` will contain information related to this operation.
      return:
        type:
          - stream.Writable
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToExistingPageBlob_1
    name: createWriteStreamToExistingPageBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides a stream to write to a page blob. Assumes that the blob exists.

      If it does not, please create the blob using createPageBlob before calling
      this method or use createWriteStreamNewPageBlob.

      Please note the `Stream` returned by this API should be used with piping.
    syntax:
      content: >-
        function createWriteStreamToExistingPageBlob(container: string, blob:
        string, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - stream.Writable
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToNewAppendBlob
    name: createWriteStreamToNewAppendBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides a stream to write to a new append blob. If the blob already
      exists on the service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      Please note the `Stream` returned by this API should be used with piping.
    syntax:
      content: >-
        function createWriteStreamToNewAppendBlob(container: string, blob:
        string, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      information about the blob.
                                                                                      `response` will contain information related to this operation.
      return:
        type:
          - stream.Writable
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToNewAppendBlob_1
    name: createWriteStreamToNewAppendBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides a stream to write to a new append blob. If the blob already
      exists on the service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      Please note the `Stream` returned by this API should be used with piping.
    syntax:
      content: >-
        function createWriteStreamToNewAppendBlob(container: string, blob:
        string, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - stream.Writable
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToNewPageBlob_1
    name: createWriteStreamToNewPageBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides a stream to write to a page blob. Creates the blob before writing
      data.

      Please note the `Stream` returned by this API should be used with piping.
    syntax:
      content: >-
        function createWriteStreamToNewPageBlob(container: string, blob: string,
        length: number, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: length
          type:
            - number
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - stream.Writable
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToNewPageBlob
    name: createWriteStreamToNewPageBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides a stream to write to a page blob. Creates the blob before writing
      data.

      Please note the `Stream` returned by this API should be used with piping.
    syntax:
      content: >-
        function createWriteStreamToNewPageBlob(container: string, blob: string,
        length: number, options: CreatePageBlobOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: length
          type:
            - number
          description: The blob length.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information
                                                                                        if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                        the blob information.
                                                                                        `response` will contain information related to this operation.
      return:
        type:
          - stream.Writable
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.defaultEnableReuseSocket
    name: defaultEnableReuseSocket
    fullName: defaultEnableReuseSocket
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'defaultEnableReuseSocket: boolean'
      return:
        type:
          - boolean
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteBlob
    name: deleteBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Marks the specified blob or snapshot for deletion. The blob is later
      deleted during garbage collection.

      If a blob has snapshots, you must delete them when deleting the blob.
      Using the deleteSnapshots option, you can choose either to delete both the
      blob and its snapshots,

      or to delete only the snapshots but not the blob itself. If the blob has
      snapshots, you must include the deleteSnapshots option or the blob service
      will return an error

      and nothing will be deleted.

      If you are deleting a specific snapshot using the snapshotId option, the
      deleteSnapshots option must NOT be included.
    syntax:
      content: >-
        function deleteBlob(container: string, blob: string, callback:
        ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: |
            `error` will contain information
                                                                                    if an error occurs; `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteBlob_1
    name: deleteBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Marks the specified blob or snapshot for deletion. The blob is later
      deleted during garbage collection.

      If a blob has snapshots, you must delete them when deleting the blob.
      Using the deleteSnapshots option, you can choose either to delete both the
      blob and its snapshots,

      or to delete only the snapshots but not the blob itself. If the blob has
      snapshots, you must include the deleteSnapshots option or the blob service
      will return an error

      and nothing will be deleted.

      If you are deleting a specific snapshot using the snapshotId option, the
      deleteSnapshots option must NOT be included.
    syntax:
      content: >-
        function deleteBlob(container: string, blob: string, options:
        DeleteBlobRequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.DeleteBlobRequestOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: |
            `error` will contain information
                                                                                    if an error occurs; `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteBlobIfExists
    name: deleteBlobIfExists
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Marks the specified blob or snapshot for deletion if it exists. The blob
      is later deleted during garbage collection.

      If a blob has snapshots, you must delete them when deleting the blob.
      Using the deleteSnapshots option, you can choose either to delete both the
      blob and its snapshots,

      or to delete only the snapshots but not the blob itself. If the blob has
      snapshots, you must include the deleteSnapshots option or the blob service
      will return an error

      and nothing will be deleted.

      If you are deleting a specific snapshot using the snapshotId option, the
      deleteSnapshots option must NOT be included.
    syntax:
      content: >-
        function deleteBlobIfExists(container: string, blob: string, callback:
        ErrorOrResult<boolean>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResult<boolean>
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will
                                                                            be true if the blob was deleted, or false if the blob
                                                                            does not exist.
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteBlobIfExists_1
    name: deleteBlobIfExists
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Marks the specified blob or snapshot for deletion if it exists. The blob
      is later deleted during garbage collection.

      If a blob has snapshots, you must delete them when deleting the blob.
      Using the deleteSnapshots option, you can choose either to delete both the
      blob and its snapshots,

      or to delete only the snapshots but not the blob itself. If the blob has
      snapshots, you must include the deleteSnapshots option or the blob service
      will return an error

      and nothing will be deleted.

      If you are deleting a specific snapshot using the snapshotId option, the
      deleteSnapshots option must NOT be included.
    syntax:
      content: >-
        function deleteBlobIfExists(container: string, blob: string, options:
        DeleteBlobRequestOptions, callback: ErrorOrResult<boolean>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.DeleteBlobRequestOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResult<boolean>
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will
                                                                            be true if the blob was deleted, or false if the blob
                                                                            does not exist.
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteContainer
    name: deleteContainer
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Marks the specified container for deletion.

      The container and any blobs contained within it are later deleted during
      garbage collection.
    syntax:
      content: 'function deleteContainer(container: string, callback: ErrorOrResponse)'
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteContainer_1
    name: deleteContainer
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Marks the specified container for deletion.

      The container and any blobs contained within it are later deleted during
      garbage collection.
    syntax:
      content: >-
        function deleteContainer(container: string, options: ContainerOptions,
        callback: ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteContainerIfExists_1
    name: deleteContainerIfExists
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Marks the specified container for deletion if it exists.

      The container and any blobs contained within it are later deleted during
      garbage collection.
    syntax:
      content: >-
        function deleteContainerIfExists(container: string, options:
        ContainerOptions, callback: ErrorOrResult<boolean>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResult<boolean>
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will
                                                                            be true if the container exists and was deleted, or false if the container
                                                                            did not exist.
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteContainerIfExists
    name: deleteContainerIfExists
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Marks the specified container for deletion if it exists.

      The container and any blobs contained within it are later deleted during
      garbage collection.
    syntax:
      content: >-
        function deleteContainerIfExists(container: string, callback:
        ErrorOrResult<boolean>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResult<boolean>
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will
                                                                            be true if the container exists and was deleted, or false if the container
                                                                            did not exist.
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.doesBlobExist_1
    name: doesBlobExist
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks whether or not a blob exists on the service.
    syntax:
      content: >-
        function doesBlobExist(container: string, blob: string, options:
        BlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                if an error occurs; otherwise `errorOrResult` will
                                                                                be true if the blob exists, or false if the blob does not exist.
                                                                                `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.doesBlobExist
    name: doesBlobExist
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks whether or not a blob exists on the service.
    syntax:
      content: >-
        function doesBlobExist(container: string, blob: string, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                if an error occurs; otherwise `errorOrResult` will
                                                                                be true if the blob exists, or false if the blob does not exist.
                                                                                `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.doesContainerExist
    name: doesContainerExist
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks whether or not a container exists on the service.
    syntax:
      content: >-
        function doesContainerExist(container: string, options: RequestOptions,
        callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: options
          type:
            - azure-storage.azurestorage.common.RequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult>
          description: |
            `error` will contain information
                                                                                if an error occurs; otherwise `result` will
                                                                                be true if the container exists, or false if the container does not exist.
                                                                                `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.doesContainerExist_1
    name: doesContainerExist
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks whether or not a container exists on the service.
    syntax:
      content: >-
        function doesContainerExist(container: string, callback:
        ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult>
          description: |
            `error` will contain information
                                                                                if an error occurs; otherwise `result` will
                                                                                be true if the container exists, or false if the container does not exist.
                                                                                `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.generateBlockIdPrefix
    name: generateBlockIdPrefix
    children: []
    type: method
    langs:
      - typeScript
    summary: Generate a random block id prefix
    syntax:
      content: function generateBlockIdPrefix()
      parameters: []
      return:
        type:
          - string
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.generateSharedAccessSignature
    name: generateSharedAccessSignature
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieves a shared access signature token.
    syntax:
      content: >-
        function generateSharedAccessSignature(container: string, blob: string,
        sharedAccessPolicy: SharedAccessPolicy, headers?:
        ContentSettingsHeaders)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: ''
        - id: sharedAccessPolicy
          type:
            - azure-storage.azurestorage.common.SharedAccessPolicy
          description: The shared access policy.
        - id: headers
          type:
            - azure-storage.azurestorage.common.ContentSettingsHeaders
          description: ''
          optional: true
      return:
        type:
          - string
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.generateSharedAccessSignatureWithVersion
    name: generateSharedAccessSignatureWithVersion
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieves a shared access signature token.
    syntax:
      content: >-
        function generateSharedAccessSignatureWithVersion(container: string,
        blob: string, sharedAccessPolicy: SharedAccessPolicy, sasVersion:
        string, headers?: ContentSettingsHeaders)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: ''
        - id: sharedAccessPolicy
          type:
            - azure-storage.azurestorage.common.SharedAccessPolicy
          description: The shared access policy.
        - id: sasVersion
          type:
            - string
          description: ''
        - id: headers
          type:
            - azure-storage.azurestorage.common.ContentSettingsHeaders
          description: ''
          optional: true
      return:
        type:
          - string
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getAccountProperties
    name: getAccountProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the properties of a storage account.
    syntax:
      content: >-
        function getAccountProperties(container?: string, blob?: string,
        options?: RequestOptions, callback?: ErrorOrResult<AccountProperties>)
      parameters:
        - id: container
          type:
            - string
          description: ''
          optional: true
        - id: blob
          type:
            - string
          description: ''
          optional: true
        - id: options
          type:
            - azure-storage.azurestorage.common.RequestOptions
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.models.AccountProperties>
          description: >
            `error` will contain information if an error occurs; otherwise,
            `[result](xref:AccountProperties)` will contain the properties
                                                                          and `response` will contain information related to this operation.
          optional: true
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getAccountProperties_1
    name: getAccountProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the properties of a storage account.
    syntax:
      content: >-
        function getAccountProperties(container?: string, blob?: string,
        callback?: ErrorOrResult<AccountProperties>)
      parameters:
        - id: container
          type:
            - string
          description: ''
          optional: true
        - id: blob
          type:
            - string
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.models.AccountProperties>
          description: ''
          optional: true
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobMetadata
    name: getBlobMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns all user-defined metadata for the specified blob or snapshot.
      It does not modify or return the content of the blob.
    syntax:
      content: >-
        function getBlobMetadata(container: string, blob: string, options:
        BlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the blob.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobMetadata_1
    name: getBlobMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns all user-defined metadata for the specified blob or snapshot.
      It does not modify or return the content of the blob.
    syntax:
      content: >-
        function getBlobMetadata(container: string, blob: string, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobProperties
    name: getBlobProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties for the blob.

      It does not return or modify the content of the blob.
    syntax:
      content: >-
        function getBlobProperties(container: string, blob: string, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the blob.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobProperties_1
    name: getBlobProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties for the blob.

      It does not return or modify the content of the blob.
    syntax:
      content: >-
        function getBlobProperties(container: string, blob: string,
        optionsOrCallback: BlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: optionsOrCallback
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the blob.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToLocalFile_1
    name: getBlobToLocalFile
    children: []
    type: method
    langs:
      - typeScript
    summary: Downloads a blob into a file.
    syntax:
      content: >-
        function getBlobToLocalFile(container: string, blob: string,
        localFileName: string, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: localFileName
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToLocalFile
    name: getBlobToLocalFile
    children: []
    type: method
    langs:
      - typeScript
    summary: Downloads a blob into a file.
    syntax:
      content: >-
        function getBlobToLocalFile(container: string, blob: string,
        localFileName: string, options: GetBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: localFileName
          type:
            - string
          description: The local path to the file to be downloaded.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain the blob information.
                                                                                    `response` will contain information related to this operation.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToStream_1
    name: getBlobToStream
    children: []
    type: method
    langs:
      - typeScript
    summary: Downloads a blob into a stream.
    syntax:
      content: >-
        function getBlobToStream(container: string, blob: string, writeStream:
        stream.Writable, options: GetBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: writeStream
          type:
            - stream.Writable
          description: The Node.js Writable stream.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain the blob information.
                                                                                    `response` will contain information related to this operation.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToStream
    name: getBlobToStream
    children: []
    type: method
    langs:
      - typeScript
    summary: Downloads a blob into a stream.
    syntax:
      content: >-
        function getBlobToStream(container: string, blob: string, writeStream:
        stream.Writable, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: writeStream
          type:
            - stream.Writable
          description: The Node.js Writable stream.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |-
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain the blob information.
                                                                                    `response` will contain information related to this operation.
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToText_1
    name: getBlobToText
    children: []
    type: method
    langs:
      - typeScript
    summary: Downloads a blob into a text string.
    syntax:
      content: >-
        function getBlobToText(container: string, blob: string, callback:
        BlobToText)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobToText
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToText
    name: getBlobToText
    children: []
    type: method
    langs:
      - typeScript
    summary: Downloads a blob into a text string.
    syntax:
      content: >-
        function getBlobToText(container: string, blob: string, options:
        GetBlobRequestOptions, callback: BlobToText)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobToText
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `text` will contain the blob contents,
                                                                                    and `blockBlob` will contain
                                                                                    the blob information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlockId
    name: getBlockId
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a block id according to prefix and block number
    syntax:
      content: 'function getBlockId(prefix: string, number: number | string)'
      parameters:
        - id: prefix
          type:
            - string
          description: ''
        - id: number
          type:
            - number | string
          description: ''
      return:
        type:
          - string
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerAcl
    name: getContainerAcl
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the container's ACL.
    syntax:
      content: >-
        function getContainerAcl(container: string, callback:
        ErrorOrResult<ContainerAclResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclResult>
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            information for the container.
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerAcl_1
    name: getContainerAcl
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the container's ACL.
    syntax:
      content: >-
        function getContainerAcl(container: string, options: ContainerOptions,
        callback: ErrorOrResult<ContainerAclResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclResult>
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            information for the container.
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerMetadata
    name: getContainerMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns all user-defined metadata for the container.
    syntax:
      content: >-
        function getContainerMetadata(container: string, callback:
        ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult>
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will contain
                                                                                  information for the container.
                                                                                  `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerMetadata_1
    name: getContainerMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns all user-defined metadata for the container.
    syntax:
      content: >-
        function getContainerMetadata(container: string, options:
        ContainerOptions, callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult>
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will contain
                                                                                  information for the container.
                                                                                  `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerProperties
    name: getContainerProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieves a container and its properties from a specified account.
    syntax:
      content: >-
        function getContainerProperties(container: string, callback:
        ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult>
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            information for the container.
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerProperties_1
    name: getContainerProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieves a container and its properties from a specified account.
    syntax:
      content: >-
        function getContainerProperties(container: string, options:
        ContainerOptions, callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult>
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            information for the container.
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getPageRangesDiff_1
    name: getPageRangesDiff
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPageRangesDiff(container: string, blob: string,
        previousSnapshotTime: string, callback: ErrorOrResult<RangeDiff[]>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: previousSnapshotTime
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.RangeDiff[]>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getPageRangesDiff
    name: getPageRangesDiff
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPageRangesDiff(container: string, blob: string,
        previousSnapshotTime: string, options: GetBlobRequestOptions, callback:
        ErrorOrResult<RangeDiff[]>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: previousSnapshotTime
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.RangeDiff[]>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getServiceProperties_1
    name: getServiceProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the properties of a storage account’s Blob service, including Azure
      Storage Analytics.
    syntax:
      content: >-
        function getServiceProperties(callback?:
        ErrorOrResult<BlobServiceProperties>)
      parameters:
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.models.ServicePropertiesResult.BlobServiceProperties>
          description: ''
          optional: true
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getServiceProperties
    name: getServiceProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the properties of a storage account’s Blob service, including Azure
      Storage Analytics.
    syntax:
      content: >-
        function getServiceProperties(options: RequestOptions, callback?:
        ErrorOrResult<BlobServiceProperties>)
      parameters:
        - id: options
          type:
            - azure-storage.azurestorage.common.RequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.models.ServicePropertiesResult.BlobServiceProperties>
          description: >
            `error` will contain information if an error occurs; otherwise,
            `result` will contain the properties
                                                                          and `response` will contain information related to this operation.
          optional: true
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getServiceStats
    name: getServiceStats
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the service stats for a storage account’s Blob service.
    syntax:
      content: >-
        function getServiceStats(options: RequestOptions, callback:
        ErrorOrResult<ServiceStats>)
      parameters:
        - id: options
          type:
            - azure-storage.azurestorage.common.RequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.models.ServiceStats>
          description: >
            `error` will contain information if an error occurs; otherwise,
            `result` will contain the stats and
                                                                          `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getServiceStats_1
    name: getServiceStats
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the service stats for a storage account’s Blob service.
    syntax:
      content: 'function getServiceStats(callback: ErrorOrResult<ServiceStats>)'
      parameters:
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.models.ServiceStats>
          description: ''
    package: azure-storage
  - uid: azure-storage.azurestorage.services.blob.blobservice.BlobService.getUrl
    name: getUrl
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieves a blob or container URL.
    syntax:
      content: >-
        function getUrl(container: string, blob?: string, sasToken?: string,
        primary?: boolean, snapshotId?: string)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: ''
          optional: true
        - id: sasToken
          type:
            - string
          description: ''
          optional: true
        - id: primary
          type:
            - boolean
          description: ''
          optional: true
        - id: snapshotId
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - string
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseRequestOptions
    name: LeaseRequestOptions
    fullName: LeaseRequestOptions
    children: []
    langs:
      - typeScript
    type: interface
    summary: ''
    extends:
      name: >-
        azure-storage.azurestorage.services.blob.blobservice.BlobService.ConditionalRequestOption
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobsSegmented
    name: listBlobsSegmented
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists a segment containing a collection of blob items in the container.
    syntax:
      content: >-
        function listBlobsSegmented(container: string, currentToken:
        ContinuationToken, callback: ErrorOrResult<ListBlobsResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: currentToken
          type:
            - azure-storage.azurestorage.common.ContinuationToken
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsResult>
          description: |
            `error` will contain information
                                                                          if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                          `entries`  gives a list of blobs and the `continuationToken` is used for the next listing operation.
                                                                          `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobsSegmented_1
    name: listBlobsSegmented
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists a segment containing a collection of blob items in the container.
    syntax:
      content: >-
        function listBlobsSegmented(container: string, currentToken:
        ContinuationToken, options: ListBlobsSegmentedRequestOptions, callback:
        ErrorOrResult<ListBlobsResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: currentToken
          type:
            - azure-storage.azurestorage.common.ContinuationToken
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsSegmentedRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsResult>
          description: |
            `error` will contain information
                                                                          if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                          `entries`  gives a list of blobs and the `continuationToken` is used for the next listing operation.
                                                                          `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobsSegmentedWithPrefix_1
    name: listBlobsSegmentedWithPrefix
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists a segment containing a collection of blob items whose names begin
      with the specified prefix in the container.
    syntax:
      content: >-
        function listBlobsSegmentedWithPrefix(container: string, prefix: string,
        currentToken: ContinuationToken, options:
        ListBlobsSegmentedRequestOptions, callback:
        ErrorOrResult<ListBlobsResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: prefix
          type:
            - string
          description: The prefix of the blob name.
        - id: currentToken
          type:
            - azure-storage.azurestorage.common.ContinuationToken
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsSegmentedRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsResult>
          description: |
            `error` will contain information
                                                                          if an error occurs; otherwise `result` will contain
                                                                          the entries of blobs and the continuation token for the next listing operation.
                                                                          `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobsSegmentedWithPrefix
    name: listBlobsSegmentedWithPrefix
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists a segment containing a collection of blob items whose names begin
      with the specified prefix in the container.
    syntax:
      content: >-
        function listBlobsSegmentedWithPrefix(container: string, prefix: string,
        currentToken: ContinuationToken, callback:
        ErrorOrResult<ListBlobsResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: prefix
          type:
            - string
          description: The prefix of the blob name.
        - id: currentToken
          type:
            - azure-storage.azurestorage.common.ContinuationToken
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsResult>
          description: |
            `error` will contain information
                                                                          if an error occurs; otherwise `result` will contain
                                                                          the entries of blobs and the continuation token for the next listing operation.
                                                                          `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlocks
    name: listBlocks
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieves the list of blocks that have been uploaded as part of a block
      blob.
    syntax:
      content: >-
        function listBlocks(container: string, blob: string, blocklisttype:
        string, options: BlobRequestOptions, callback:
        ErrorOrResult<BlockListResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: blocklisttype
          type:
            - string
          description: The type of block list to retrieve.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlockListResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the blocklist information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlocks_1
    name: listBlocks
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieves the list of blocks that have been uploaded as part of a block
      blob.
    syntax:
      content: >-
        function listBlocks(container: string, blob: string, blocklisttype:
        string, callback: ErrorOrResult<BlockListResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: blocklisttype
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlockListResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listContainersSegmented
    name: listContainersSegmented
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists a segment containing a collection of container items under the
      specified account.
    syntax:
      content: >-
        function listContainersSegmented(currentToken: ContinuationToken,
        options: ListContainerOptions, callback:
        ErrorOrResult<ListContainerResult>)
      parameters:
        - id: currentToken
          type:
            - azure-storage.azurestorage.common.ContinuationToken
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                                    `entries`  gives a list of containers and the `continuationToken` is used for the next listing operation.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listContainersSegmented_1
    name: listContainersSegmented
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists a segment containing a collection of container items under the
      specified account.
    syntax:
      content: >-
        function listContainersSegmented(currentToken: ContinuationToken,
        callback: ErrorOrResult<ListContainerResult>)
      parameters:
        - id: currentToken
          type:
            - azure-storage.azurestorage.common.ContinuationToken
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listContainersSegmentedWithPrefix
    name: listContainersSegmentedWithPrefix
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists a segment containing a collection of container items whose names
      begin with the specified prefix under the specified account.
    syntax:
      content: >-
        function listContainersSegmentedWithPrefix(prefix: string, currentToken:
        ContinuationToken, options: ListContainerOptions, callback:
        ErrorOrResult<ListContainerResult>)
      parameters:
        - id: prefix
          type:
            - string
          description: The prefix of the container name.
        - id: currentToken
          type:
            - azure-storage.azurestorage.common.ContinuationToken
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                                    `entries`  gives a list of containers and the `continuationToken` is used for the next listing operation.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listContainersSegmentedWithPrefix_1
    name: listContainersSegmentedWithPrefix
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists a segment containing a collection of container items whose names
      begin with the specified prefix under the specified account.
    syntax:
      content: >-
        function listContainersSegmentedWithPrefix(prefix: string, currentToken:
        ContinuationToken, callback: ErrorOrResult<ListContainerResult>)
      parameters:
        - id: prefix
          type:
            - string
          description: ''
        - id: currentToken
          type:
            - azure-storage.azurestorage.common.ContinuationToken
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listPageRanges
    name: listPageRanges
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists page ranges. Lists all of the page ranges by default, or only the
      page ranges over a specific range of bytes if rangeStart and rangeEnd are
      specified.
    syntax:
      content: >-
        function listPageRanges(container: string, blob: string, options:
        GetBlobRequestOptions, callback: ErrorOrResult<Range[]>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.Range[]>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the page range information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listPageRanges_1
    name: listPageRanges
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists page ranges. Lists all of the page ranges by default, or only the
      page ranges over a specific range of bytes if rangeStart and rangeEnd are
      specified.
    syntax:
      content: >-
        function listPageRanges(container: string, blob: string, callback:
        ErrorOrResult<Range[]>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.Range[]>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.parallelOperationThreadCount
    name: parallelOperationThreadCount
    fullName: parallelOperationThreadCount
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'parallelOperationThreadCount: number'
      return:
        type:
          - number
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.releaseLease
    name: releaseLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Releases the lease. If container and blob are specified, releases the blob
      lease. Otherwise, if only container is specified and blob is null,
      releases the container lease.
    syntax:
      content: >-
        function releaseLease(container: string, blob: string, leaseId: string,
        callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: leaseId
          type:
            - string
          description: The lease identifier.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.releaseLease_1
    name: releaseLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Releases the lease. If container and blob are specified, releases the blob
      lease. Otherwise, if only container is specified and blob is null,
      releases the container lease.
    syntax:
      content: >-
        function releaseLease(container: string, blob: string, leaseId: string,
        options: LeaseRequestOptions, callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: leaseId
          type:
            - string
          description: The lease identifier.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.renewLease
    name: renewLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Renews an existing lease. If container and blob are specified, renews the
      blob lease. Otherwise, if only container is specified and blob is null,
      renews the container lease.
    syntax:
      content: >-
        function renewLease(container: string, blob: string, leaseId: string,
        callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: leaseId
          type:
            - string
          description: The lease identifier. Must be a GUID.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.renewLease_1
    name: renewLease
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Renews an existing lease. If container and blob are specified, renews the
      blob lease. Otherwise, if only container is specified and blob is null,
      renews the container lease.
    syntax:
      content: >-
        function renewLease(container: string, blob: string, leaseId: string,
        options: LeaseRequestOptions, callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: leaseId
          type:
            - string
          description: The lease identifier. Must be a GUID.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.resizePageBlob
    name: resizePageBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: Resizes a page blob.
    syntax:
      content: >-
        function resizePageBlob(container: string, blob: string, size: number,
        options: BlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: size
          type:
            - number
          description: 'The size of the page blob, in bytes.'
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      information about the blob.
                                                                                      `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.resizePageBlob_1
    name: resizePageBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: Resizes a page blob.
    syntax:
      content: >-
        function resizePageBlob(container: string, blob: string, size: number,
        callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: size
          type:
            - number
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobMetadata
    name: setBlobMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets user-defined metadata for the specified blob or snapshot as one or
      more name-value pairs

      It does not modify or return the content of the blob.
    syntax:
      content: >-
        function setBlobMetadata(container: string, blob: string, metadata:
        Map<string>, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: metadata
          type:
            - azure-storage.Map<string>
          description: The metadata key/value pairs.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information on the blob.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobMetadata_1
    name: setBlobMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets user-defined metadata for the specified blob or snapshot as one or
      more name-value pairs

      It does not modify or return the content of the blob.
    syntax:
      content: >-
        function setBlobMetadata(container: string, blob: string, metadata:
        Map<string>, options: BlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: metadata
          type:
            - azure-storage.Map<string>
          description: The metadata key/value pairs.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information on the blob.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobProperties_1
    name: setBlobProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Sets user-defined properties for the specified blob or snapshot.
      It does not modify or return the content of the blob.
    syntax:
      content: >-
        function setBlobProperties(container: string, blob: string,
        optionsOrCallback: SetBlobPropertiesRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: optionsOrCallback
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.SetBlobPropertiesRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the blob.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobProperties
    name: setBlobProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Clears user-defined properties for the specified blob or snapshot.
      It does not modify or return the content of the blob.
    syntax:
      content: >-
        function setBlobProperties(container: string, blob: string, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the blob.
                                                                                    `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobTier_1
    name: setBlobTier
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the tier of a blockblob under a blob storage LRS account, or the tier
      of a pageblob under a premium storage account.
    syntax:
      content: >-
        function setBlobTier(container: string, blob: string, blobTier: string,
        callback: ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: blobTier
          type:
            - string
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobTier
    name: setBlobTier
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the tier of a blockblob under a blob storage LRS account, or the tier
      of a pageblob under a premium storage account.
    syntax:
      content: >-
        function setBlobTier(container: string, blob: string, blobTier: string,
        options: RequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: blobTier
          type:
            - string
          description: >-
            Please see BlobUtilities.BlobTier.StandardBlobTier or
            BlobUtilities.BlobTier.PremiumPageBlobTier for possible values.
        - id: options
          type:
            - azure-storage.azurestorage.common.RequestOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: |
            `error` will contain information
                                                                                 if an error occurs; otherwise, `response`
                                                                                 will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setContainerAcl
    name: setContainerAcl
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates the container's ACL.
    syntax:
      content: >-
        function setContainerAcl(container: string, signedIdentifiers: [key:
        string]: AccessPolicy, options: ContainerAclOptions, callback:
        ErrorOrResult<ContainerAclResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: signedIdentifiers
          type:
            - '[key: string]: azure-storage.azurestorage.common.AccessPolicy'
          description: >-
            The container ACL settings. See `[AccessPolicy](xref:AccessPolicy)`
            for detailed information.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclResult>
          description: |
            `error` will contain information
                                                                                        if an error occurs; otherwise `result` will contain
                                                                                        information for the container.
                                                                                        `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setContainerAcl_1
    name: setContainerAcl
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates the container's ACL.
    syntax:
      content: >-
        function setContainerAcl(container: string, signedIdentifiers: [key:
        string]: AccessPolicy, callback: ErrorOrResult<ContainerAclResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: signedIdentifiers
          type:
            - '[key: string]: azure-storage.azurestorage.common.AccessPolicy'
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setContainerMetadata
    name: setContainerMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Sets the container's metadata.

      Calling the Set Container Metadata operation overwrites all existing
      metadata that is associated with the container.

      It's not possible to modify an individual name/value pair.
    syntax:
      content: >-
        function setContainerMetadata(container: string, metadata: Map<string>,
        callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: metadata
          type:
            - azure-storage.Map<string>
          description: The metadata key/value pairs.
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult>
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setContainerMetadata_1
    name: setContainerMetadata
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Sets the container's metadata.

      Calling the Set Container Metadata operation overwrites all existing
      metadata that is associated with the container.

      It's not possible to modify an individual name/value pair.
    syntax:
      content: >-
        function setContainerMetadata(container: string, metadata: Map<string>,
        options: ContainerOptions, callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: metadata
          type:
            - azure-storage.Map<string>
          description: The metadata key/value pairs.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult>
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise
                                                                            `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setPageBlobSequenceNumber
    name: setPageBlobSequenceNumber
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the page blob's sequence number.
    syntax:
      content: >-
        function setPageBlobSequenceNumber(container: string, blob: string,
        sequenceNumberAction: string, sequenceNumber: number, options:
        BlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: sequenceNumberAction
          type:
            - string
          description: |-
            A value indicating the operation to perform on the sequence number.
                                                                                      The allowed values are defined in azure.BlobUtilities.SequenceNumberAction.
        - id: sequenceNumber
          type:
            - number
          description: >-
            The sequence number.  The value of the sequence number must be
            between 0 and 2^63 - 1.
                                                                                      Set this parameter to null if this operation is an increment action.
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      information about the blob.
                                                                                      `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setPageBlobSequenceNumber_1
    name: setPageBlobSequenceNumber
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the page blob's sequence number.
    syntax:
      content: >-
        function setPageBlobSequenceNumber(container: string, blob: string,
        sequenceNumberAction: string, sequenceNumber: number, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: sequenceNumberAction
          type:
            - string
          description: ''
        - id: sequenceNumber
          type:
            - number
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setServiceProperties_1
    name: setServiceProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the properties of a storage account’s Blob service, including Azure
      Storage Analytics.

      You can also use this operation to set the default request version for all
      incoming requests that do not have a version specified.

      When you set blob service properties (such as enabling soft delete), it
      may take up to 30 seconds to take effect.
    syntax:
      content: >-
        function setServiceProperties(serviceProperties: BlobServiceProperties,
        callback: ErrorOrResponse)
      parameters:
        - id: serviceProperties
          type:
            - >-
              azure-storage.azurestorage.common.models.ServicePropertiesResult.BlobServiceProperties
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setServiceProperties
    name: setServiceProperties
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the properties of a storage account’s Blob service, including Azure
      Storage Analytics.

      You can also use this operation to set the default request version for all
      incoming requests that do not have a version specified.

      When you set blob service properties (such as enabling soft delete), it
      may take up to 30 seconds to take effect.
    syntax:
      content: >-
        function setServiceProperties(serviceProperties: BlobServiceProperties,
        options: RequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: serviceProperties
          type:
            - >-
              azure-storage.azurestorage.common.models.ServicePropertiesResult.BlobServiceProperties
          description: The service properties.
        - id: options
          type:
            - azure-storage.azurestorage.common.RequestOptions
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: |
            `error` will contain information
                                                                                 if an error occurs; otherwise, `response`
                                                                                 will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.singleBlobPutThresholdInBytes
    name: singleBlobPutThresholdInBytes
    fullName: singleBlobPutThresholdInBytes
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'singleBlobPutThresholdInBytes: number'
      return:
        type:
          - number
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.SpeedSummary
    name: SpeedSummary
    fullName: SpeedSummary
    children: []
    langs:
      - typeScript
    type: property
    summary: 'The callback for {BlobService~getBlobToText}.'
    syntax:
      content: 'static SpeedSummary: SpeedSummary'
      return:
        type:
          - azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.startCopyBlob
    name: startCopyBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Starts to copy a blob or an Azure Storage file to a destination blob.

      For an asynchronous copy(by default), this operation returns a object
      including a copy ID which

      you can use to check or abort the copy operation. The Blob service copies
      blobs on a best-effort basis.

      The source blob for an asynchronous copy operation may be a block blob, an
      append blob,

      a page blob or an Azure Storage file.


      Refer to
      https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob for
      more details.
    syntax:
      content: >-
        function startCopyBlob(sourceUri: string, targetcontainer: string,
        targetblob: string, options: CopyBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: sourceUri
          type:
            - string
          description: The source blob URI.
        - id: targetcontainer
          type:
            - string
          description: ''
        - id: targetblob
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.CopyBlobRequestOptions
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will contain
                                                                                  the blob information.
                                                                                  `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.startCopyBlob_1
    name: startCopyBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Starts to copy a blob or an Azure Storage file to a destination blob.

      For an asynchronous copy(by default), this operation returns a object
      including a copy ID which

      you can use to check or abort the copy operation. The Blob service copies
      blobs on a best-effort basis.

      The source blob for an asynchronous copy operation may be a block blob, an
      append blob,

      a page blob or an Azure Storage file.


      Refer to
      https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob for
      more details.
    syntax:
      content: >-
        function startCopyBlob(sourceUri: string, targetcontainer: string,
        targetblob: string, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: sourceUri
          type:
            - string
          description: ''
        - id: targetcontainer
          type:
            - string
          description: ''
        - id: targetblob
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.undeleteBlob
    name: undeleteBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The undelete Blob operation restores the contents and metadata of soft
      deleted blob or snapshot.

      Attempting to undelete a blob or snapshot that is not soft deleted will
      succeed without any changes.
    syntax:
      content: >-
        function undeleteBlob(container: string, blob: string, callback:
        ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: The container name.
        - id: blob
          type:
            - string
          description: The blob name.
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: |
            `error` will contain information
                                                                                    if an error occurs; `response` will contain information related to this operation.
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.undeleteBlob_1
    name: undeleteBlob
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The undelete Blob operation restores the contents and metadata of soft
      deleted blob or snapshot.

      Attempting to undelete a blob or snapshot that is not soft deleted will
      succeed without any changes.
    syntax:
      content: >-
        function undeleteBlob(container: string, blob: string, options:
        ConditionalRequestOption, callback: ErrorOrResponse)
      parameters:
        - id: container
          type:
            - string
          description: ''
        - id: blob
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-storage.azurestorage.services.blob.blobservice.BlobService.ConditionalRequestOption
          description: ''
        - id: callback
          type:
            - azure-storage.azurestorage.ErrorOrResponse
          description: ''
    package: azure-storage
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.withFilter
    name: withFilter
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Associate a filtering operation with this BlobService. Filtering
      operations

      can include logging, automatically retrying, etc. Filter operations are
      objects

      that implement a method with the signature:
          "function handle (requestOptions, next)".

      After doing its preprocessing on the request options, the method needs to
      call

      "next" passing a callback with the following signature:

      signature:

          "function (returnObject, finalCallback, next)"

      In this callback, and after processing the returnObject (the response from
      the

      request to the server), the callback needs to either invoke next if it
      exists to

      continue processing other filters or simply invoke finalCallback otherwise
      to end

      up the service invocation.
    syntax:
      content: 'function withFilter(newFilter: IFilter)'
      parameters:
        - id: newFilter
          type:
            - azure-storage.azurestorage.common.filters.IFilter
          description: ''
      return:
        type:
          - azure-storage.azurestorage.services.blob.blobservice.BlobService
    package: azure-storage
references:
  - uid: azure-storage.azurestorage.common.RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: azure-storage.azurestorage.common.RequestOptions
  - uid: azure-storage.azurestorage.common.filters.Next
    spec.typeScript:
      - name: Next
        fullName: Next
        uid: azure-storage.azurestorage.common.filters.Next
  - uid: >-
      azure-storage.azurestorage.common.filters.retrypolicyfilter.RetryPolicyFilter.IRetryRequestOptions
    spec.typeScript:
      - name: IRetryRequestOptions
        fullName: IRetryRequestOptions
        uid: >-
          azure-storage.azurestorage.common.filters.retrypolicyfilter.RetryPolicyFilter.IRetryRequestOptions
  - uid: azure-storage.azurestorage.common.filters.IFilter
    spec.typeScript:
      - name: IFilter
        fullName: IFilter
        uid: azure-storage.azurestorage.common.filters.IFilter
  - uid: >-
      azure-storage.azurestorage.common.filters.retrypolicyfilter.RetryPolicyFilter.IRetryContext
    spec.typeScript:
      - name: IRetryContext
        fullName: IRetryContext
        uid: >-
          azure-storage.azurestorage.common.filters.retrypolicyfilter.RetryPolicyFilter.IRetryContext
  - uid: >-
      azure-storage.azurestorage.common.filters.retrypolicyfilter.RetryPolicyFilter
    spec.typeScript:
      - name: RetryPolicyFilter
        fullName: RetryPolicyFilter
        uid: >-
          azure-storage.azurestorage.common.filters.retrypolicyfilter.RetryPolicyFilter
  - uid: azure-storage.Map<any>
    spec.typeScript:
      - name: Map
        fullName: Map
        uid: azure-storage.Map
      - name: <any>
        fullName: <any>
  - uid: azure-storage.Map<string>
    spec.typeScript:
      - name: Map
        fullName: Map
        uid: azure-storage.Map
      - name: <string>
        fullName: <string>
  - uid: azure-storage.azurestorage.common.http.webresource.WebResource
    spec.typeScript:
      - name: WebResource
        fullName: WebResource
        uid: azure-storage.azurestorage.common.http.webresource.WebResource
  - uid: >-
      azure-storage.azurestorage.common.models.ServicePropertiesResult.ServiceProperties
    spec.typeScript:
      - name: ServiceProperties
        fullName: ServiceProperties
        uid: >-
          azure-storage.azurestorage.common.models.ServicePropertiesResult.ServiceProperties
  - uid: >-
      azure-storage.azurestorage.common.models.ServicePropertiesResult.StaticWebsiteProperties
    spec.typeScript:
      - name: StaticWebsiteProperties
        fullName: StaticWebsiteProperties
        uid: >-
          azure-storage.azurestorage.common.models.ServicePropertiesResult.StaticWebsiteProperties
  - uid: >-
      azure-storage.azurestorage.common.models.ServicePropertiesResult.RetentionPolicy
    spec.typeScript:
      - name: RetentionPolicy
        fullName: RetentionPolicy
        uid: >-
          azure-storage.azurestorage.common.models.ServicePropertiesResult.RetentionPolicy
  - uid: >-
      azure-storage.azurestorage.common.models.ServicePropertiesResult.DeleteRetentionPolicyProperties
    spec.typeScript:
      - name: DeleteRetentionPolicyProperties
        fullName: DeleteRetentionPolicyProperties
        uid: >-
          azure-storage.azurestorage.common.models.ServicePropertiesResult.DeleteRetentionPolicyProperties
  - uid: >-
      azure-storage.azurestorage.common.models.ServicePropertiesResult.MetricsProperties
    spec.typeScript:
      - name: MetricsProperties
        fullName: MetricsProperties
        uid: >-
          azure-storage.azurestorage.common.models.ServicePropertiesResult.MetricsProperties
  - uid: >-
      azure-storage.azurestorage.common.models.ServicePropertiesResult.LoggingProperties
    spec.typeScript:
      - name: LoggingProperties
        fullName: LoggingProperties
        uid: >-
          azure-storage.azurestorage.common.models.ServicePropertiesResult.LoggingProperties
  - uid: azure-storage.azurestorage.StorageHost
    spec.typeScript:
      - name: StorageHost
        fullName: StorageHost
        uid: azure-storage.azurestorage.StorageHost
  - uid: azure-storage.azurestorage.common.util.storageutilities.LocationMode
    spec.typeScript:
      - name: LocationMode
        fullName: LocationMode
        uid: azure-storage.azurestorage.common.util.storageutilities.LocationMode
  - uid: azure-storage.azurestorage.common.diagnostics.logger.Logger
    spec.typeScript:
      - name: Logger
        fullName: Logger
        uid: azure-storage.azurestorage.common.diagnostics.logger.Logger
  - uid: azure-storage.azurestorage.common.services.storageserviceclient.Proxy
    spec.typeScript:
      - name: Proxy
        fullName: Proxy
        uid: azure-storage.azurestorage.common.services.storageserviceclient.Proxy
  - uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient
    spec.typeScript:
      - name: StorageServiceClient
        fullName: StorageServiceClient
        uid: >-
          azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient
  - uid: azure-storage.azurestorage.AccessConditions
    spec.typeScript:
      - name: AccessConditions
        fullName: AccessConditions
        uid: azure-storage.azurestorage.AccessConditions
  - uid: azure-storage.azurestorage.common.AccessPolicy
    spec.typeScript:
      - name: AccessPolicy
        fullName: AccessPolicy
        uid: azure-storage.azurestorage.common.AccessPolicy
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseRequestOptions
    spec.typeScript:
      - name: LeaseRequestOptions
        fullName: LeaseRequestOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseRequestOptions
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.ConditionalRequestOption
    spec.typeScript:
      - name: ConditionalRequestOption
        fullName: ConditionalRequestOption
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.ConditionalRequestOption
  - uid: 'azure-storage.azurestorage.services.blob.blobservice.BlobService.Block[]'
    spec.typeScript:
      - name: Block
        fullName: Block
        uid: azure-storage.azurestorage.services.blob.blobservice.BlobService.Block
      - name: '[]'
        fullName: '[]'
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions
    spec.typeScript:
      - name: ContainerOptions
        fullName: ContainerOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult
    spec.typeScript:
      - name: ContainerResult
        fullName: ContainerResult
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult
  - uid: '[key: string]: azure-storage.azurestorage.common.AccessPolicy'
    spec.typeScript:
      - name: '[key: string]: '
        fullName: '[key: string]: '
      - name: AccessPolicy
        fullName: AccessPolicy
        uid: azure-storage.azurestorage.common.AccessPolicy
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
    spec.typeScript:
      - name: BlobRequestOptions
        fullName: BlobRequestOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions
  - uid: azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
    spec.typeScript:
      - name: SpeedSummary
        fullName: SpeedSummary
        uid: azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
    spec.typeScript:
      - name: CreateBlobRequestOptions
        fullName: CreateBlobRequestOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions
  - uid: azure-storage.azurestorage.common.ContinuationToken
    spec.typeScript:
      - name: ContinuationToken
        fullName: ContinuationToken
        uid: azure-storage.azurestorage.common.ContinuationToken
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult[]
    spec.typeScript:
      - name: BlobResult
        fullName: BlobResult
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult
      - name: '[]'
        fullName: '[]'
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult[]
    spec.typeScript:
      - name: ContainerResult
        fullName: ContainerResult
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult
      - name: '[]'
        fullName: '[]'
  - uid: string | azure-storage.azurestorage.StorageHost
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: StorageHost
        fullName: StorageHost
        uid: azure-storage.azurestorage.StorageHost
  - uid: azure-storage.azurestorage.ErrorOrResponse
    spec.typeScript:
      - name: ErrorOrResponse
        fullName: ErrorOrResponse
        uid: azure-storage.azurestorage.ErrorOrResponse
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: LeaseResult
        fullName: LeaseResult
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.AcquireLeaseRequestOptions
    spec.typeScript:
      - name: AcquireLeaseRequestOptions
        fullName: AcquireLeaseRequestOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.AcquireLeaseRequestOptions
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.AppendBlobRequestOptions
    spec.typeScript:
      - name: AppendBlobRequestOptions
        fullName: AppendBlobRequestOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.AppendBlobRequestOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: BlobResult
        fullName: BlobResult
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.BreakLeaseRequestOptions
    spec.typeScript:
      - name: BreakLeaseRequestOptions
        fullName: BreakLeaseRequestOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.BreakLeaseRequestOptions
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.PutBlockListRequest
    spec.typeScript:
      - name: PutBlockListRequest
        fullName: PutBlockListRequest
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.PutBlockListRequest
  - uid: azure-storage.azurestorage.ErrorOrResult<string>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <string>
        fullName: <string>
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockBlobRequestOptions
    spec.typeScript:
      - name: CreateBlockBlobRequestOptions
        fullName: CreateBlockBlobRequestOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockBlobRequestOptions
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockRequestOptions
    spec.typeScript:
      - name: CreateBlockRequestOptions
        fullName: CreateBlockRequestOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockRequestOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: ContainerResult
        fullName: ContainerResult
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateContainerOptions
    spec.typeScript:
      - name: CreateContainerOptions
        fullName: CreateContainerOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateContainerOptions
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions
    spec.typeScript:
      - name: CreatePageBlobOptions
        fullName: CreatePageBlobOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions
    spec.typeScript:
      - name: GetBlobRequestOptions
        fullName: GetBlobRequestOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.DeleteBlobRequestOptions
    spec.typeScript:
      - name: DeleteBlobRequestOptions
        fullName: DeleteBlobRequestOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.DeleteBlobRequestOptions
  - uid: azure-storage.azurestorage.ErrorOrResult<boolean>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <boolean>
        fullName: <boolean>
  - uid: azure-storage.azurestorage.common.SharedAccessPolicy
    spec.typeScript:
      - name: SharedAccessPolicy
        fullName: SharedAccessPolicy
        uid: azure-storage.azurestorage.common.SharedAccessPolicy
  - uid: azure-storage.azurestorage.common.ContentSettingsHeaders
    spec.typeScript:
      - name: ContentSettingsHeaders
        fullName: ContentSettingsHeaders
        uid: azure-storage.azurestorage.common.ContentSettingsHeaders
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.models.AccountProperties>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: AccountProperties
        fullName: AccountProperties
        uid: azure-storage.azurestorage.common.models.AccountProperties
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobToText
    spec.typeScript:
      - name: BlobToText
        fullName: BlobToText
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobToText
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: ContainerAclResult
        fullName: ContainerAclResult
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.RangeDiff[]>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: RangeDiff
        fullName: RangeDiff
        uid: azure-storage.azurestorage.common.RangeDiff
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.models.ServicePropertiesResult.BlobServiceProperties>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: BlobServiceProperties
        fullName: BlobServiceProperties
        uid: >-
          azure-storage.azurestorage.common.models.ServicePropertiesResult.BlobServiceProperties
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.models.ServiceStats>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: ServiceStats
        fullName: ServiceStats
        uid: azure-storage.azurestorage.common.models.ServiceStats
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: ListBlobsResult
        fullName: ListBlobsResult
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsSegmentedRequestOptions
    spec.typeScript:
      - name: ListBlobsSegmentedRequestOptions
        fullName: ListBlobsSegmentedRequestOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsSegmentedRequestOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.BlockListResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: BlockListResult
        fullName: BlockListResult
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.BlockListResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerOptions
    spec.typeScript:
      - name: ListContainerOptions
        fullName: ListContainerOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: ListContainerResult
        fullName: ListContainerResult
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.Range[]>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: Range
        fullName: Range
        uid: azure-storage.azurestorage.common.Range
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.SetBlobPropertiesRequestOptions
    spec.typeScript:
      - name: SetBlobPropertiesRequestOptions
        fullName: SetBlobPropertiesRequestOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.SetBlobPropertiesRequestOptions
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclOptions
    spec.typeScript:
      - name: ContainerAclOptions
        fullName: ContainerAclOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclOptions
  - uid: >-
      azure-storage.azurestorage.common.models.ServicePropertiesResult.BlobServiceProperties
    spec.typeScript:
      - name: BlobServiceProperties
        fullName: BlobServiceProperties
        uid: >-
          azure-storage.azurestorage.common.models.ServicePropertiesResult.BlobServiceProperties
  - uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.CopyBlobRequestOptions
    spec.typeScript:
      - name: CopyBlobRequestOptions
        fullName: CopyBlobRequestOptions
        uid: >-
          azure-storage.azurestorage.services.blob.blobservice.BlobService.CopyBlobRequestOptions
  - uid: azure-storage.azurestorage.services.blob.blobservice.BlobService
    spec.typeScript:
      - name: BlobService
        fullName: BlobService
        uid: azure-storage.azurestorage.services.blob.blobservice.BlobService
  - uid: azure-storage.azurestorage.services.file.FileService.FileServiceOptions
    spec.typeScript:
      - name: FileServiceOptions
        fullName: FileServiceOptions
        uid: >-
          azure-storage.azurestorage.services.file.FileService.FileServiceOptions
  - uid: 'azure-storage.azurestorage.services.file.FileService.ShareResult[]'
    spec.typeScript:
      - name: ShareResult
        fullName: ShareResult
        uid: azure-storage.azurestorage.services.file.FileService.ShareResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-storage.azurestorage.services.file.FileService.ShareResult
    spec.typeScript:
      - name: ShareResult
        fullName: ShareResult
        uid: azure-storage.azurestorage.services.file.FileService.ShareResult
  - uid: azure-storage.Map<azure-storage.azurestorage.common.AccessPolicy>
    spec.typeScript:
      - name: Map
        fullName: Map
        uid: azure-storage.Map
      - name: <
        fullName: <
      - name: AccessPolicy
        fullName: AccessPolicy
        uid: azure-storage.azurestorage.common.AccessPolicy
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.file.FileService.FileResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: FileResult
        fullName: FileResult
        uid: azure-storage.azurestorage.services.file.FileService.FileResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.file.FileService.CreateDirectoryRequestOptions
    spec.typeScript:
      - name: CreateDirectoryRequestOptions
        fullName: CreateDirectoryRequestOptions
        uid: >-
          azure-storage.azurestorage.services.file.FileService.CreateDirectoryRequestOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.file.FileService.DirectoryResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: DirectoryResult
        fullName: DirectoryResult
        uid: azure-storage.azurestorage.services.file.FileService.DirectoryResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.file.FileService.CreateFileRequestOptions
    spec.typeScript:
      - name: CreateFileRequestOptions
        fullName: CreateFileRequestOptions
        uid: >-
          azure-storage.azurestorage.services.file.FileService.CreateFileRequestOptions
  - uid: >-
      azure-storage.azurestorage.services.file.FileService.CreateRangeRequestOptions
    spec.typeScript:
      - name: CreateRangeRequestOptions
        fullName: CreateRangeRequestOptions
        uid: >-
          azure-storage.azurestorage.services.file.FileService.CreateRangeRequestOptions
  - uid: azure-storage.azurestorage.services.file.FileService.GetFileRequestOptions
    spec.typeScript:
      - name: GetFileRequestOptions
        fullName: GetFileRequestOptions
        uid: >-
          azure-storage.azurestorage.services.file.FileService.GetFileRequestOptions
  - uid: >-
      azure-storage.azurestorage.services.file.FileService.CreateShareRequestOptions
    spec.typeScript:
      - name: CreateShareRequestOptions
        fullName: CreateShareRequestOptions
        uid: >-
          azure-storage.azurestorage.services.file.FileService.CreateShareRequestOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.file.FileService.ShareResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: ShareResult
        fullName: ShareResult
        uid: azure-storage.azurestorage.services.file.FileService.ShareResult
      - name: '>'
        fullName: '>'
  - uid: azure-storage.azurestorage.services.file.FileService.DeleteShareOptions
    spec.typeScript:
      - name: DeleteShareOptions
        fullName: DeleteShareOptions
        uid: >-
          azure-storage.azurestorage.services.file.FileService.DeleteShareOptions
  - uid: azure-storage.azurestorage.services.file.FileService.FileToText
    spec.typeScript:
      - name: FileToText
        fullName: FileToText
        uid: azure-storage.azurestorage.services.file.FileService.FileToText
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.common.models.ServicePropertiesResult.ServiceProperties>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: ServiceProperties
        fullName: ServiceProperties
        uid: >-
          azure-storage.azurestorage.common.models.ServicePropertiesResult.ServiceProperties
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.file.FileService.ShareAclResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: ShareAclResult
        fullName: ShareAclResult
        uid: azure-storage.azurestorage.services.file.FileService.ShareAclResult
      - name: '>'
        fullName: '>'
  - uid: azure-storage.azurestorage.services.file.FileService.ListRequestOptions
    spec.typeScript:
      - name: ListRequestOptions
        fullName: ListRequestOptions
        uid: >-
          azure-storage.azurestorage.services.file.FileService.ListRequestOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.file.FileService.ListFilesAndDirectoriesResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: ListFilesAndDirectoriesResult
        fullName: ListFilesAndDirectoriesResult
        uid: >-
          azure-storage.azurestorage.services.file.FileService.ListFilesAndDirectoriesResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.file.FileService.ListRangeRequestOptions
    spec.typeScript:
      - name: ListRangeRequestOptions
        fullName: ListRangeRequestOptions
        uid: >-
          azure-storage.azurestorage.services.file.FileService.ListRangeRequestOptions
  - uid: >-
      azure-storage.azurestorage.services.file.FileService.ListShareRequestOptions
    spec.typeScript:
      - name: ListShareRequestOptions
        fullName: ListShareRequestOptions
        uid: >-
          azure-storage.azurestorage.services.file.FileService.ListShareRequestOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.file.FileService.ListSharesResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: ListSharesResult
        fullName: ListSharesResult
        uid: azure-storage.azurestorage.services.file.FileService.ListSharesResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.file.FileService.SetFilePropertiesRequestOptions
    spec.typeScript:
      - name: SetFilePropertiesRequestOptions
        fullName: SetFilePropertiesRequestOptions
        uid: >-
          azure-storage.azurestorage.services.file.FileService.SetFilePropertiesRequestOptions
  - uid: azure-storage.azurestorage.services.file.FileService.ShareProperties
    spec.typeScript:
      - name: ShareProperties
        fullName: ShareProperties
        uid: azure-storage.azurestorage.services.file.FileService.ShareProperties
  - uid: >-
      azure-storage.azurestorage.services.file.FileService.CopyFileRequestOptions
    spec.typeScript:
      - name: CopyFileRequestOptions
        fullName: CopyFileRequestOptions
        uid: >-
          azure-storage.azurestorage.services.file.FileService.CopyFileRequestOptions
  - uid: azure-storage.azurestorage.services.file.FileService
    spec.typeScript:
      - name: FileService
        fullName: FileService
        uid: azure-storage.azurestorage.services.file.FileService
  - uid: 'azure-storage.azurestorage.services.queue.QueueService.QueueResult[]'
    spec.typeScript:
      - name: QueueResult
        fullName: QueueResult
        uid: azure-storage.azurestorage.services.queue.QueueService.QueueResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-storage.azurestorage.services.queue.QueueMessageEncoder
    spec.typeScript:
      - name: QueueMessageEncoder
        fullName: QueueMessageEncoder
        uid: azure-storage.azurestorage.services.queue.QueueMessageEncoder
  - uid: >-
      azure-storage.azurestorage.services.queue.QueueService.CreateMessageRequestOptions
    spec.typeScript:
      - name: CreateMessageRequestOptions
        fullName: CreateMessageRequestOptions
        uid: >-
          azure-storage.azurestorage.services.queue.QueueService.CreateMessageRequestOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: QueueMessageResult
        fullName: QueueMessageResult
        uid: >-
          azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.queue.QueueService.CreateQueueRequestOptions
    spec.typeScript:
      - name: CreateQueueRequestOptions
        fullName: CreateQueueRequestOptions
        uid: >-
          azure-storage.azurestorage.services.queue.QueueService.CreateQueueRequestOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.queue.QueueService.QueueResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: QueueResult
        fullName: QueueResult
        uid: azure-storage.azurestorage.services.queue.QueueService.QueueResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.queue.QueueService.GetMessageRequestOptions
    spec.typeScript:
      - name: GetMessageRequestOptions
        fullName: GetMessageRequestOptions
        uid: >-
          azure-storage.azurestorage.services.queue.QueueService.GetMessageRequestOptions
  - uid: >-
      azure-storage.azurestorage.services.queue.QueueService.GetMessagesRequestOptions
    spec.typeScript:
      - name: GetMessagesRequestOptions
        fullName: GetMessagesRequestOptions
        uid: >-
          azure-storage.azurestorage.services.queue.QueueService.GetMessagesRequestOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult[]>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: QueueMessageResult
        fullName: QueueMessageResult
        uid: >-
          azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      azure-storage.azurestorage.services.queue.QueueService.ListQueuesRequestOptions
    spec.typeScript:
      - name: ListQueuesRequestOptions
        fullName: ListQueuesRequestOptions
        uid: >-
          azure-storage.azurestorage.services.queue.QueueService.ListQueuesRequestOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.queue.QueueService.ListQueueResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: ListQueueResult
        fullName: ListQueueResult
        uid: azure-storage.azurestorage.services.queue.QueueService.ListQueueResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.queue.QueueService.PeekMessagesRequestOptions
    spec.typeScript:
      - name: PeekMessagesRequestOptions
        fullName: PeekMessagesRequestOptions
        uid: >-
          azure-storage.azurestorage.services.queue.QueueService.PeekMessagesRequestOptions
  - uid: >-
      azure-storage.azurestorage.services.queue.QueueService.UpdateMessageRequestOptions
    spec.typeScript:
      - name: UpdateMessageRequestOptions
        fullName: UpdateMessageRequestOptions
        uid: >-
          azure-storage.azurestorage.services.queue.QueueService.UpdateMessageRequestOptions
  - uid: azure-storage.azurestorage.services.queue.QueueService
    spec.typeScript:
      - name: QueueService
        fullName: QueueService
        uid: azure-storage.azurestorage.services.queue.QueueService
  - uid: azure-storage.azurestorage.services.table.TableService.BatchResponse
    spec.typeScript:
      - name: BatchResponse
        fullName: BatchResponse
        uid: azure-storage.azurestorage.services.table.TableService.BatchResponse
  - uid: >-
      azure-storage.azurestorage.services.table.TableService.TableEntityRequestOptions
    spec.typeScript:
      - name: TableEntityRequestOptions
        fullName: TableEntityRequestOptions
        uid: >-
          azure-storage.azurestorage.services.table.TableService.TableEntityRequestOptions
  - uid: >-
      azure-storage.azurestorage.services.table.TableService.ListTablesContinuationToken
    spec.typeScript:
      - name: ListTablesContinuationToken
        fullName: ListTablesContinuationToken
        uid: >-
          azure-storage.azurestorage.services.table.TableService.ListTablesContinuationToken
  - uid: >-
      azure-storage.azurestorage.services.table.TableService.TableContinuationToken
    spec.typeScript:
      - name: TableContinuationToken
        fullName: TableContinuationToken
        uid: >-
          azure-storage.azurestorage.services.table.TableService.TableContinuationToken
  - uid: azure-storage.azurestorage.services.table.TableService.PropertyResolver
    spec.typeScript:
      - name: PropertyResolver
        fullName: PropertyResolver
        uid: >-
          azure-storage.azurestorage.services.table.TableService.PropertyResolver
  - uid: azure-storage.azurestorage.services.table.TableService.TableAccessPolicy
    spec.typeScript:
      - name: TableAccessPolicy
        fullName: TableAccessPolicy
        uid: >-
          azure-storage.azurestorage.services.table.TableService.TableAccessPolicy
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.table.TableService.TableResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: TableResult
        fullName: TableResult
        uid: azure-storage.azurestorage.services.table.TableService.TableResult
      - name: '>'
        fullName: '>'
  - uid: azure-storage.azurestorage.services.table.TableBatch
    spec.typeScript:
      - name: TableBatch
        fullName: TableBatch
        uid: azure-storage.azurestorage.services.table.TableBatch
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.table.TableService.BatchResult[]>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: BatchResult
        fullName: BatchResult
        uid: azure-storage.azurestorage.services.table.TableService.BatchResult
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      azure-storage.azurestorage.services.table.TableService.TableSharedAccessPolicy
    spec.typeScript:
      - name: TableSharedAccessPolicy
        fullName: TableSharedAccessPolicy
        uid: >-
          azure-storage.azurestorage.services.table.TableService.TableSharedAccessPolicy
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.table.TableService.GetTableAclResult>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: GetTableAclResult
        fullName: GetTableAclResult
        uid: >-
          azure-storage.azurestorage.services.table.TableService.GetTableAclResult
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.table.TableService.InsertEntityRequestOptions
    spec.typeScript:
      - name: InsertEntityRequestOptions
        fullName: InsertEntityRequestOptions
        uid: >-
          azure-storage.azurestorage.services.table.TableService.InsertEntityRequestOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<T |
      azure-storage.azurestorage.services.table.TableService.EntityMetadata>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: '<T | '
        fullName: '<T | '
      - name: EntityMetadata
        fullName: EntityMetadata
        uid: azure-storage.azurestorage.services.table.TableService.EntityMetadata
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.table.TableService.EntityMetadata>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: EntityMetadata
        fullName: EntityMetadata
        uid: azure-storage.azurestorage.services.table.TableService.EntityMetadata
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-storage.azurestorage.services.table.TableService.ListTablesRequestOptions
    spec.typeScript:
      - name: ListTablesRequestOptions
        fullName: ListTablesRequestOptions
        uid: >-
          azure-storage.azurestorage.services.table.TableService.ListTablesRequestOptions
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.table.TableService.ListTablesResponse>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: ListTablesResponse
        fullName: ListTablesResponse
        uid: >-
          azure-storage.azurestorage.services.table.TableService.ListTablesResponse
      - name: '>'
        fullName: '>'
  - uid: azure-storage.azurestorage.services.table.TableQuery
    spec.typeScript:
      - name: TableQuery
        fullName: TableQuery
        uid: azure-storage.azurestorage.services.table.TableQuery
  - uid: >-
      azure-storage.azurestorage.ErrorOrResult<azure-storage.azurestorage.services.table.TableService.QueryEntitiesResult<T>>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <
        fullName: <
      - name: QueryEntitiesResult
        fullName: QueryEntitiesResult
        uid: >-
          azure-storage.azurestorage.services.table.TableService.QueryEntitiesResult
      - name: <T>>
        fullName: <T>>
  - uid: azure-storage.azurestorage.ErrorOrResult<T>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <T>
        fullName: <T>
  - uid: azure-storage.azurestorage.ErrorOrResult<Object>
    spec.typeScript:
      - name: ErrorOrResult
        fullName: ErrorOrResult
        uid: azure-storage.azurestorage.ErrorOrResult
      - name: <Object>
        fullName: <Object>
  - uid: azure-storage.azurestorage.services.table.TableService
    spec.typeScript:
      - name: TableService
        fullName: TableService
        uid: azure-storage.azurestorage.services.table.TableService
  - uid: >-
      azure-storage.azurestorage.services.table.TableUtilities.entityGenerator.EntityProperty<Buffer>
    spec.typeScript:
      - name: EntityProperty
        fullName: EntityProperty
        uid: >-
          azure-storage.azurestorage.services.table.TableUtilities.entityGenerator.EntityProperty
      - name: <Buffer>
        fullName: <Buffer>
  - uid: >-
      azure-storage.azurestorage.services.table.TableUtilities.entityGenerator.EntityProperty<boolean>
    spec.typeScript:
      - name: EntityProperty
        fullName: EntityProperty
        uid: >-
          azure-storage.azurestorage.services.table.TableUtilities.entityGenerator.EntityProperty
      - name: <boolean>
        fullName: <boolean>
  - uid: >-
      azure-storage.azurestorage.services.table.TableUtilities.entityGenerator.EntityProperty<Date>
    spec.typeScript:
      - name: EntityProperty
        fullName: EntityProperty
        uid: >-
          azure-storage.azurestorage.services.table.TableUtilities.entityGenerator.EntityProperty
      - name: <Date>
        fullName: <Date>
  - uid: >-
      azure-storage.azurestorage.services.table.TableUtilities.entityGenerator.EntityProperty<number>
    spec.typeScript:
      - name: EntityProperty
        fullName: EntityProperty
        uid: >-
          azure-storage.azurestorage.services.table.TableUtilities.entityGenerator.EntityProperty
      - name: <number>
        fullName: <number>
  - uid: >-
      azure-storage.azurestorage.services.table.TableUtilities.entityGenerator.EntityProperty<any>
    spec.typeScript:
      - name: EntityProperty
        fullName: EntityProperty
        uid: >-
          azure-storage.azurestorage.services.table.TableUtilities.entityGenerator.EntityProperty
      - name: <any>
        fullName: <any>
  - uid: >-
      azure-storage.azurestorage.services.table.TableUtilities.entityGenerator.EntityProperty<string>
    spec.typeScript:
      - name: EntityProperty
        fullName: EntityProperty
        uid: >-
          azure-storage.azurestorage.services.table.TableUtilities.entityGenerator.EntityProperty
      - name: <string>
        fullName: <string>
  - uid: 'azure-storage.azurestorage.services.table.TableOperation[]'
    spec.typeScript:
      - name: TableOperation
        fullName: TableOperation
        uid: azure-storage.azurestorage.services.table.TableOperation
      - name: '[]'
        fullName: '[]'
  - uid: azure-storage.azurestorage.services.table.TableOperation
    spec.typeScript:
      - name: TableOperation
        fullName: TableOperation
        uid: azure-storage.azurestorage.services.table.TableOperation
  - uid: azure-storage.azurestorage.StorageError | Error
    spec.typeScript:
      - name: StorageError
        fullName: StorageError
        uid: azure-storage.azurestorage.StorageError
      - name: ' | Error'
        fullName: ' | Error'
  - uid: azure-storage.azurestorage.ServiceResponse
    spec.typeScript:
      - name: ServiceResponse
        fullName: ServiceResponse
        uid: azure-storage.azurestorage.ServiceResponse
  - uid: azure-storage.azurestorage.common.models.tokenCredential.TokenCredential
    spec.typeScript:
      - name: TokenCredential
        fullName: TokenCredential
        uid: >-
          azure-storage.azurestorage.common.models.tokenCredential.TokenCredential
