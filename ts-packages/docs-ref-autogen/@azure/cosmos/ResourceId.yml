### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.ResourceId'
    name: ResourceId
    fullName: ResourceId
    children:
      - '@azure/cosmos.ResourceId.attachment'
      - '@azure/cosmos.ResourceId.bigNumberReadIntBE'
      - '@azure/cosmos.ResourceId.conflict'
      - '@azure/cosmos.ResourceId.ConflictByte'
      - '@azure/cosmos.ResourceId.database'
      - '@azure/cosmos.ResourceId.document'
      - '@azure/cosmos.ResourceId.DocumentByte'
      - '@azure/cosmos.ResourceId.documentCollection'
      - '@azure/cosmos.ResourceId.fromBase64String'
      - '@azure/cosmos.ResourceId.getAttachmentId'
      - '@azure/cosmos.ResourceId.getConflictId'
      - '@azure/cosmos.ResourceId.getDatabaseId'
      - '@azure/cosmos.ResourceId.getDocumentCollectionId'
      - '@azure/cosmos.ResourceId.getDocumentId'
      - '@azure/cosmos.ResourceId.getOfferId'
      - '@azure/cosmos.ResourceId.getPartitonKeyRangeId'
      - '@azure/cosmos.ResourceId.getPermissionId'
      - '@azure/cosmos.ResourceId.getStoredProcedureId'
      - '@azure/cosmos.ResourceId.getTriggerId'
      - '@azure/cosmos.ResourceId.getUniqueDocumentCollectionId'
      - '@azure/cosmos.ResourceId.getUserDefinedFunctionId'
      - '@azure/cosmos.ResourceId.getUserId'
      - '@azure/cosmos.ResourceId.getValue'
      - '@azure/cosmos.ResourceId.isDatabaseId'
      - '@azure/cosmos.ResourceId.length'
      - '@azure/cosmos.ResourceId.newAttachmentId'
      - '@azure/cosmos.ResourceId.newDatabaseId'
      - '@azure/cosmos.ResourceId.newDocumentCollectionId'
      - '@azure/cosmos.ResourceId.newPermissionId'
      - '@azure/cosmos.ResourceId.newUserId'
      - '@azure/cosmos.ResourceId.offer'
      - '@azure/cosmos.ResourceId.offerIdLength'
      - '@azure/cosmos.ResourceId.parse'
      - '@azure/cosmos.ResourceId.partitionKeyRange'
      - '@azure/cosmos.ResourceId.PartitionKeyRangeByte'
      - '@azure/cosmos.ResourceId.permission'
      - '@azure/cosmos.ResourceId.constructor'
      - '@azure/cosmos.ResourceId.storedProcedure'
      - '@azure/cosmos.ResourceId.StoredProcedureByte'
      - '@azure/cosmos.ResourceId.toBase64String'
      - '@azure/cosmos.ResourceId.toString'
      - '@azure/cosmos.ResourceId.trigger'
      - '@azure/cosmos.ResourceId.TriggerByte'
      - '@azure/cosmos.ResourceId.tryParse'
      - '@azure/cosmos.ResourceId.user'
      - '@azure/cosmos.ResourceId.userDefinedFunction'
      - '@azure/cosmos.ResourceId.UserDefinedFunctionByte'
      - '@azure/cosmos.ResourceId.verify'
      - '@azure/cosmos.ResourceId.verifyBool'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.attachment'
    name: attachment
    fullName: attachment
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public attachment: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.bigNumberReadIntBE'
    name: bigNumberReadIntBE
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        static function bigNumberReadIntBE(buffer: Buffer, offset: number,
        byteLength: number)
      parameters:
        - id: buffer
          type:
            - Buffer
          description: ''
        - id: offset
          type:
            - number
          description: ''
        - id: byteLength
          type:
            - number
          description: ''
      return:
        type:
          - BigInteger
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.conflict'
    name: conflict
    fullName: conflict
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public conflict: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.ConflictByte'
    name: ConflictByte
    fullName: ConflictByte
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public ConflictByte: number'
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.database'
    name: database
    fullName: database
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public database: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.document'
    name: document
    fullName: document
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public document: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.DocumentByte'
    name: DocumentByte
    fullName: DocumentByte
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public DocumentByte: number'
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.documentCollection'
    name: documentCollection
    fullName: documentCollection
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public documentCollection: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.fromBase64String'
    name: fromBase64String
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function fromBase64String(s: string)'
      parameters:
        - id: s
          type:
            - string
          description: ''
      return:
        type:
          - Buffer
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getAttachmentId'
    name: getAttachmentId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getAttachmentId()
      parameters: []
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getConflictId'
    name: getConflictId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getConflictId()
      parameters: []
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getDatabaseId'
    name: getDatabaseId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getDatabaseId()
      parameters: []
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getDocumentCollectionId'
    name: getDocumentCollectionId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getDocumentCollectionId()
      parameters: []
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getDocumentId'
    name: getDocumentId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getDocumentId()
      parameters: []
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getOfferId'
    name: getOfferId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getOfferId()
      parameters: []
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getPartitonKeyRangeId'
    name: getPartitonKeyRangeId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getPartitonKeyRangeId()
      parameters: []
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getPermissionId'
    name: getPermissionId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getPermissionId()
      parameters: []
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getStoredProcedureId'
    name: getStoredProcedureId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getStoredProcedureId()
      parameters: []
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getTriggerId'
    name: getTriggerId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getTriggerId()
      parameters: []
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getUniqueDocumentCollectionId'
    name: getUniqueDocumentCollectionId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getUniqueDocumentCollectionId()
      parameters: []
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getUserDefinedFunctionId'
    name: getUserDefinedFunctionId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getUserDefinedFunctionId()
      parameters: []
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getUserId'
    name: getUserId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getUserId()
      parameters: []
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.getValue'
    name: getValue
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getValue()
      parameters: []
      return:
        type:
          - Buffer
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.isDatabaseId'
    name: isDatabaseId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isDatabaseId()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.length'
    name: length
    fullName: length
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public length: number'
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.newAttachmentId'
    name: newAttachmentId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function newAttachmentId(documentId: string, attachmentId: string)'
      parameters:
        - id: documentId
          type:
            - string
          description: ''
        - id: attachmentId
          type:
            - string
          description: ''
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.newDatabaseId'
    name: newDatabaseId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function newDatabaseId(dbId: string)'
      parameters:
        - id: dbId
          type:
            - string
          description: ''
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.newDocumentCollectionId'
    name: newDocumentCollectionId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function newDocumentCollectionId(databaseId: string, collectionId:
        string)
      parameters:
        - id: databaseId
          type:
            - string
          description: ''
        - id: collectionId
          type:
            - string
          description: ''
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.newPermissionId'
    name: newPermissionId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function newPermissionId(userId: string, permissionId: string)'
      parameters:
        - id: userId
          type:
            - string
          description: ''
        - id: permissionId
          type:
            - string
          description: ''
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.newUserId'
    name: newUserId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function newUserId(databaseId: string, userId: string)'
      parameters:
        - id: databaseId
          type:
            - string
          description: ''
        - id: userId
          type:
            - string
          description: ''
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.offer'
    name: offer
    fullName: offer
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public offer: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.offerIdLength'
    name: offerIdLength
    fullName: offerIdLength
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public offerIdLength: number'
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.parse'
    name: parse
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function parse(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
      return:
        type:
          - '@azure/cosmos.ResourceId'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.partitionKeyRange'
    name: partitionKeyRange
    fullName: partitionKeyRange
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public partitionKeyRange: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.PartitionKeyRangeByte'
    name: PartitionKeyRangeByte
    fullName: PartitionKeyRangeByte
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public PartitionKeyRangeByte: number'
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.permission'
    name: permission
    fullName: permission
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public permission: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.constructor'
    name: ResourceId
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: new ResourceId()
      parameters: []
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.storedProcedure'
    name: storedProcedure
    fullName: storedProcedure
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public storedProcedure: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.StoredProcedureByte'
    name: StoredProcedureByte
    fullName: StoredProcedureByte
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public StoredProcedureByte: number'
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.toBase64String'
    name: toBase64String
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function toBase64String(buffer: Buffer)'
      parameters:
        - id: buffer
          type:
            - Buffer
          description: ''
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.toString'
    name: toString
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function toString()
      parameters: []
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.trigger'
    name: trigger
    fullName: trigger
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public trigger: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.TriggerByte'
    name: TriggerByte
    fullName: TriggerByte
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public TriggerByte: number'
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.tryParse'
    name: tryParse
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function tryParse(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
      return:
        type:
          - function
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.user'
    name: user
    fullName: user
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public user: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.userDefinedFunction'
    name: userDefinedFunction
    fullName: userDefinedFunction
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public userDefinedFunction: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.UserDefinedFunctionByte'
    name: UserDefinedFunctionByte
    fullName: UserDefinedFunctionByte
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public UserDefinedFunctionByte: number'
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.verify'
    name: verify
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verify(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
      return:
        type:
          - function
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ResourceId.verifyBool'
    name: verifyBool
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyBool(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
      return:
        type:
          - boolean
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.ResourceId'
    spec.typeScript:
      - name: ResourceId
        fullName: ResourceId
        uid: '@azure/cosmos.ResourceId'
