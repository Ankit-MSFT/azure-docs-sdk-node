### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.StoredProcedures'
    name: StoredProcedures
    fullName: StoredProcedures
    children:
      - '@azure/cosmos.StoredProcedures.container'
      - '@azure/cosmos.StoredProcedures.create'
      - '@azure/cosmos.StoredProcedures.query'
      - '@azure/cosmos.StoredProcedures.readAll'
      - '@azure/cosmos.StoredProcedures.upsert'
    langs:
      - typeScript
    type: class
    summary: >
      Operations for creating, upserting, or reading/querying all Stored
      Procedures.

      For operations to read, replace, delete, or execute a specific, existing
      stored procedure by id, see `container.storedProcedure()`.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.StoredProcedures.container'
    name: container
    fullName: container
    children: []
    langs:
      - typeScript
    type: property
    summary: 'The parent <xref:Container>.'
    syntax:
      content: 'public container: Container'
      return:
        type:
          - '@azure/cosmos.Container'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.StoredProcedures.create'
    name: create
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Create a StoredProcedure.

      Azure Cosmos DB allows stored procedures to be executed in the storage
      tier,

      directly against an item container. The script

      gets executed under ACID transactions on the primary storage partition of
      the

      specified container. For additional details,

      refer to the server-side JavaScript API documentation.
    syntax:
      content: >-
        function create(body: StoredProcedureDefinition, options?:
        RequestOptions)
      parameters:
        - id: body
          type:
            - '@azure/cosmos.StoredProcedureDefinition'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.StoredProcedureResponse>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.StoredProcedures.query'
    name: query
    children: []
    type: method
    langs:
      - typeScript
    summary: Query all Stored Procedures.
    syntax:
      content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec'
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<@azure/cosmos.StoredProcedureDefinition>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.StoredProcedures.readAll'
    name: readAll
    children: []
    type: method
    langs:
      - typeScript
    summary: Read all stored procedures.
    syntax:
      content: 'function readAll(options?: FeedOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<@azure/cosmos.StoredProcedureDefinition>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.StoredProcedures.upsert'
    name: upsert
    children: []
    type: method
    langs:
      - typeScript
    summary: >+
      Upsert a StoredProcedure.

      Azure Cosmos DB allows stored procedures to be executed in the storage
      tier,

      directly against a document container. The script

      gets executed under ACID transactions on the primary storage partition of
      the
       specified container. For additional details,
      refer to the server-side JavaScript API documentation.

    syntax:
      content: >-
        function upsert(body: StoredProcedureDefinition, options?:
        RequestOptions)
      parameters:
        - id: body
          type:
            - '@azure/cosmos.StoredProcedureDefinition'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.StoredProcedureResponse>
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.Container'
    spec.typeScript:
      - name: Container
        fullName: Container
        uid: '@azure/cosmos.Container'
  - uid: '@azure/cosmos.StoredProcedureDefinition'
    spec.typeScript:
      - name: StoredProcedureDefinition
        fullName: StoredProcedureDefinition
        uid: '@azure/cosmos.StoredProcedureDefinition'
  - uid: '@azure/cosmos.RequestOptions'
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
  - uid: Promise<@azure/cosmos.StoredProcedureResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: StoredProcedureResponse
        fullName: StoredProcedureResponse
        uid: '@azure/cosmos.StoredProcedureResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cosmos.SqlQuerySpec'
    spec.typeScript:
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
  - uid: '@azure/cosmos.FeedOptions'
    spec.typeScript:
      - name: FeedOptions
        fullName: FeedOptions
        uid: '@azure/cosmos.FeedOptions'
  - uid: '@azure/cosmos.QueryIterator<@azure/cosmos.StoredProcedureDefinition>'
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <
        fullName: <
      - name: StoredProcedureDefinition
        fullName: StoredProcedureDefinition
        uid: '@azure/cosmos.StoredProcedureDefinition'
      - name: '>'
        fullName: '>'
