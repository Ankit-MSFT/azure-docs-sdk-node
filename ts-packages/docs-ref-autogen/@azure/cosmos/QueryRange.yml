### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.QueryRange'
    name: QueryRange
    fullName: QueryRange
    children:
      - '@azure/cosmos.QueryRange.isEmpty'
      - '@azure/cosmos.QueryRange.isMaxInclusive'
      - '@azure/cosmos.QueryRange.isMinInclusive'
      - '@azure/cosmos.QueryRange.max'
      - '@azure/cosmos.QueryRange.min'
      - '@azure/cosmos.QueryRange.overlaps'
      - '@azure/cosmos.QueryRange.parseFromDict'
      - '@azure/cosmos.QueryRange.parsePartitionKeyRange'
      - '@azure/cosmos.QueryRange.constructor'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryRange.isEmpty'
    name: isEmpty
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isEmpty()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryRange.isMaxInclusive'
    name: isMaxInclusive
    fullName: isMaxInclusive
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public isMaxInclusive: boolean'
      return:
        type:
          - boolean
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryRange.isMinInclusive'
    name: isMinInclusive
    fullName: isMinInclusive
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public isMinInclusive: boolean'
      return:
        type:
          - boolean
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryRange.max'
    name: max
    fullName: max
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public max: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryRange.min'
    name: min
    fullName: min
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public min: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryRange.overlaps'
    name: overlaps
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function overlaps(other: QueryRange)'
      parameters:
        - id: other
          type:
            - '@azure/cosmos.QueryRange'
          description: ''
      return:
        type:
          - boolean
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryRange.parseFromDict'
    name: parseFromDict
    children: []
    type: method
    langs:
      - typeScript
    summary: Parse a QueryRange from a dictionary
    syntax:
      content: 'static function parseFromDict(queryRangeDict: any)'
      parameters:
        - id: queryRangeDict
          type:
            - any
          description: ''
      return:
        type:
          - '@azure/cosmos.QueryRange'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryRange.parsePartitionKeyRange'
    name: parsePartitionKeyRange
    children: []
    type: method
    langs:
      - typeScript
    summary: Parse a QueryRange from a partitionKeyRange
    syntax:
      content: 'static function parsePartitionKeyRange(partitionKeyRange: any)'
      parameters:
        - id: partitionKeyRange
          type:
            - any
          description: ''
      return:
        type:
          - '@azure/cosmos.QueryRange'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryRange.constructor'
    name: QueryRange
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Represents a QueryRange.
    syntax:
      content: >-
        new QueryRange(rangeMin: string, rangeMax: string, isMinInclusive:
        boolean, isMaxInclusive: boolean)
      parameters:
        - id: rangeMin
          type:
            - string
          description: max
        - id: rangeMax
          type:
            - string
          description: ''
        - id: isMinInclusive
          type:
            - boolean
          description: isMinInclusive
        - id: isMaxInclusive
          type:
            - boolean
          description: isMaxInclusive
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.QueryRange'
    spec.typeScript:
      - name: QueryRange
        fullName: QueryRange
        uid: '@azure/cosmos.QueryRange'
