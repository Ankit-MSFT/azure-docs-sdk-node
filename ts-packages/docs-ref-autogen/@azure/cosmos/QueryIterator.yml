### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.QueryIterator'
    name: QueryIterator
    fullName: QueryIterator
    children:
      - '@azure/cosmos.QueryIterator.current'
      - '@azure/cosmos.QueryIterator.executeNext'
      - '@azure/cosmos.QueryIterator.forEach'
      - '@azure/cosmos.QueryIterator.hasMoreResults'
      - '@azure/cosmos.QueryIterator.nextItem'
      - '@azure/cosmos.QueryIterator.constructor'
      - '@azure/cosmos.QueryIterator.reset'
      - '@azure/cosmos.QueryIterator.toArray'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryIterator.current'
    name: current
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the current element on the QueryIterator.
    syntax:
      content: 'function current(callback?: QueryIteratorCallback)'
      parameters:
        - id: callback
          type:
            - '@azure/cosmos.QueryIteratorCallback'
          description: |
            Function to execute for the current element. \
            the function takes two parameters error, element.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
  - uid: '@azure/cosmos.QueryIterator.executeNext'
    name: executeNext
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the next batch of the feed and pass them as an array to a
      function
    syntax:
      content: 'function executeNext(callback?: QueryIteratorCallback)'
      parameters:
        - id: callback
          type:
            - '@azure/cosmos.QueryIteratorCallback'
          description: >
            Function execute on the feed response, takes two parameters error,
            resourcesList
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
  - uid: '@azure/cosmos.QueryIterator.forEach'
    name: forEach
    children: []
    type: method
    langs:
      - typeScript
    summary: Execute a provided function once per feed element.
    syntax:
      content: 'function forEach(callback: QueryIteratorCallback)'
      parameters:
        - id: callback
          type:
            - '@azure/cosmos.QueryIteratorCallback'
          description: >
            Function to execute for each element. \

            the function takes two parameters error, element.

            Note: the last element the callback will be called on will be
            undefined.

            If the callback explicitly returned false, the loop gets stopped.
  - uid: '@azure/cosmos.QueryIterator.hasMoreResults'
    name: hasMoreResults
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function hasMoreResults()
      parameters: []
      return:
        type:
          - boolean
    deprecated:
      content: >-
        Instead check if callback(undefined, undefined) is invoked by
        nextItem(callback) or current(callback)


        Determine if there are still remaining resources to processs based on
        the value of the continuation token or the\

        elements remaining on the current batch in the QueryIterator.
  - uid: '@azure/cosmos.QueryIterator.nextItem'
    name: nextItem
    children: []
    type: method
    langs:
      - typeScript
    summary: Execute a provided function on the next element in the QueryIterator.
    syntax:
      content: 'function nextItem(callback?: QueryIteratorCallback)'
      parameters:
        - id: callback
          type:
            - '@azure/cosmos.QueryIteratorCallback'
          description: |
            Function to execute for each element. \
            the function takes two parameters error, element.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
  - uid: '@azure/cosmos.QueryIterator.constructor'
    name: QueryIterator
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Represents a QueryIterator Object, an implmenetation of feed or query
      response that enables \

      traversal and iterating over the response

      in the Azure Cosmos DB database service.
    syntax:
      content: >-
        new QueryIterator(documentclient: DocumentClient, query: SqlQuerySpec |
        string, options: any, fetchFunctions: FetchFunctionCallback |
        FetchFunctionCallback[], resourceLink?: string | string[])
      parameters:
        - id: documentclient
          type:
            - '@azure/cosmos.DocumentClient'
          description: The documentclient object.
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec | string'
          description: A SQL query.
        - id: options
          type:
            - any
          description: Represents the feed options.
        - id: fetchFunctions
          type:
            - >-
              @azure/cosmos.FetchFunctionCallback |
              @azure/cosmos.FetchFunctionCallback[]
          description: |-
            A function to retrieve each page of data. \
            An array of functions may be used to query more than one partition.
        - id: resourceLink
          type:
            - 'string | string[]'
          description: ''
          optional: true
  - uid: '@azure/cosmos.QueryIterator.reset'
    name: reset
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Reset the QueryIterator to the beginning and clear all the resources
      inside it
    syntax:
      content: function reset()
      parameters: []
  - uid: '@azure/cosmos.QueryIterator.toArray'
    name: toArray
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve all the elements of the feed and pass them as an array to a
      function
    syntax:
      content: 'function toArray(callback?: QueryIteratorCallback)'
      parameters:
        - id: callback
          type:
            - '@azure/cosmos.QueryIteratorCallback'
          description: >
            Function execute on the feed response, takes two parameters error,
            resourcesList
          optional: true
      return:
        type:
          - 'Promise<@azure/cosmos.Response<any[]>>'
references:
  - uid: '@azure/cosmos.DocumentClient'
    spec.typeScript:
      - name: DocumentClient
        fullName: DocumentClient
        uid: '@azure/cosmos.DocumentClient'
  - uid: '@azure/cosmos.SqlQuerySpec | string'
    spec.typeScript:
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
      - name: ' | string'
        fullName: ' | string'
  - uid: >-
      @azure/cosmos.FetchFunctionCallback |
      @azure/cosmos.FetchFunctionCallback[]
    spec.typeScript:
      - name: FetchFunctionCallback
        fullName: FetchFunctionCallback
        uid: '@azure/cosmos.FetchFunctionCallback'
      - name: ' | '
        fullName: ' | '
      - name: FetchFunctionCallback
        fullName: FetchFunctionCallback
        uid: '@azure/cosmos.FetchFunctionCallback'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/cosmos.QueryIteratorCallback'
    spec.typeScript:
      - name: QueryIteratorCallback
        fullName: QueryIteratorCallback
        uid: '@azure/cosmos.QueryIteratorCallback'
  - uid: Promise<@azure/cosmos.Response<any>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Response
        fullName: Response
        uid: '@azure/cosmos.Response'
      - name: <any>>
        fullName: <any>>
  - uid: 'Promise<@azure/cosmos.Response<any[]>>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Response
        fullName: Response
        uid: '@azure/cosmos.Response'
      - name: '<any[]>>'
        fullName: '<any[]>>'
