### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.Base'
    name: Base
    fullName: Base
    children:
      - '@azure/cosmos.Base.extend'
      - '@azure/cosmos.Base.generateGuidId'
      - '@azure/cosmos.Base.getAttachmentIdFromMediaId'
      - '@azure/cosmos.Base.getCollectionLink'
      - '@azure/cosmos.Base.getDatabaseLink'
      - '@azure/cosmos.Base.getHeaders'
      - '@azure/cosmos.Base.getHexaDigit'
      - '@azure/cosmos.Base.isLinkNameBased'
      - '@azure/cosmos.Base.jsonStringifyAndEscapeNonASCII'
      - '@azure/cosmos.Base.map'
      - '@azure/cosmos.Base.parseLink'
      - '@azure/cosmos.Base.parsePath'
      - '@azure/cosmos.Base.ResponseOrCallback'
      - '@azure/cosmos.Base.ThrowOrCallback'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Base.extend'
    name: extend
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function extend(arg0: any, arg1: any)'
      parameters:
        - id: arg0
          type:
            - any
          description: ''
        - id: arg1
          type:
            - any
          description: ''
      return:
        type:
          - any
  - uid: '@azure/cosmos.Base.generateGuidId'
    name: generateGuidId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: static function generateGuidId()
      parameters: []
      return:
        type:
          - string
  - uid: '@azure/cosmos.Base.getAttachmentIdFromMediaId'
    name: getAttachmentIdFromMediaId
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function getAttachmentIdFromMediaId(mediaId: string)'
      parameters:
        - id: mediaId
          type:
            - string
          description: ''
      return:
        type:
          - string
  - uid: '@azure/cosmos.Base.getCollectionLink'
    name: getCollectionLink
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function getCollectionLink(link: string)'
      parameters:
        - id: link
          type:
            - string
          description: ''
      return:
        type:
          - string
  - uid: '@azure/cosmos.Base.getDatabaseLink'
    name: getDatabaseLink
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function getDatabaseLink(link: string)'
      parameters:
        - id: link
          type:
            - string
          description: ''
      return:
        type:
          - string
  - uid: '@azure/cosmos.Base.getHeaders'
    name: getHeaders
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        static function getHeaders(documentClient: DocumentClientBase,
        defaultHeaders: IHeaders, verb: string, path: string, resourceId:
        string, resourceType: string, options: RequestOptions | FeedOptions |
        MediaOptions, partitionKeyRangeId?: string)
      parameters:
        - id: documentClient
          type:
            - '@azure/cosmos.DocumentClientBase'
          description: ''
        - id: defaultHeaders
          type:
            - '@azure/cosmos.IHeaders'
          description: ''
        - id: verb
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: resourceId
          type:
            - string
          description: ''
        - id: resourceType
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              @azure/cosmos.RequestOptions | @azure/cosmos.FeedOptions |
              @azure/cosmos.MediaOptions
          description: ''
        - id: partitionKeyRangeId
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.IHeaders>
  - uid: '@azure/cosmos.Base.getHexaDigit'
    name: getHexaDigit
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: static function getHexaDigit()
      parameters: []
      return:
        type:
          - string
  - uid: '@azure/cosmos.Base.isLinkNameBased'
    name: isLinkNameBased
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function isLinkNameBased(link: string)'
      parameters:
        - id: link
          type:
            - string
          description: ''
      return:
        type:
          - boolean
  - uid: '@azure/cosmos.Base.jsonStringifyAndEscapeNonASCII'
    name: jsonStringifyAndEscapeNonASCII
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function jsonStringifyAndEscapeNonASCII(arg: any)'
      parameters:
        - id: arg
          type:
            - any
          description: ''
      return:
        type:
          - string
  - uid: '@azure/cosmos.Base.map'
    name: map
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function map(arg0: any[], arg1: any)'
      parameters:
        - id: arg0
          type:
            - 'any[]'
          description: ''
        - id: arg1
          type:
            - any
          description: ''
      return:
        type:
          - 'any[]'
  - uid: '@azure/cosmos.Base.parseLink'
    name: parseLink
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function parseLink(resourcePath: string)'
      parameters:
        - id: resourcePath
          type:
            - string
          description: ''
      return:
        type:
          - function
  - uid: '@azure/cosmos.Base.parsePath'
    name: parsePath
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function parsePath(path: string)'
      parameters:
        - id: path
          type:
            - string
          description: ''
      return:
        type:
          - 'any[]'
  - uid: '@azure/cosmos.Base.ResponseOrCallback'
    name: ResponseOrCallback
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        static function ResponseOrCallback(callback: ResponseCallback<any>,
        value: Response<any>)
      parameters:
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: ''
        - id: value
          type:
            - '@azure/cosmos.Response<any>'
          description: ''
      return:
        type:
          - '@azure/cosmos.Response<any>'
  - uid: '@azure/cosmos.Base.ThrowOrCallback'
    name: ThrowOrCallback
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        static function ThrowOrCallback(callback: ResponseCallback<any>, err:
        any)
      parameters:
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: ''
        - id: err
          type:
            - any
          description: ''
references:
  - uid: '@azure/cosmos.ResponseCallback<any>'
    spec.typeScript:
      - name: ResponseCallback
        fullName: ResponseCallback
        uid: '@azure/cosmos.ResponseCallback'
      - name: <any>
        fullName: <any>
  - uid: '@azure/cosmos.Response<any>'
    spec.typeScript:
      - name: Response
        fullName: Response
        uid: '@azure/cosmos.Response'
      - name: <any>
        fullName: <any>
  - uid: '@azure/cosmos.DocumentClientBase'
    spec.typeScript:
      - name: DocumentClientBase
        fullName: DocumentClientBase
        uid: '@azure/cosmos.DocumentClientBase'
  - uid: '@azure/cosmos.IHeaders'
    spec.typeScript:
      - name: IHeaders
        fullName: IHeaders
        uid: '@azure/cosmos.IHeaders'
  - uid: >-
      @azure/cosmos.RequestOptions | @azure/cosmos.FeedOptions |
      @azure/cosmos.MediaOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
      - name: ' | '
        fullName: ' | '
      - name: FeedOptions
        fullName: FeedOptions
        uid: '@azure/cosmos.FeedOptions'
      - name: ' | '
        fullName: ' | '
      - name: MediaOptions
        fullName: MediaOptions
        uid: '@azure/cosmos.MediaOptions'
  - uid: Promise<@azure/cosmos.IHeaders>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: IHeaders
        fullName: IHeaders
        uid: '@azure/cosmos.IHeaders'
      - name: '>'
        fullName: '>'
