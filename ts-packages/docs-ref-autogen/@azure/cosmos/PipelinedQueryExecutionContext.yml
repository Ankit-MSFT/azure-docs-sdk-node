### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.PipelinedQueryExecutionContext'
    name: PipelinedQueryExecutionContext
    fullName: PipelinedQueryExecutionContext
    children:
      - '@azure/cosmos.PipelinedQueryExecutionContext.current'
      - '@azure/cosmos.PipelinedQueryExecutionContext.fetchMore'
      - '@azure/cosmos.PipelinedQueryExecutionContext.hasMoreResults'
      - '@azure/cosmos.PipelinedQueryExecutionContext.nextItem'
      - '@azure/cosmos.PipelinedQueryExecutionContext.constructor'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.PipelinedQueryExecutionContext.current'
    name: current
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function current()
      parameters: []
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.PipelinedQueryExecutionContext.fetchMore'
    name: fetchMore
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function fetchMore()
      parameters: []
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.PipelinedQueryExecutionContext.hasMoreResults'
    name: hasMoreResults
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function hasMoreResults()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.PipelinedQueryExecutionContext.nextItem'
    name: nextItem
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function nextItem()
      parameters: []
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.PipelinedQueryExecutionContext.constructor'
    name: PipelinedQueryExecutionContext
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Provides the PipelinedQueryExecutionContext. It piplelines top and orderby
      execution context if necessary
    syntax:
      content: >-
        new PipelinedQueryExecutionContext(documentclient: DocumentClient,
        collectionLink: string, query: any, options: any,
        partitionedQueryExecutionInfo: PartitionedQueryExecutionContextInfo)
      parameters:
        - id: documentclient
          type:
            - '@azure/cosmos.DocumentClient'
          description: The documentclient object.
        - id: collectionLink
          type:
            - string
          description: ''
        - id: query
          type:
            - any
          description: A SQL query.
        - id: options
          type:
            - any
          description: Represents the feed options.
        - id: partitionedQueryExecutionInfo
          type:
            - '@azure/cosmos.PartitionedQueryExecutionContextInfo'
          description: ''
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.DocumentClient'
    spec.typeScript:
      - name: DocumentClient
        fullName: DocumentClient
        uid: '@azure/cosmos.DocumentClient'
  - uid: '@azure/cosmos.PartitionedQueryExecutionContextInfo'
    spec.typeScript:
      - name: PartitionedQueryExecutionContextInfo
        fullName: PartitionedQueryExecutionContextInfo
        uid: '@azure/cosmos.PartitionedQueryExecutionContextInfo'
  - uid: Promise<@azure/cosmos.Response<any>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Response
        fullName: Response
        uid: '@azure/cosmos.Response'
      - name: <any>>
        fullName: <any>>
