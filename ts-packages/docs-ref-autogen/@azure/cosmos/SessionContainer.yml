### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.SessionContainer'
    name: SessionContainer
    fullName: SessionContainer
    children:
      - '@azure/cosmos.SessionContainer.clearToken'
      - '@azure/cosmos.SessionContainer.collectionResourceIdToSessionTokens'
      - '@azure/cosmos.SessionContainer.compareAndSetToken'
      - '@azure/cosmos.SessionContainer.getCombinedSessionToken'
      - '@azure/cosmos.SessionContainer.getHostName'
      - '@azure/cosmos.SessionContainer.getPartitionKeyRangeIdToTokenMap'
      - '@azure/cosmos.SessionContainer.getPartitionKeyRangeIdToTokenMapPrivate'
      - '@azure/cosmos.SessionContainer.isReadingFromMaster'
      - '@azure/cosmos.SessionContainer.resolveGlobalSessionToken'
      - '@azure/cosmos.SessionContainer.resolveGlobalSessionTokenPrivate'
      - '@azure/cosmos.SessionContainer.constructor'
      - '@azure/cosmos.SessionContainer.setSesisonTokenPrivate'
      - '@azure/cosmos.SessionContainer.setSessionToken'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.SessionContainer.clearToken'
    name: clearToken
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function clearToken(request: any)'
      parameters:
        - id: request
          type:
            - any
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.SessionContainer.collectionResourceIdToSessionTokens'
    name: collectionResourceIdToSessionTokens
    fullName: collectionResourceIdToSessionTokens
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public collectionResourceIdToSessionTokens: function'
      return:
        type:
          - function
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.SessionContainer.compareAndSetToken'
    name: compareAndSetToken
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function compareAndSetToken(newToken: string, oldTokens: function)'
      parameters:
        - id: newToken
          type:
            - string
          description: ''
        - id: oldTokens
          type:
            - function
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.SessionContainer.getCombinedSessionToken'
    name: getCombinedSessionToken
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getCombinedSessionToken(tokens: function)'
      parameters:
        - id: tokens
          type:
            - function
          description: ''
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.SessionContainer.getHostName'
    name: getHostName
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getHostName()
      parameters: []
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.SessionContainer.getPartitionKeyRangeIdToTokenMap'
    name: getPartitionKeyRangeIdToTokenMap
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getPartitionKeyRangeIdToTokenMap(request: any)'
      parameters:
        - id: request
          type:
            - any
          description: ''
      return:
        type:
          - any
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.SessionContainer.getPartitionKeyRangeIdToTokenMapPrivate'
    name: getPartitionKeyRangeIdToTokenMapPrivate
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPartitionKeyRangeIdToTokenMapPrivate(isNameBased: boolean,
        rId: string, resourceAddress: string)
      parameters:
        - id: isNameBased
          type:
            - boolean
          description: ''
        - id: rId
          type:
            - string
          description: ''
        - id: resourceAddress
          type:
            - string
          description: ''
      return:
        type:
          - any
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.SessionContainer.isReadingFromMaster'
    name: isReadingFromMaster
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function isReadingFromMaster(resourceType: string, operationType:
        string)
      parameters:
        - id: resourceType
          type:
            - string
          description: ''
        - id: operationType
          type:
            - string
          description: ''
      return:
        type:
          - boolean
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.SessionContainer.resolveGlobalSessionToken'
    name: resolveGlobalSessionToken
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function resolveGlobalSessionToken(request: any)'
      parameters:
        - id: request
          type:
            - any
          description: ''
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.SessionContainer.resolveGlobalSessionTokenPrivate'
    name: resolveGlobalSessionTokenPrivate
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resolveGlobalSessionTokenPrivate(isNameBased: boolean, rId:
        string, resourceAddress: string)
      parameters:
        - id: isNameBased
          type:
            - boolean
          description: ''
        - id: rId
          type:
            - string
          description: ''
        - id: resourceAddress
          type:
            - string
          description: ''
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.SessionContainer.constructor'
    name: SessionContainer
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new SessionContainer(hostname?: string,
        collectionNameToCollectionResourceId: function,
        collectionResourceIdToSessionTokens: function)
      parameters:
        - id: hostname
          type:
            - string
          description: ''
          optional: true
        - id: collectionNameToCollectionResourceId
          type:
            - function
          description: ''
        - id: collectionResourceIdToSessionTokens
          type:
            - function
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.SessionContainer.setSesisonTokenPrivate'
    name: setSesisonTokenPrivate
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setSesisonTokenPrivate(collectionRid: string, collectionName:
        string, sessionToken: string)
      parameters:
        - id: collectionRid
          type:
            - string
          description: ''
        - id: collectionName
          type:
            - string
          description: ''
        - id: sessionToken
          type:
            - string
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.SessionContainer.setSessionToken'
    name: setSessionToken
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setSessionToken(request: any, reqHeaders: IHeaders, resHeaders:
        IHeaders)
      parameters:
        - id: request
          type:
            - any
          description: ''
        - id: reqHeaders
          type:
            - '@azure/cosmos.IHeaders'
          description: ''
        - id: resHeaders
          type:
            - '@azure/cosmos.IHeaders'
          description: ''
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.IHeaders'
    spec.typeScript:
      - name: IHeaders
        fullName: IHeaders
        uid: '@azure/cosmos.IHeaders'
