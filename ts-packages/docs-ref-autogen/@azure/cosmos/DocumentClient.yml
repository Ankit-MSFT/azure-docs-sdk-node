### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.DocumentClient'
    name: DocumentClient
    fullName: DocumentClient
    children:
      - '@azure/cosmos.DocumentClient.applySessionToken'
      - '@azure/cosmos.DocumentClient.captureSessionToken'
      - '@azure/cosmos.DocumentClient.clearSessionToken'
      - '@azure/cosmos.DocumentClient.create'
      - '@azure/cosmos.DocumentClient.createAttachment'
      - '@azure/cosmos.DocumentClient.createAttachmentAndUploadMedia'
      - '@azure/cosmos.DocumentClient.createCollection'
      - '@azure/cosmos.DocumentClient.createDatabase'
      - '@azure/cosmos.DocumentClient.createDocument'
      - '@azure/cosmos.DocumentClient.createDocumentPrivate'
      - '@azure/cosmos.DocumentClient.createPermission'
      - '@azure/cosmos.DocumentClient.createStoredProcedure'
      - '@azure/cosmos.DocumentClient.createTrigger'
      - '@azure/cosmos.DocumentClient.createUser'
      - '@azure/cosmos.DocumentClient.createUserDefinedFunction'
      - '@azure/cosmos.DocumentClient.deleteAttachment'
      - '@azure/cosmos.DocumentClient.deleteCollection'
      - '@azure/cosmos.DocumentClient.deleteConflict'
      - '@azure/cosmos.DocumentClient.deleteDatabase'
      - '@azure/cosmos.DocumentClient.deleteDocument'
      - '@azure/cosmos.DocumentClient.deletePermission'
      - '@azure/cosmos.DocumentClient.deleteResource'
      - '@azure/cosmos.DocumentClient.deleteStoredProcedure'
      - '@azure/cosmos.DocumentClient.deleteTrigger'
      - '@azure/cosmos.DocumentClient.deleteUser'
      - '@azure/cosmos.DocumentClient.deleteUserDefinedFunction'
      - '@azure/cosmos.DocumentClient.constructor'
      - '@azure/cosmos.DocumentClient.executeStoredProcedure'
      - '@azure/cosmos.DocumentClient.extractPartitionKey'
      - '@azure/cosmos.DocumentClient.getIdFromLink'
      - '@azure/cosmos.DocumentClient.getPartitionKeyDefinition'
      - '@azure/cosmos.DocumentClient.getPathFromLink'
      - '@azure/cosmos.DocumentClient.getReadEndpoint'
      - '@azure/cosmos.DocumentClient.getSessionParams'
      - '@azure/cosmos.DocumentClient.getSessionToken'
      - '@azure/cosmos.DocumentClient.getWriteEndpoint'
      - '@azure/cosmos.DocumentClient.isPartitionResolveFunctionDefined'
      - '@azure/cosmos.DocumentClient.isPartitionResolverValid'
      - '@azure/cosmos.DocumentClient.isResourceValid'
      - '@azure/cosmos.DocumentClient.queryAttachments'
      - '@azure/cosmos.DocumentClient.queryCollections'
      - '@azure/cosmos.DocumentClient.queryConflicts'
      - '@azure/cosmos.DocumentClient.queryDatabases'
      - '@azure/cosmos.DocumentClient.queryDocuments'
      - '@azure/cosmos.DocumentClient.queryDocumentsPrivate'
      - '@azure/cosmos.DocumentClient.queryFeed'
      - '@azure/cosmos.DocumentClient.queryOffers'
      - '@azure/cosmos.DocumentClient.queryPartitionKeyRanges'
      - '@azure/cosmos.DocumentClient.queryPermissions'
      - '@azure/cosmos.DocumentClient.queryStoredProcedures'
      - '@azure/cosmos.DocumentClient.queryTriggers'
      - '@azure/cosmos.DocumentClient.queryUserDefinedFunctions'
      - '@azure/cosmos.DocumentClient.queryUsers'
      - '@azure/cosmos.DocumentClient.read'
      - '@azure/cosmos.DocumentClient.readAttachment'
      - '@azure/cosmos.DocumentClient.readAttachments'
      - '@azure/cosmos.DocumentClient.readCollection'
      - '@azure/cosmos.DocumentClient.readCollections'
      - '@azure/cosmos.DocumentClient.readConflict'
      - '@azure/cosmos.DocumentClient.readConflicts'
      - '@azure/cosmos.DocumentClient.readDatabase'
      - '@azure/cosmos.DocumentClient.readDatabases'
      - '@azure/cosmos.DocumentClient.readDocument'
      - '@azure/cosmos.DocumentClient.readDocuments'
      - '@azure/cosmos.DocumentClient.readMedia'
      - '@azure/cosmos.DocumentClient.readOffer'
      - '@azure/cosmos.DocumentClient.readOffers'
      - '@azure/cosmos.DocumentClient.readPartitionKeyRanges'
      - '@azure/cosmos.DocumentClient.readPermission'
      - '@azure/cosmos.DocumentClient.readPermissions'
      - '@azure/cosmos.DocumentClient.readStoredProcedure'
      - '@azure/cosmos.DocumentClient.readStoredProcedures'
      - '@azure/cosmos.DocumentClient.readTrigger'
      - '@azure/cosmos.DocumentClient.readTriggers'
      - '@azure/cosmos.DocumentClient.readUser'
      - '@azure/cosmos.DocumentClient.readUserDefinedFunction'
      - '@azure/cosmos.DocumentClient.readUserDefinedFunctions'
      - '@azure/cosmos.DocumentClient.readUsers'
      - '@azure/cosmos.DocumentClient.replace'
      - '@azure/cosmos.DocumentClient.replaceAttachment'
      - '@azure/cosmos.DocumentClient.replaceCollection'
      - '@azure/cosmos.DocumentClient.replaceDocument'
      - '@azure/cosmos.DocumentClient.replaceOffer'
      - '@azure/cosmos.DocumentClient.replacePermission'
      - '@azure/cosmos.DocumentClient.replaceStoredProcedure'
      - '@azure/cosmos.DocumentClient.replaceTrigger'
      - '@azure/cosmos.DocumentClient.replaceUser'
      - '@azure/cosmos.DocumentClient.replaceUserDefinedFunction'
      - '@azure/cosmos.DocumentClient.resolveCollectionLinkForCreate'
      - '@azure/cosmos.DocumentClient.setIsUpsertHeader'
      - '@azure/cosmos.DocumentClient.updateMedia'
      - '@azure/cosmos.DocumentClient.upsert'
      - '@azure/cosmos.DocumentClient.upsertAttachment'
      - '@azure/cosmos.DocumentClient.upsertAttachmentAndUploadMedia'
      - '@azure/cosmos.DocumentClient.upsertDocument'
      - '@azure/cosmos.DocumentClient.upsertPermission'
      - '@azure/cosmos.DocumentClient.upsertStoredProcedure'
      - '@azure/cosmos.DocumentClient.upsertTrigger'
      - '@azure/cosmos.DocumentClient.upsertUser'
      - '@azure/cosmos.DocumentClient.upsertUserDefinedFunction'
      - '@azure/cosmos.DocumentClient.urlConnection'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/cosmos.DocumentClientBase'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.applySessionToken'
    name: applySessionToken
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function applySessionToken(path: string, reqHeaders: IHeaders)'
      parameters:
        - id: path
          type:
            - string
          description: ''
        - id: reqHeaders
          type:
            - '@azure/cosmos.IHeaders'
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.captureSessionToken'
    name: captureSessionToken
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function captureSessionToken(path: string, opType: string, reqHeaders:
        IHeaders, resHeaders: IHeaders)
      parameters:
        - id: path
          type:
            - string
          description: ''
        - id: opType
          type:
            - string
          description: ''
        - id: reqHeaders
          type:
            - '@azure/cosmos.IHeaders'
          description: ''
        - id: resHeaders
          type:
            - '@azure/cosmos.IHeaders'
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.clearSessionToken'
    name: clearSessionToken
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function clearSessionToken(path: string)'
      parameters:
        - id: path
          type:
            - string
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.create'
    name: create
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function create<T>(body: T, path: string, type: string, id: string,
        initialHeaders: IHeaders, options?: RequestOptions, callback?:
        ResponseCallback<T>)
      parameters:
        - id: body
          type:
            - T
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: type
          type:
            - string
          description: ''
        - id: id
          type:
            - string
          description: ''
        - id: initialHeaders
          type:
            - '@azure/cosmos.IHeaders'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<T>'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<T>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.createAttachment'
    name: createAttachment
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create an attachment for the document object.

      <p>

      Each document may contain zero or more attachments. Attachments can be of
      any MIME type - \

      text, image, binary data. <br>

      These are stored externally in Azure Blob storage. Attachments are
      automatically \

      deleted when the parent document is deleted.

      </P>
    syntax:
      content: >-
        function createAttachment(documentLink: string, body: any, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: body
          type:
            - any
          description: >-
            The metadata the defines the attachment media like media, \

            contentType. It can include any other properties as part of the
            metedata.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: The request options.
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.createAttachmentAndUploadMedia'
    name: createAttachmentAndUploadMedia
    children: []
    type: method
    langs:
      - typeScript
    summary: Create an attachment for the document object.
    syntax:
      content: >-
        function createAttachmentAndUploadMedia(documentLink: string,
        readableStream: Readable, options?: MediaOptions, callback?:
        ResponseCallback<any>)
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: readableStream
          type:
            - Readable
          description: >-
            the stream that represents the media itself that needs to be
            uploaded.
        - id: options
          type:
            - '@azure/cosmos.MediaOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.createCollection'
    name: createCollection
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a collection.

      <p>

      A collection is a named logical container for documents. <br>

      A database may contain zero or more named collections and each collection
      consists of \

      zero or more JSON documents. <br>

      Being schema-free, the documents in a collection do not need to share the
      same structure or fields. <br>

      Since collections are application resources, they can be authorized using
      either the \

      master key or resource keys. <br>

      </p>
    syntax:
      content: >-
        function createCollection(databaseLink: string, body: any, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: body
          type:
            - any
          description: Represents the body of the collection.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.createDatabase'
    name: createDatabase
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Send a request for creating a database.

      <p>
       A database manages users, permissions and a set of collections.  <br>
       Each Azure Cosmos DB Database Account is able to support multiple independent named databases,\
       with the database being the logical container for data. <br>
       Each Database consists of one or more collections, each of which in turn contain one or more \
       documents. Since databases are an an administrative resource, the Service Master Key will be \
      required in order to access and successfully complete any action using the
      User APIs. <br>

      </p>
    syntax:
      content: >-
        function createDatabase(body: object, options?: RequestOptions,
        callback?: ResponseCallback<any>)
      parameters:
        - id: body
          type:
            - object
          description: A json object that represents The database to be created.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.createDocument'
    name: createDocument
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a document.

      <p>

      There is no set schema for JSON documents. They may contain any number of
      custom properties as \

      well as an optional list of attachments. <br>

      A Document is an application resource and can be authorized using the
      master key or resource keys

      </p>
    syntax:
      content: >-
        function createDocument(documentsFeedOrDatabaseLink: string, body: any,
        options?: RequestOptions, callback?: ResponseCallback<Document>)
      parameters:
        - id: documentsFeedOrDatabaseLink
          type:
            - string
          description: |-
            \
            The collection link or database link if using a partition resolver
        - id: body
          type:
            - any
          description: >-
            \

            Represents the body of the document. Can contain any number of user
            defined properties.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<@azure/cosmos.Document>'
          description: |
            \
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<@azure/cosmos.Document>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.createDocumentPrivate'
    name: createDocumentPrivate
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createDocumentPrivate(collectionLink: string, body: any,
        options?: RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: collectionLink
          type:
            - string
          description: ''
        - id: body
          type:
            - any
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.createPermission'
    name: createPermission
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a permission.

      <p> A permission represents a per-User Permission to access a specific
      resource \

      e.g. Document or Collection.  </p>
    syntax:
      content: >-
        function createPermission(userLink: string, body: any, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: body
          type:
            - any
          description: Represents the body of the permission.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request. Promise won't return response.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.createStoredProcedure'
    name: createStoredProcedure
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a StoredProcedure.

      <p>

      Azure Cosmos DB allows stored procedures to be executed in the storage
      tier, \

      directly against a document collection. The script <br>

      gets executed under ACID transactions on the primary storage partition of
      the \

      specified collection. For additional details, <br>

      refer to the server-side JavaScript API documentation.

      </p>
    syntax:
      content: >-
        function createStoredProcedure(collectionLink: string, sproc: any,
        options?: RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: sproc
          type:
            - any
          description: Represents the body of the stored procedure.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.createTrigger'
    name: createTrigger
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a trigger.

      <p>

      Azure Cosmos DB supports pre and post triggers defined in JavaScript to be
      executed \

      on creates, updates and deletes. <br>

      For additional details, refer to the server-side JavaScript API
      documentation.

      </p>
    syntax:
      content: >-
        function createTrigger(collectionLink: string, trigger: any, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: trigger
          type:
            - any
          description: Represents the body of the trigger.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.createUser'
    name: createUser
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a database user.
    syntax:
      content: >-
        function createUser(databaseLink: string, body: any, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: body
          type:
            - any
          description: Represents the body of the user.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.createUserDefinedFunction'
    name: createUserDefinedFunction
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a UserDefinedFunction.

      <p>

      Azure Cosmos DB supports JavaScript UDFs which can be used inside queries,
      stored procedures and triggers. <br>

      For additional details, refer to the server-side JavaScript API
      documentation.

      </p>
    syntax:
      content: >-
        function createUserDefinedFunction(collectionLink: string, udf: any,
        options?: RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: udf
          type:
            - any
          description: Represents the body of the userDefinedFunction.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.deleteAttachment'
    name: deleteAttachment
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the attachment object.
    syntax:
      content: >-
        function deleteAttachment(attachmentLink: string, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: attachmentLink
          type:
            - string
          description: The self-link of the attachment.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.deleteCollection'
    name: deleteCollection
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the collection object.
    syntax:
      content: >-
        function deleteCollection(collectionLink: string, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.deleteConflict'
    name: deleteConflict
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the conflict object.
    syntax:
      content: >-
        function deleteConflict(conflictLink: string, options?: RequestOptions,
        callback?: ResponseCallback<any>)
      parameters:
        - id: conflictLink
          type:
            - string
          description: The self-link of the conflict.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.deleteDatabase'
    name: deleteDatabase
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the database object.
    syntax:
      content: >-
        function deleteDatabase(databaseLink: string, options?: RequestOptions,
        callback?: ResponseCallback<any>)
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.deleteDocument'
    name: deleteDocument
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the document object.
    syntax:
      content: >-
        function deleteDocument(documentLink: string, options?: RequestOptions,
        callback?: ResponseCallback<any>)
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.deletePermission'
    name: deletePermission
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the permission object.
    syntax:
      content: >-
        function deletePermission(permissionLink: string, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: permissionLink
          type:
            - string
          description: The self-link of the permission.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.deleteResource'
    name: deleteResource
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteResource(path: string, type: string, id: string,
        initialHeaders: IHeaders, options?: RequestOptions, callback?:
        ResponseCallback<any>)
      parameters:
        - id: path
          type:
            - string
          description: ''
        - id: type
          type:
            - string
          description: ''
        - id: id
          type:
            - string
          description: ''
        - id: initialHeaders
          type:
            - '@azure/cosmos.IHeaders'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.deleteStoredProcedure'
    name: deleteStoredProcedure
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the StoredProcedure object.
    syntax:
      content: >-
        function deleteStoredProcedure(sprocLink: string, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: sprocLink
          type:
            - string
          description: The self-link of the stored procedure.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.deleteTrigger'
    name: deleteTrigger
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the trigger object.
    syntax:
      content: >-
        function deleteTrigger(triggerLink: string, options?: RequestOptions,
        callback?: ResponseCallback<any>)
      parameters:
        - id: triggerLink
          type:
            - string
          description: The self-link of the trigger.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.deleteUser'
    name: deleteUser
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the user object.
    syntax:
      content: >-
        function deleteUser(userLink: string, options?: RequestOptions,
        callback?: ResponseCallback<any>)
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.deleteUserDefinedFunction'
    name: deleteUserDefinedFunction
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the UserDefinedFunction object.
    syntax:
      content: >-
        function deleteUserDefinedFunction(udfLink: string, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: udfLink
          type:
            - string
          description: The self-link of the user defined function.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.constructor'
    name: DocumentClient
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Provides a client-side logical representation of the Azure Cosmos DB
      database account.

      This client is used to configure and execute requests in the Azure Cosmos
      DB database service.
    syntax:
      content: >-
        new DocumentClient(urlConnection: string, auth: any, connectionPolicy?:
        ConnectionPolicy, consistencyLevel?: ConsistencyLevel)
      parameters:
        - id: urlConnection
          type:
            - string
          description: The service endpoint to use to create the client.
        - id: auth
          type:
            - any
          description: |-
            An object that is used for authenticating requests \
            and must contains one of the options
        - id: connectionPolicy
          type:
            - '@azure/cosmos.ConnectionPolicy'
          description: ''
          optional: true
        - id: consistencyLevel
          type:
            - '@azure/cosmos.ConsistencyLevel'
          description: ''
          optional: true
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.executeStoredProcedure'
    name: executeStoredProcedure
    children: []
    type: method
    langs:
      - typeScript
    summary: Execute the StoredProcedure represented by the object with partition key.
    syntax:
      content: >-
        function executeStoredProcedure(sprocLink: string, params?: any[],
        options?: RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: sprocLink
          type:
            - string
          description: The self-link of the stored procedure.
        - id: params
          type:
            - 'any[]'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.extractPartitionKey'
    name: extractPartitionKey
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function extractPartitionKey(document: any, partitionKeyDefinition: any)'
      parameters:
        - id: document
          type:
            - any
          description: ''
        - id: partitionKeyDefinition
          type:
            - any
          description: ''
      return:
        type:
          - any
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.getIdFromLink'
    name: getIdFromLink
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getIdFromLink(resourceLink: string, isNameBased: boolean)'
      parameters:
        - id: resourceLink
          type:
            - string
          description: ''
        - id: isNameBased
          type:
            - boolean
          description: ''
      return:
        type:
          - any
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.getPartitionKeyDefinition'
    name: getPartitionKeyDefinition
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the partition key definition first by looking into the cache
      otherwise by reading the collection.
    syntax:
      content: >-
        function getPartitionKeyDefinition(collectionLink: string, callback?:
        ResponseCallback<any>)
      parameters:
        - id: collectionLink
          type:
            - string
          description: Link to the collection whose partition key needs to be extracted.
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: >
            \

            The arguments to the callback are(in order): error,
            partitionKeyDefinition, response object and response headers
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.getPathFromLink'
    name: getPathFromLink
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getPathFromLink(resourceLink: string, resourceType: string,
        isNameBased: boolean)
      parameters:
        - id: resourceLink
          type:
            - string
          description: ''
        - id: resourceType
          type:
            - string
          description: ''
        - id: isNameBased
          type:
            - boolean
          description: ''
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.getReadEndpoint'
    name: getReadEndpoint
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the curent read endpoint for a geo-replicated database account.
    syntax:
      content: 'function getReadEndpoint(callback?: (readEndPoint: string) => void)'
      parameters:
        - id: callback
          type:
            - '(readEndPoint: string) => void'
          description: |
            The callback function which takes endpoint(string) as an argument.
          optional: true
      return:
        type:
          - void | Promise<string>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.getSessionParams'
    name: getSessionParams
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getSessionParams(resourceLink: string)'
      parameters:
        - id: resourceLink
          type:
            - string
          description: ''
      return:
        type:
          - function
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.getSessionToken'
    name: getSessionToken
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the SessionToken for a given collectionLink
    syntax:
      content: 'function getSessionToken(collectionLink: string)'
      parameters:
        - id: collectionLink
          type:
            - string
          description: |
            The link of the collection for which the session token is needed
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.getWriteEndpoint'
    name: getWriteEndpoint
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the curent write endpoint for a geo-replicated database account.
    syntax:
      content: 'function getWriteEndpoint(callback?: (writeEndPoint: string) => void)'
      parameters:
        - id: callback
          type:
            - '(writeEndPoint: string) => void'
          description: |
            The callback function which takes endpoint(string) as an argument.
          optional: true
      return:
        type:
          - Promise<string>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.isPartitionResolveFunctionDefined'
    name: isPartitionResolveFunctionDefined
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function isPartitionResolveFunctionDefined(partionResolver: any,
        functionName: string)
      parameters:
        - id: partionResolver
          type:
            - any
          description: ''
        - id: functionName
          type:
            - string
          description: ''
      return:
        type:
          - function | function
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.isPartitionResolverValid'
    name: isPartitionResolverValid
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isPartitionResolverValid(partionResolver: any)'
      parameters:
        - id: partionResolver
          type:
            - any
          description: ''
      return:
        type:
          - function | function
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.isResourceValid'
    name: isResourceValid
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isResourceValid(resource: any, err: any)'
      parameters:
        - id: resource
          type:
            - any
          description: ''
        - id: err
          type:
            - any
          description: ''
      return:
        type:
          - boolean
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryAttachments'
    name: queryAttachments
    children: []
    type: method
    langs:
      - typeScript
    summary: Query the attachments for the document.
    syntax:
      content: >-
        function queryAttachments(documentLink: string, query: string |
        SqlQuerySpec, options?: FeedOptions)
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: A SQL query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryCollections'
    name: queryCollections
    children: []
    type: method
    langs:
      - typeScript
    summary: Query the collections for the database.
    syntax:
      content: >-
        function queryCollections(databaseLink: string, query: string |
        SqlQuerySpec, options?: FeedOptions)
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: A SQL query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryConflicts'
    name: queryConflicts
    children: []
    type: method
    langs:
      - typeScript
    summary: Query the conflicts for the collection.
    syntax:
      content: >-
        function queryConflicts(collectionLink: string, query: string |
        SqlQuerySpec, options?: FeedOptions)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: A SQL query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryDatabases'
    name: queryDatabases
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists all databases that satisfy a query.
    syntax:
      content: >-
        function queryDatabases(query: SqlQuerySpec | string, options?:
        FeedOptions)
      parameters:
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec | string'
          description: A SQL query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryDocuments'
    name: queryDocuments
    children: []
    type: method
    langs:
      - typeScript
    summary: Query the documents for the collection.
    syntax:
      content: >-
        function queryDocuments(documentsFeedOrDatabaseLink: string, query?:
        string | SqlQuerySpec, options?: FeedOptions)
      parameters:
        - id: documentsFeedOrDatabaseLink
          type:
            - string
          description: |-
            -\
            The collection link or database link if using a partition resolver
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: A SQL query.
          optional: true
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryDocumentsPrivate'
    name: queryDocumentsPrivate
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function queryDocumentsPrivate(collectionLinks: string[], query: string
        | SqlQuerySpec, options?: FeedOptions)
      parameters:
        - id: collectionLinks
          type:
            - 'string[]'
          description: ''
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: ''
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryFeed'
    name: queryFeed
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function queryFeed(documentclient: DocumentClient, path: string, type:
        string, id: string, resultFn: (result: any) => any, createFn: (parent:
        DocumentClient, body: any) => any, query: SqlQuerySpec | string,
        options: FeedOptions, partitionKeyRangeId?: string)
      parameters:
        - id: documentclient
          type:
            - '@azure/cosmos.DocumentClient'
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: type
          type:
            - string
          description: ''
        - id: id
          type:
            - string
          description: ''
        - id: resultFn
          type:
            - '(result: any) => any'
          description: ''
        - id: createFn
          type:
            - '(parent: DocumentClient, body: any) => any'
          description: ''
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec | string'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
        - id: partitionKeyRangeId
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryOffers'
    name: queryOffers
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists all offers that satisfy a query.
    syntax:
      content: >-
        function queryOffers(query: string | SqlQuerySpec, options?:
        FeedOptions)
      parameters:
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: A SQL query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryPartitionKeyRanges'
    name: queryPartitionKeyRanges
    children: []
    type: method
    langs:
      - typeScript
    summary: Query the partition key ranges
    syntax:
      content: >-
        function queryPartitionKeyRanges(collectionLink: string, query: string |
        SqlQuerySpec, options?: FeedOptions)
      parameters:
        - id: collectionLink
          type:
            - string
          description: ''
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: A SQL query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryPermissions'
    name: queryPermissions
    children: []
    type: method
    langs:
      - typeScript
    summary: Query the permission for the user.
    syntax:
      content: >-
        function queryPermissions(userLink: string, query: string |
        SqlQuerySpec, options?: FeedOptions)
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: A SQL query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryStoredProcedures'
    name: queryStoredProcedures
    children: []
    type: method
    langs:
      - typeScript
    summary: Query the storedProcedures for the collection.
    syntax:
      content: >-
        function queryStoredProcedures(collectionLink: string, query: string |
        SqlQuerySpec, options?: FeedOptions)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: A SQL query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryTriggers'
    name: queryTriggers
    children: []
    type: method
    langs:
      - typeScript
    summary: Query the triggers for the collection.
    syntax:
      content: >-
        function queryTriggers(collectionLink: string, query: string |
        SqlQuerySpec, options?: FeedOptions)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: A SQL query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryUserDefinedFunctions'
    name: queryUserDefinedFunctions
    children: []
    type: method
    langs:
      - typeScript
    summary: Query the user defined functions for the collection.
    syntax:
      content: >-
        function queryUserDefinedFunctions(collectionLink: string, query: string
        | SqlQuerySpec, options?: FeedOptions)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: A SQL query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.queryUsers'
    name: queryUsers
    children: []
    type: method
    langs:
      - typeScript
    summary: Query the users for the database.
    syntax:
      content: >-
        function queryUsers(databaseLink: string, query: string | SqlQuerySpec,
        options?: FeedOptions)
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: query
          type:
            - string | @azure/cosmos.SqlQuerySpec
          description: A SQL query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.read'
    name: read
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function read<T>(path: string, type: string, id: string, initialHeaders:
        IHeaders, options?: RequestOptions)
      parameters:
        - id: path
          type:
            - string
          description: ''
        - id: type
          type:
            - string
          description: ''
        - id: id
          type:
            - string
          description: ''
        - id: initialHeaders
          type:
            - '@azure/cosmos.IHeaders'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<T>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readAttachment'
    name: readAttachment
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads an Attachment object.
    syntax:
      content: >-
        function readAttachment(attachmentLink: string, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: attachmentLink
          type:
            - string
          description: The self-link of the attachment.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readAttachments'
    name: readAttachments
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all attachments for this document.
    syntax:
      content: 'function readAttachments(documentLink: string, options?: FeedOptions)'
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readCollection'
    name: readCollection
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads a collection.
    syntax:
      content: >-
        function readCollection(collectionLink: string, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readCollections'
    name: readCollections
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all collections in this database.
    syntax:
      content: 'function readCollections(databaseLink: string, options?: FeedOptions)'
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readConflict'
    name: readConflict
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads a conflict.
    syntax:
      content: >-
        function readConflict(conflictLink: string, options?: RequestOptions,
        callback?: ResponseCallback<any>)
      parameters:
        - id: conflictLink
          type:
            - string
          description: The self-link of the conflict.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readConflicts'
    name: readConflicts
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all conflicts in this collection.
    syntax:
      content: 'function readConflicts(collectionLink: string, options?: FeedOptions)'
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readDatabase'
    name: readDatabase
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads a database.
    syntax:
      content: >-
        function readDatabase(databaseLink: string, options?: RequestOptions,
        callback?: ResponseCallback<any>)
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readDatabases'
    name: readDatabases
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists all databases.
    syntax:
      content: 'function readDatabases(options?: FeedOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readDocument'
    name: readDocument
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads a document.
    syntax:
      content: >-
        function readDocument(documentLink: string, options?: RequestOptions,
        callback?: ResponseCallback<Document>)
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<@azure/cosmos.Document>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<@azure/cosmos.Document>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readDocuments'
    name: readDocuments
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all documents in this collection.
    syntax:
      content: 'function readDocuments(collectionLink: string, options?: FeedOptions)'
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readMedia'
    name: readMedia
    children: []
    type: method
    langs:
      - typeScript
    summary: Read the media for the attachment object.
    syntax:
      content: 'function readMedia(mediaLink: string, callback?: ResponseCallback<any>)'
      parameters:
        - id: mediaLink
          type:
            - string
          description: The media link of the media in the attachment.
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: >
            -

            The callback for the request, the result parameter can be a buffer
            or a stream
                                                depending on the value of <xref:MediaReadMode>.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readOffer'
    name: readOffer
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads an offer.
    syntax:
      content: 'function readOffer(offerLink: string, callback?: ResponseCallback<any>)'
      parameters:
        - id: offerLink
          type:
            - string
          description: The self-link of the offer.
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readOffers'
    name: readOffers
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists all offers.
    syntax:
      content: 'function readOffers(options?: FeedOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readPartitionKeyRanges'
    name: readPartitionKeyRanges
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all Partition key Ranges in this collection.
    syntax:
      content: >-
        function readPartitionKeyRanges(collectionLink: string, options?:
        FeedOptions)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readPermission'
    name: readPermission
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads a permission.
    syntax:
      content: >-
        function readPermission(permissionLink: string, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: permissionLink
          type:
            - string
          description: The self-link of the permission.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readPermissions'
    name: readPermissions
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all permissions for this user.
    syntax:
      content: 'function readPermissions(userLink: string, options?: FeedOptions)'
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readStoredProcedure'
    name: readStoredProcedure
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads a StoredProcedure object.
    syntax:
      content: >-
        function readStoredProcedure(sprocLink: string, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: sprocLink
          type:
            - string
          description: The self-link of the stored procedure.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readStoredProcedures'
    name: readStoredProcedures
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all StoredProcedures in this collection.
    syntax:
      content: >-
        function readStoredProcedures(collectionLink: string, options?:
        FeedOptions)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readTrigger'
    name: readTrigger
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads a trigger object.
    syntax:
      content: >-
        function readTrigger(triggerLink: string, options?: RequestOptions,
        callback?: ResponseCallback<any>)
      parameters:
        - id: triggerLink
          type:
            - string
          description: The self-link of the trigger.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readTriggers'
    name: readTriggers
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all triggers in this collection.
    syntax:
      content: 'function readTriggers(collectionLink: string, options?: FeedOptions)'
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readUser'
    name: readUser
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads a user.
    syntax:
      content: >-
        function readUser(userLink: string, options?: RequestOptions, callback?:
        ResponseCallback<any>)
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readUserDefinedFunction'
    name: readUserDefinedFunction
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads a udf object.
    syntax:
      content: >-
        function readUserDefinedFunction(udfLink: string, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: udfLink
          type:
            - string
          description: The self-link of the user defined function.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readUserDefinedFunctions'
    name: readUserDefinedFunctions
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all UserDefinedFunctions in this collection.
    syntax:
      content: >-
        function readUserDefinedFunctions(collectionLink: string, options?:
        FeedOptions)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.readUsers'
    name: readUsers
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all users in this database.
    syntax:
      content: 'function readUsers(databaseLink: string, options?: FeedOptions)'
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.replace'
    name: replace
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function replace<T>(resource: string, path: string, type: string, id:
        string, initialHeaders: IHeaders, options?: RequestOptions, callback?:
        ResponseCallback<T>)
      parameters:
        - id: resource
          type:
            - string
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: type
          type:
            - string
          description: ''
        - id: id
          type:
            - string
          description: ''
        - id: initialHeaders
          type:
            - '@azure/cosmos.IHeaders'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<T>'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<T>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.replaceAttachment'
    name: replaceAttachment
    children: []
    type: method
    langs:
      - typeScript
    summary: Replace the attachment object.
    syntax:
      content: >-
        function replaceAttachment(attachmentLink: string, attachment: any,
        options?: RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: attachmentLink
          type:
            - string
          description: The self-link of the attachment.
        - id: attachment
          type:
            - any
          description: Represent the new attachment body.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.replaceCollection'
    name: replaceCollection
    children: []
    type: method
    langs:
      - typeScript
    summary: Replace the document collection.
    syntax:
      content: >-
        function replaceCollection(collectionLink: string, collection: any,
        options?: RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the document collection.
        - id: collection
          type:
            - any
          description: Represent the new document collection body.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.replaceDocument'
    name: replaceDocument
    children: []
    type: method
    langs:
      - typeScript
    summary: Replace the document object.
    syntax:
      content: >-
        function replaceDocument(documentLink: string, newDocument: any,
        options?: RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: newDocument
          type:
            - any
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.replaceOffer'
    name: replaceOffer
    children: []
    type: method
    langs:
      - typeScript
    summary: Replace the offer object.
    syntax:
      content: >-
        function replaceOffer(offerLink: string, offer: any, callback?:
        ResponseCallback<any>)
      parameters:
        - id: offerLink
          type:
            - string
          description: The self-link of the offer.
        - id: offer
          type:
            - any
          description: Represent the new offer body.
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.replacePermission'
    name: replacePermission
    children: []
    type: method
    langs:
      - typeScript
    summary: Replace the permission object.
    syntax:
      content: >-
        function replacePermission(permissionLink: string, permission: any,
        options?: RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: permissionLink
          type:
            - string
          description: The self-link of the permission.
        - id: permission
          type:
            - any
          description: Represent the new permission body.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.replaceStoredProcedure'
    name: replaceStoredProcedure
    children: []
    type: method
    langs:
      - typeScript
    summary: Replace the StoredProcedure object.
    syntax:
      content: >-
        function replaceStoredProcedure(sprocLink: string, sproc: any, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: sprocLink
          type:
            - string
          description: The self-link of the stored procedure.
        - id: sproc
          type:
            - any
          description: Represent the new sproc body.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.replaceTrigger'
    name: replaceTrigger
    children: []
    type: method
    langs:
      - typeScript
    summary: Replace the trigger object.
    syntax:
      content: >-
        function replaceTrigger(triggerLink: string, trigger: any, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: triggerLink
          type:
            - string
          description: The self-link of the trigger.
        - id: trigger
          type:
            - any
          description: Represent the new trigger body.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.replaceUser'
    name: replaceUser
    children: []
    type: method
    langs:
      - typeScript
    summary: Replace the user object.
    syntax:
      content: >-
        function replaceUser(userLink: string, user: any, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: user
          type:
            - any
          description: Represent the new user body.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.replaceUserDefinedFunction'
    name: replaceUserDefinedFunction
    children: []
    type: method
    langs:
      - typeScript
    summary: Replace the UserDefinedFunction object.
    syntax:
      content: >-
        function replaceUserDefinedFunction(udfLink: string, udf: any, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: udfLink
          type:
            - string
          description: The self-link of the user defined function.
        - id: udf
          type:
            - any
          description: Represent the new udf body.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.resolveCollectionLinkForCreate'
    name: resolveCollectionLinkForCreate
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function resolveCollectionLinkForCreate(partitionResolver: any,
        document: Document)
      parameters:
        - id: partitionResolver
          type:
            - any
          description: ''
        - id: document
          type:
            - '@azure/cosmos.Document'
          description: ''
      return:
        type:
          - any
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.setIsUpsertHeader'
    name: setIsUpsertHeader
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setIsUpsertHeader(headers: IHeaders)'
      parameters:
        - id: headers
          type:
            - '@azure/cosmos.IHeaders'
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.updateMedia'
    name: updateMedia
    children: []
    type: method
    langs:
      - typeScript
    summary: Update media for the attachment
    syntax:
      content: >-
        function updateMedia(mediaLink: string, readableStream: ReadableStream,
        options?: MediaOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: mediaLink
          type:
            - string
          description: The media link of the media in the attachment.
        - id: readableStream
          type:
            - ReadableStream
          description: >-
            The stream that represents the media itself that needs to be
            uploaded.
        - id: options
          type:
            - '@azure/cosmos.MediaOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.upsert'
    name: upsert
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function upsert<T>(body: T, path: string, type: string, id: string,
        initialHeaders: IHeaders, options?: RequestOptions, callback?:
        ResponseCallback<T>)
      parameters:
        - id: body
          type:
            - T
          description: ''
        - id: path
          type:
            - string
          description: ''
        - id: type
          type:
            - string
          description: ''
        - id: id
          type:
            - string
          description: ''
        - id: initialHeaders
          type:
            - '@azure/cosmos.IHeaders'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<T>'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<T>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.upsertAttachment'
    name: upsertAttachment
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Upsert an attachment for the document object.
      <p>
      Each document may contain zero or more attachments.
      Attachments can be of any MIME type - text, image, binary data. <br>
      These are stored externally in Azure Blob storage.
      Attachments are automatically deleted when the parent document is deleted.
      </P>
    syntax:
      content: >-
        function upsertAttachment(documentLink: string, body: any, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: body
          type:
            - any
          description: >-
            \

            The metadata the defines the attachment media like media,
            contentType.

            It can include any other properties as part of the metedata.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: The request options.
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.upsertAttachmentAndUploadMedia'
    name: upsertAttachmentAndUploadMedia
    children: []
    type: method
    langs:
      - typeScript
    summary: Upsert an attachment for the document object.
    syntax:
      content: >-
        function upsertAttachmentAndUploadMedia(documentLink: string,
        readableStream: ReadableStream, options?: MediaOptions, callback?:
        ResponseCallback<any>)
      parameters:
        - id: documentLink
          type:
            - string
          description: The self-link of the document.
        - id: readableStream
          type:
            - ReadableStream
          description: >-
            the stream that represents the media itself that needs to be
            uploaded.
        - id: options
          type:
            - '@azure/cosmos.MediaOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.upsertDocument'
    name: upsertDocument
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Upsert a document.

      <p>

      There is no set schema for JSON documents. They may contain any number of
      custom properties as \

      well as an optional list of attachments. <br>

      A Document is an application resource and can be authorized using the
      master key or resource keys

      </p>
    syntax:
      content: >-
        function upsertDocument(documentsFeedOrDatabaseLink: string, body: any,
        options?: RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: documentsFeedOrDatabaseLink
          type:
            - string
          description: |-
            \
            The collection link or database link if using a partition resolver
        - id: body
          type:
            - any
          description: >-
            \

            Represents the body of the document. Can contain any number of user
            defined properties.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.upsertPermission'
    name: upsertPermission
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Upsert a permission.
      <p> A permission represents a per-User Permission to access a \
      specific resource e.g. Document or Collection.  </p>
    syntax:
      content: >-
        function upsertPermission(userLink: string, body: any, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: userLink
          type:
            - string
          description: The self-link of the user.
        - id: body
          type:
            - any
          description: Represents the body of the permission.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.upsertStoredProcedure'
    name: upsertStoredProcedure
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Upsert a StoredProcedure.

      <p>

      Azure Cosmos DB allows stored procedures to be executed in the storage
      tier,

      directly against a document collection. The script <br>

      gets executed under ACID transactions on the primary storage partition of
      the
       specified collection. For additional details, <br>
      refer to the server-side JavaScript API documentation.

      </p>
    syntax:
      content: >-
        function upsertStoredProcedure(collectionLink: string, sproc: any,
        options?: RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: sproc
          type:
            - any
          description: Represents the body of the stored procedure.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.upsertTrigger'
    name: upsertTrigger
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Upsert a trigger.

      <p>

      Azure Cosmos DB supports pre and post triggers defined in JavaScript to be

      executed on creates, updates and deletes. <br>

      For additional details, refer to the server-side JavaScript API
      documentation.

      </p>
    syntax:
      content: >-
        function upsertTrigger(collectionLink: string, trigger: any, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: trigger
          type:
            - any
          description: Represents the body of the trigger.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.upsertUser'
    name: upsertUser
    children: []
    type: method
    langs:
      - typeScript
    summary: Upsert a database user.
    syntax:
      content: >-
        function upsertUser(databaseLink: string, body: any, options?:
        RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: databaseLink
          type:
            - string
          description: The self-link of the database.
        - id: body
          type:
            - any
          description: Represents the body of the user.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.upsertUserDefinedFunction'
    name: upsertUserDefinedFunction
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Upsert a UserDefinedFunction.

      <p>

      Azure Cosmos DB supports JavaScript UDFs which can be used inside queries,
      stored procedures and triggers. <br>

      For additional details, refer to the server-side JavaScript API
      documentation.

      </p>
    syntax:
      content: >-
        function upsertUserDefinedFunction(collectionLink: string, udf: any,
        options?: RequestOptions, callback?: ResponseCallback<any>)
      parameters:
        - id: collectionLink
          type:
            - string
          description: The self-link of the collection.
        - id: udf
          type:
            - any
          description: Represents the body of the userDefinedFunction.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
        - id: callback
          type:
            - '@azure/cosmos.ResponseCallback<any>'
          description: |
            The callback for the request.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.DocumentClient.urlConnection'
    name: urlConnection
    fullName: urlConnection
    children: []
    langs:
      - typeScript
    type: property
    summary: The service endpoint to use to create the client.
    syntax:
      content: 'public urlConnection: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.DocumentClientBase'
    spec.typeScript:
      - name: DocumentClientBase
        fullName: DocumentClientBase
        uid: '@azure/cosmos.DocumentClientBase'
  - uid: '@azure/cosmos.ConnectionPolicy'
    spec.typeScript:
      - name: ConnectionPolicy
        fullName: ConnectionPolicy
        uid: '@azure/cosmos.ConnectionPolicy'
  - uid: '@azure/cosmos.ConsistencyLevel'
    spec.typeScript:
      - name: ConsistencyLevel
        fullName: ConsistencyLevel
        uid: '@azure/cosmos.ConsistencyLevel'
  - uid: '@azure/cosmos.IHeaders'
    spec.typeScript:
      - name: IHeaders
        fullName: IHeaders
        uid: '@azure/cosmos.IHeaders'
  - uid: '@azure/cosmos.RequestOptions'
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
  - uid: '@azure/cosmos.ResponseCallback<T>'
    spec.typeScript:
      - name: ResponseCallback
        fullName: ResponseCallback
        uid: '@azure/cosmos.ResponseCallback'
      - name: <T>
        fullName: <T>
  - uid: Promise<@azure/cosmos.Response<T>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Response
        fullName: Response
        uid: '@azure/cosmos.Response'
      - name: <T>>
        fullName: <T>>
  - uid: '@azure/cosmos.ResponseCallback<any>'
    spec.typeScript:
      - name: ResponseCallback
        fullName: ResponseCallback
        uid: '@azure/cosmos.ResponseCallback'
      - name: <any>
        fullName: <any>
  - uid: Promise<@azure/cosmos.Response<any>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Response
        fullName: Response
        uid: '@azure/cosmos.Response'
      - name: <any>>
        fullName: <any>>
  - uid: '@azure/cosmos.MediaOptions'
    spec.typeScript:
      - name: MediaOptions
        fullName: MediaOptions
        uid: '@azure/cosmos.MediaOptions'
  - uid: '@azure/cosmos.ResponseCallback<@azure/cosmos.Document>'
    spec.typeScript:
      - name: ResponseCallback
        fullName: ResponseCallback
        uid: '@azure/cosmos.ResponseCallback'
      - name: <
        fullName: <
      - name: Document
        fullName: Document
        uid: '@azure/cosmos.Document'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/cosmos.Response<@azure/cosmos.Document>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Response
        fullName: Response
        uid: '@azure/cosmos.Response'
      - name: <
        fullName: <
      - name: Document
        fullName: Document
        uid: '@azure/cosmos.Document'
      - name: '>>'
        fullName: '>>'
  - uid: string | @azure/cosmos.SqlQuerySpec
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
  - uid: '@azure/cosmos.FeedOptions'
    spec.typeScript:
      - name: FeedOptions
        fullName: FeedOptions
        uid: '@azure/cosmos.FeedOptions'
  - uid: '@azure/cosmos.QueryIterator'
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
  - uid: '@azure/cosmos.SqlQuerySpec | string'
    spec.typeScript:
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
      - name: ' | string'
        fullName: ' | string'
  - uid: '@azure/cosmos.DocumentClient'
    spec.typeScript:
      - name: DocumentClient
        fullName: DocumentClient
        uid: '@azure/cosmos.DocumentClient'
  - uid: '@azure/cosmos.Document'
    spec.typeScript:
      - name: Document
        fullName: Document
        uid: '@azure/cosmos.Document'
