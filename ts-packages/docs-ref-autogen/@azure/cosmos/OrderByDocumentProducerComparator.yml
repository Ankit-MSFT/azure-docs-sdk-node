### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.OrderByDocumentProducerComparator'
    name: OrderByDocumentProducerComparator
    fullName: OrderByDocumentProducerComparator
    children:
      - '@azure/cosmos.OrderByDocumentProducerComparator.compare'
      - '@azure/cosmos.OrderByDocumentProducerComparator.compareOrderByItem'
      - '@azure/cosmos.OrderByDocumentProducerComparator.compareValue'
      - '@azure/cosmos.OrderByDocumentProducerComparator.getOrderByItems'
      - '@azure/cosmos.OrderByDocumentProducerComparator.getType'
      - '@azure/cosmos.OrderByDocumentProducerComparator.constructor'
      - '@azure/cosmos.OrderByDocumentProducerComparator.sortOrder'
      - >-
        @azure/cosmos.OrderByDocumentProducerComparator.targetPartitionKeyRangeDocProdComparator
      - '@azure/cosmos.OrderByDocumentProducerComparator.validateOrderByItems'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.OrderByDocumentProducerComparator.compare'
    name: compare
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function compare(docProd1: DocumentProducer, docProd2: DocumentProducer)'
      parameters:
        - id: docProd1
          type:
            - '@azure/cosmos.DocumentProducer'
          description: ''
        - id: docProd2
          type:
            - '@azure/cosmos.DocumentProducer'
          description: ''
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.OrderByDocumentProducerComparator.compareOrderByItem'
    name: compareOrderByItem
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function compareOrderByItem(orderByItem1: any, orderByItem2: any)'
      parameters:
        - id: orderByItem1
          type:
            - any
          description: ''
        - id: orderByItem2
          type:
            - any
          description: ''
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.OrderByDocumentProducerComparator.compareValue'
    name: compareValue
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function compareValue(item1: any, type1: string, item2: any, type2:
        string)
      parameters:
        - id: item1
          type:
            - any
          description: ''
        - id: type1
          type:
            - string
          description: ''
        - id: item2
          type:
            - any
          description: ''
        - id: type2
          type:
            - string
          description: ''
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.OrderByDocumentProducerComparator.getOrderByItems'
    name: getOrderByItems
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getOrderByItems(res: any)'
      parameters:
        - id: res
          type:
            - any
          description: ''
      return:
        type:
          - any
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.OrderByDocumentProducerComparator.getType'
    name: getType
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getType(orderByItem: any)'
      parameters:
        - id: orderByItem
          type:
            - any
          description: ''
      return:
        type:
          - >-
            "string" | "number" | "boolean" | "symbol" | "undefined" | "object"
            | "function" | "NoValue"
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.OrderByDocumentProducerComparator.constructor'
    name: OrderByDocumentProducerComparator
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new OrderByDocumentProducerComparator(sortOrder: string[])'
      parameters:
        - id: sortOrder
          type:
            - 'string[]'
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.OrderByDocumentProducerComparator.sortOrder'
    name: sortOrder
    fullName: sortOrder
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public sortOrder: string[]'
      return:
        type:
          - 'string[]'
    package: '@azure/cosmos'
  - uid: >-
      @azure/cosmos.OrderByDocumentProducerComparator.targetPartitionKeyRangeDocProdComparator
    name: targetPartitionKeyRangeDocProdComparator
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function targetPartitionKeyRangeDocProdComparator(docProd1:
        DocumentProducer, docProd2: DocumentProducer)
      parameters:
        - id: docProd1
          type:
            - '@azure/cosmos.DocumentProducer'
          description: ''
        - id: docProd2
          type:
            - '@azure/cosmos.DocumentProducer'
          description: ''
      return:
        type:
          - 1 | -1 | 0
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.OrderByDocumentProducerComparator.validateOrderByItems'
    name: validateOrderByItems
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function validateOrderByItems(res1: string[], res2: string[])'
      parameters:
        - id: res1
          type:
            - 'string[]'
          description: ''
        - id: res2
          type:
            - 'string[]'
          description: ''
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.DocumentProducer'
    spec.typeScript:
      - name: DocumentProducer
        fullName: DocumentProducer
        uid: '@azure/cosmos.DocumentProducer'
