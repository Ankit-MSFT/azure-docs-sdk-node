### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.ProxyQueryExecutionContext'
    name: ProxyQueryExecutionContext
    fullName: ProxyQueryExecutionContext
    children:
      - '@azure/cosmos.ProxyQueryExecutionContext.current'
      - '@azure/cosmos.ProxyQueryExecutionContext.fetchMore'
      - '@azure/cosmos.ProxyQueryExecutionContext.hasMoreResults'
      - '@azure/cosmos.ProxyQueryExecutionContext.nextItem'
      - '@azure/cosmos.ProxyQueryExecutionContext.constructor'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ProxyQueryExecutionContext.current'
    name: current
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the current element on the ProxyQueryExecutionContext.
    syntax:
      content: function current()
      parameters: []
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ProxyQueryExecutionContext.fetchMore'
    name: fetchMore
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function fetchMore()
      parameters: []
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ProxyQueryExecutionContext.hasMoreResults'
    name: hasMoreResults
    children: []
    type: method
    langs:
      - typeScript
    summary: Determine if there are still remaining resources to process.
    syntax:
      content: function hasMoreResults()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ProxyQueryExecutionContext.nextItem'
    name: nextItem
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Execute a provided function on the next element in the
      ProxyQueryExecutionContext.
    syntax:
      content: function nextItem()
      parameters: []
      return:
        type:
          - Promise<@azure/cosmos.Response<any>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.ProxyQueryExecutionContext.constructor'
    name: ProxyQueryExecutionContext
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Represents a ProxyQueryExecutionContext Object. If the query is a
      partitioned query which can be \

      parallelized it switches the execution context.
    syntax:
      content: >-
        new ProxyQueryExecutionContext(documentclient: DocumentClient, query:
        SqlQuerySpec | string, options: any, fetchFunctions:
        FetchFunctionCallback | FetchFunctionCallback[], resourceLink: string |
        string[])
      parameters:
        - id: documentclient
          type:
            - '@azure/cosmos.DocumentClient'
          description: The documentclient object.
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec | string'
          description: A SQL query.
        - id: options
          type:
            - any
          description: Represents the feed options.
        - id: fetchFunctions
          type:
            - >-
              @azure/cosmos.FetchFunctionCallback |
              @azure/cosmos.FetchFunctionCallback[]
          description: |-
            A function to retrieve each page of data. \
            An array of functions may be used to query more than one partition.
        - id: resourceLink
          type:
            - 'string | string[]'
          description: ''
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.DocumentClient'
    spec.typeScript:
      - name: DocumentClient
        fullName: DocumentClient
        uid: '@azure/cosmos.DocumentClient'
  - uid: '@azure/cosmos.SqlQuerySpec | string'
    spec.typeScript:
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
      - name: ' | string'
        fullName: ' | string'
  - uid: >-
      @azure/cosmos.FetchFunctionCallback |
      @azure/cosmos.FetchFunctionCallback[]
    spec.typeScript:
      - name: FetchFunctionCallback
        fullName: FetchFunctionCallback
        uid: '@azure/cosmos.FetchFunctionCallback'
      - name: ' | '
        fullName: ' | '
      - name: FetchFunctionCallback
        fullName: FetchFunctionCallback
        uid: '@azure/cosmos.FetchFunctionCallback'
      - name: '[]'
        fullName: '[]'
  - uid: Promise<@azure/cosmos.Response<any>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Response
        fullName: Response
        uid: '@azure/cosmos.Response'
      - name: <any>>
        fullName: <any>>
