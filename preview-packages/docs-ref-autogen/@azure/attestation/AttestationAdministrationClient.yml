### YamlMime:TSType
name: AttestationAdministrationClient
uid: '@azure/attestation.AttestationAdministrationClient'
package: '@azure/attestation'
summary: |
  Attestation Client class.
  The AttestationClient class enables access to the Attestation related APIs:

  - getPolicy
  - setPolicy
  - resetPolicy
  - getPolicyManagementCertificates
  - addPolicyManagementCertificate
  - removePolicyManagementCertificate
fullName: AttestationAdministrationClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      AttestationAdministrationClient(TokenCredential, string,
      AttestationAdministrationClientOptions)
    uid: '@azure/attestation.AttestationAdministrationClient.constructor'
    package: '@azure/attestation'
    summary: |
      Creates an instance of AttestationAdministrationClient.
      Example usage:
      ```ts
      import { AttestationAdministrationClient } from "@azure/attestation";

      const client = new AttestationAdministrationClient(
         "<service endpoint>",
         new TokenCredential("<>")
      );
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new AttestationAdministrationClient(credentials: TokenCredential,
        instanceUrl: string, options?: AttestationAdministrationClientOptions)
      parameters:
        - id: credentials
          type: TokenCredential
          description: ''
        - id: instanceUrl
          type: string
          description: >-
            The attestation instance base URI, for example
            https://mytenant.attest.azure.net.
        - id: options
          type: >-
            <xref
            uid="@azure/attestation.AttestationAdministrationClientOptions" />
          description: |
            Used to configure the Form Recognizer client.
methods:
  - name: >-
      addPolicyManagementCertificate(string, string, string,
      AttestationAdministrationClientOperationOptions)
    uid: >-
      @azure/attestation.AttestationAdministrationClient.addPolicyManagementCertificate
    package: '@azure/attestation'
    summary: Add a new certificate chain to the set of policy management certificates.
    remarks: >-
      This API is only supported on `isolated` attestation instances.


      The signing key MUST be one of the existing attestation signing
      certificates. The

      new pemCertificate is signed using the signingKey and the service will
      validate the

      signature before allowing the addition.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addPolicyManagementCertificate(pemCertificate: string,
        privateKey: string, certificate: string, options?:
        AttestationAdministrationClientOperationOptions)
      parameters:
        - id: pemCertificate
          type: string
          description: >-
            PEM encoded certificate to add to the set of policy management
            certificates.
        - id: privateKey
          type: string
          description: Existing attestation private key used to sign the incoming request.
        - id: certificate
          type: string
          description: >-
            Existing attestation certificate used to verify the incoming
            request.
        - id: options
          type: >-
            <xref
            uid="@azure/attestation.AttestationAdministrationClientOperationOptions"
            />
          description: Options used in the call to the service.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/attestation.AttestationResponse"
          />&lt;<xref
          uid="@azure/attestation.PolicyCertificatesModificationResult"
          />&gt;&gt;
        description: >-
          An attestation response including a
          PolicyCertificatesModificationResult
  - name: >-
      getPolicy(AttestationType,
      AttestationAdministrationClientOperationOptions)
    uid: '@azure/attestation.AttestationAdministrationClient.getPolicy'
    package: '@azure/attestation'
    summary: |-
      Retrieves the attestation policy document from the server, and returns it
      to the caller.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPolicy(attestationType: AttestationType, options?:
        AttestationAdministrationClientOperationOptions)
      parameters:
        - id: attestationType
          type: <xref uid="@azure/attestation.AttestationType" />
          description: AttestationType for which to retrieve policy.
        - id: options
          type: >-
            <xref
            uid="@azure/attestation.AttestationAdministrationClientOperationOptions"
            />
          description: Pipeline and client options for the `getPolicy` call.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/attestation.AttestationResponse"
          />&lt;string&gt;&gt;
        description: |-
          `AttestationResponse<string>` - the `value` property is the
               attestation policy,  the `token` property will be the actual token
               returned by the attestation service.
  - name: >-
      getPolicyManagementCertificates(AttestationAdministrationClientOperationOptions)
    uid: >-
      @azure/attestation.AttestationAdministrationClient.getPolicyManagementCertificates
    package: '@azure/attestation'
    summary: >-
      Returns the set of policy management certificates for this attestation
      instance.
    remarks: |-
      If the attestation instance is not in `Isolated` mode, this list will
         always be empty.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPolicyManagementCertificates(options?:
        AttestationAdministrationClientOperationOptions)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/attestation.AttestationAdministrationClientOperationOptions"
            />
          description: Options for the call to the attestation service.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/attestation.AttestationResponse"
          />&lt;<xref uid="@azure/attestation.AttestationSigner" />[]&gt;&gt;
        description: AttestationResponse wrapping a list of Attestation Signers.
  - name: >-
      removePolicyManagementCertificate(string, string, string,
      AttestationAdministrationClientOperationOptions)
    uid: >-
      @azure/attestation.AttestationAdministrationClient.removePolicyManagementCertificate
    package: '@azure/attestation'
    summary: Add a new certificate chain to the set of policy management certificates.
    remarks: >-
      This API is only supported on `isolated` attestation instances.


      The signing key MUST be one of the existing attestation signing
      certificates. The

      new pemCertificate is signed using the signingKey and the service will
      validate the

      signature before allowing the addition.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function removePolicyManagementCertificate(pemCertificate: string,
        privateKey: string, certificate: string, options?:
        AttestationAdministrationClientOperationOptions)
      parameters:
        - id: pemCertificate
          type: string
          description: >-
            PEM encoded certificate to add to the set of policy management
            certificates.
        - id: privateKey
          type: string
          description: Existing attestation private key used to sign the incoming request.
        - id: certificate
          type: string
          description: >-
            Existing attestation certificate used to verify the incoming
            request.
        - id: options
          type: >-
            <xref
            uid="@azure/attestation.AttestationAdministrationClientOperationOptions"
            />
          description: Options used in the call to the service.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/attestation.AttestationResponse"
          />&lt;<xref
          uid="@azure/attestation.PolicyCertificatesModificationResult"
          />&gt;&gt;
        description: >-
          An attestation response including a
          PolicyCertificatesModificationResult
  - name: >-
      resetPolicy(AttestationType, string, string,
      AttestationAdministrationClientOperationOptions)
    uid: '@azure/attestation.AttestationAdministrationClient.resetPolicy'
    package: '@azure/attestation'
    summary: |-
      Resets the attestation policy for the specified <xref:attestationType> to
      the default value.
    remarks: >-
      Please note that if the attestation service instance is running in
      "Isolated"

      mode, the <xref:signingKey> must be one of the signing keys configured for
      the

      service instance.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function resetPolicy(attestationType: AttestationType, privateKey?:
        string, certificate?: string, options?:
        AttestationAdministrationClientOperationOptions)
      parameters:
        - id: attestationType
          type: <xref uid="@azure/attestation.AttestationType" />
          description: Attestation Type for which to set policy.
        - id: privateKey
          type: string
          description: optional private key used to sign the policy document
        - id: certificate
          type: string
          description: optional certificate used to verify the policy document.
        - id: options
          type: >-
            <xref
            uid="@azure/attestation.AttestationAdministrationClientOperationOptions"
            />
          description: call options.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/attestation.AttestationResponse"
          />&lt;<xref uid="@azure/attestation.PolicyResult" />&gt;&gt;
        description: |-
          An {@link AttestationResponse} wrapping a {@link PolicyResult}.
           Clients can use the PolicyResult to validate that the policy was actually
           reset by the attestation service.
  - name: >-
      setPolicy(AttestationType, string, string, string,
      AttestationAdministrationClientOperationOptions)
    uid: '@azure/attestation.AttestationAdministrationClient.setPolicy'
    package: '@azure/attestation'
    summary: 'Sets the attestation policy for the specified <xref:attestationType>.'
    remarks: >-
      Please note that if the attestation service instance is running in
      "Isolated"

      mode, the <xref:signingKey> must be one of the signing keys configured for
      the

      service instance.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setPolicy(attestationType: AttestationType, newPolicyDocument:
        string, privateKey?: string, certificate?: string, options?:
        AttestationAdministrationClientOperationOptions)
      parameters:
        - id: attestationType
          type: <xref uid="@azure/attestation.AttestationType" />
          description: Attestation Type for which to set policy.
        - id: newPolicyDocument
          type: string
          description: Policy document to be set.
        - id: privateKey
          type: string
          description: optional private key used to sign the policy document.
        - id: certificate
          type: string
          description: optional certificate used to verify the policy document.
        - id: options
          type: >-
            <xref
            uid="@azure/attestation.AttestationAdministrationClientOperationOptions"
            />
          description: call options.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/attestation.AttestationResponse"
          />&lt;<xref uid="@azure/attestation.PolicyResult" />&gt;&gt;
        description: |-
          An {@link AttestationResponse} wrapping a {@link PolicyResult}.
           Clients can use the PolicyResult to validate that the policy was actually
           set by the attestation service.
