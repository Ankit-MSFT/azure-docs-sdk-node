### YamlMime:UniversalReference
items:
  - uid: '@azure/event-hubs.EventHubClient'
    name: EventHubClient
    fullName: EventHubClient
    children:
      - '@azure/event-hubs.EventHubClient.close'
      - '@azure/event-hubs.EventHubClient.createConsumer'
      - '@azure/event-hubs.EventHubClient.createFromIotHubConnectionString'
      - '@azure/event-hubs.EventHubClient.createProducer'
      - '@azure/event-hubs.EventHubClient.defaultConsumerGroupName'
      - '@azure/event-hubs.EventHubClient.constructor'
      - '@azure/event-hubs.EventHubClient.constructor_1'
      - '@azure/event-hubs.EventHubClient.constructor_2'
      - '@azure/event-hubs.EventHubClient.eventHubName'
      - '@azure/event-hubs.EventHubClient.getPartitionIds'
      - '@azure/event-hubs.EventHubClient.getPartitionProperties'
      - '@azure/event-hubs.EventHubClient.getProperties'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Closes the AMQP connection to the Event Hub instance,
      returning a promise that will be resolved when disconnection is completed.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.createConsumer'
    name: 'createConsumer(string, string, EventPosition, EventHubConsumerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates an Event Hub consumer responsible for reading `EventData` from a
      specific Event Hub partition,

      in the context of a specific consumer group.

      Multiple consumers are allowed on the same partition in a consumer group.

      If there is a need to have an exclusive consumer for a partition in a
      consumer group,

      then specify the `ownerLevel` in the `options`.

      Exclusive consumers were previously referred to as "Epoch Receivers".


      Designating a consumer as exclusive may be specified in the `options` via
      `ownerLevel`.
    syntax:
      content: >-
        function createConsumer(consumerGroup: string, partitionId: string,
        eventPosition: EventPosition, options?: EventHubConsumerOptions)
      parameters:
        - id: consumerGroup
          type:
            - string
          description: >-
            The name of the consumer group this consumer is associated with.
            Events are read in the context of this group.
        - id: partitionId
          type:
            - string
          description: >-
            The identifier of the Event Hub partition from which events will be
            received.
        - id: eventPosition
          type:
            - '@azure/event-hubs.EventPosition'
          description: >-
            The position within the partition where the consumer should begin
            reading events.
        - id: options
          type:
            - '@azure/event-hubs.EventHubConsumerOptions'
          description: >-
            The set of options to apply when creating the consumer where you can
            specify retry options and ownerLevel.
          optional: true
      return:
        type:
          - '@azure/event-hubs.EventHubConsumer'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.createFromIotHubConnectionString'
    name: 'createFromIotHubConnectionString(string, EventHubClientOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates an EventHubClient from connection string.
    syntax:
      content: >-
        static function createFromIotHubConnectionString(iothubConnectionString:
        string, options?: EventHubClientOptions)
      parameters:
        - id: iothubConnectionString
          type:
            - string
          description: >-
            Connection string of the form
            'HostName=iot-host-name;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/event-hubs.EventHubClient>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.createProducer'
    name: createProducer(EventHubProducerOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates an Event Hub producer responsible for sending `EventData` to the
      Event Hub.

      If `partitionId` is specified in the `options`, all event data sent using
      the producer

      will be sent to the specified partition.

      Otherwise, they are automatically routed to an available partition by the
      Event Hubs service.

      Allowing automatic routing of partitions is recommended when:
       - The sending of events needs to be highly available.
       - The event data should be evenly distributed among all available partitions.
    syntax:
      content: 'function createProducer(options?: EventHubProducerOptions)'
      parameters:
        - id: options
          type:
            - '@azure/event-hubs.EventHubProducerOptions'
          description: >
            The set of options to apply when creating the producer where you can
            specify the id of the partition

            to which events need to be sent to, and retry options.
          optional: true
      return:
        type:
          - '@azure/event-hubs.EventHubProducer'
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.defaultConsumerGroupName'
    name: defaultConsumerGroupName
    fullName: defaultConsumerGroupName
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the default consumer group in the Event Hubs service.
    syntax:
      content: 'static defaultConsumerGroupName: string'
      return:
        type:
          - string
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.constructor'
    name: 'EventHubClient(string, EventHubClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubClient(connectionString: string, options?:
        EventHubClientOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hubs
            namespace.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: |
            A set of options to apply when configuring the client.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.constructor_1'
    name: 'EventHubClient(string, string, EventHubClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubClient(connectionString: string, eventHubPath: string,
        options?: EventHubClientOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            The connection string to use for connecting to the Event Hubs
            namespace.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: eventHubPath
          type:
            - string
          description: The path of the specific Event Hub to connect the client to.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: |
            A set of options to apply when configuring the client.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.constructor_2'
    name: 'EventHubClient(string, string, TokenCredential, EventHubClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new EventHubClient(host: string, eventHubPath: string, credential:
        TokenCredential, options?: EventHubClientOptions)
      parameters:
        - id: host
          type:
            - string
          description: >-
            The fully qualified host name for the Event Hubs namespace. This is
            likely to be similar to

            <yournamespace>.servicebus.windows.net
        - id: eventHubPath
          type:
            - string
          description: The path of the specific Event Hub to connect the client to.
        - id: credential
          type:
            - TokenCredential
          description: >-
            SharedKeyCredential object or your credential that implements the
            TokenCredential interface.
        - id: options
          type:
            - '@azure/event-hubs.EventHubClientOptions'
          description: |
            A set of options to apply when configuring the client.
          optional: true
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.eventHubName'
    name: eventHubName
    fullName: eventHubName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'eventHubName: string'
      return:
        type:
          - string
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.getPartitionIds'
    name: getPartitionIds(AbortSignalLike)
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides an array of partitionIds.
    syntax:
      content: 'function getPartitionIds(abortSignal?: AbortSignalLike)'
      parameters:
        - id: abortSignal
          type:
            - AbortSignalLike
          description: >-
            An implementation of the `AbortSignalLike` interface to signal the
            request to cancel the operation.

            For example, use the &commat;azure/abort-controller to create an
            `AbortSignal`.
          optional: true
      return:
        type:
          - Promise<Array<string>>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.getPartitionProperties'
    name: 'getPartitionProperties(string, AbortSignalLike)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides information about the specified partition.
    syntax:
      content: >-
        function getPartitionProperties(partitionId: string, abortSignal?:
        AbortSignalLike)
      parameters:
        - id: partitionId
          type:
            - string
          description: Partition ID for which partition information is required.
        - id: abortSignal
          type:
            - AbortSignalLike
          description: >-
            An implementation of the `AbortSignalLike` interface to signal the
            request to cancel the operation.

            For example, use the &commat;azure/abort-controller to create an
            `AbortSignal`.
          optional: true
      return:
        type:
          - Promise<@azure/event-hubs.PartitionProperties>
    package: '@azure/event-hubs'
  - uid: '@azure/event-hubs.EventHubClient.getProperties'
    name: getProperties(AbortSignalLike)
    children: []
    type: method
    langs:
      - typeScript
    summary: Provides the Event Hub runtime information.
    syntax:
      content: 'function getProperties(abortSignal?: AbortSignalLike)'
      parameters:
        - id: abortSignal
          type:
            - AbortSignalLike
          description: >-
            An implementation of the `AbortSignalLike` interface to signal the
            request to cancel the operation.

            For example, use the &commat;azure/abort-controller to create an
            `AbortSignal`.
          optional: true
      return:
        type:
          - Promise<@azure/event-hubs.EventHubProperties>
    package: '@azure/event-hubs'
references:
  - uid: '@azure/event-hubs.EventHubClientOptions'
    name: EventHubClientOptions
    spec.typeScript:
      - name: EventHubClientOptions
        fullName: EventHubClientOptions
        uid: '@azure/event-hubs.EventHubClientOptions'
  - uid: '@azure/event-hubs.EventPosition'
    name: EventPosition
    spec.typeScript:
      - name: EventPosition
        fullName: EventPosition
        uid: '@azure/event-hubs.EventPosition'
  - uid: '@azure/event-hubs.EventHubConsumerOptions'
    name: EventHubConsumerOptions
    spec.typeScript:
      - name: EventHubConsumerOptions
        fullName: EventHubConsumerOptions
        uid: '@azure/event-hubs.EventHubConsumerOptions'
  - uid: '@azure/event-hubs.EventHubConsumer'
    name: EventHubConsumer
    spec.typeScript:
      - name: EventHubConsumer
        fullName: EventHubConsumer
        uid: '@azure/event-hubs.EventHubConsumer'
  - uid: '@azure/event-hubs.EventHubProducerOptions'
    name: EventHubProducerOptions
    spec.typeScript:
      - name: EventHubProducerOptions
        fullName: EventHubProducerOptions
        uid: '@azure/event-hubs.EventHubProducerOptions'
  - uid: '@azure/event-hubs.EventHubProducer'
    name: EventHubProducer
    spec.typeScript:
      - name: EventHubProducer
        fullName: EventHubProducer
        uid: '@azure/event-hubs.EventHubProducer'
  - uid: Promise<@azure/event-hubs.PartitionProperties>
    name: PartitionProperties>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PartitionProperties
        fullName: PartitionProperties
        uid: '@azure/event-hubs.PartitionProperties'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/event-hubs.EventHubProperties>
    name: EventHubProperties>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventHubProperties
        fullName: EventHubProperties
        uid: '@azure/event-hubs.EventHubProperties'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/event-hubs.EventHubClient>
    name: EventHubClient>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EventHubClient
        fullName: EventHubClient
        uid: '@azure/event-hubs.EventHubClient'
      - name: '>'
        fullName: '>'
