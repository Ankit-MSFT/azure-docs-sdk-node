### YamlMime:UniversalReference
items:
  - uid: '@azure/communication-chat.ChatClient'
    name: ChatClient
    fullName: ChatClient
    children:
      - '@azure/communication-chat.ChatClient.constructor'
      - '@azure/communication-chat.ChatClient.createChatThread'
      - '@azure/communication-chat.ChatClient.deleteChatThread'
      - '@azure/communication-chat.ChatClient.getChatThread'
      - '@azure/communication-chat.ChatClient.getChatThreadClient'
      - '@azure/communication-chat.ChatClient.listChatThreads'
      - '@azure/communication-chat.ChatClient.off_2'
      - '@azure/communication-chat.ChatClient.off_1'
      - '@azure/communication-chat.ChatClient.off'
      - '@azure/communication-chat.ChatClient.off_4'
      - '@azure/communication-chat.ChatClient.off_3'
      - '@azure/communication-chat.ChatClient.on_2'
      - '@azure/communication-chat.ChatClient.on_1'
      - '@azure/communication-chat.ChatClient.on'
      - '@azure/communication-chat.ChatClient.on_4'
      - '@azure/communication-chat.ChatClient.on_3'
      - '@azure/communication-chat.ChatClient.startRealtimeNotifications'
      - '@azure/communication-chat.ChatClient.stopRealtimeNotifications'
    langs:
      - typeScript
    type: class
    summary: The client to do chat operations
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.constructor'
    name: 'ChatClient(string, CommunicationUserCredential, ChatClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of the ChatClient for a given resource and user.
    syntax:
      content: >-
        new ChatClient(url: string, credential: CommunicationUserCredential,
        options?: ChatClientOptions)
      parameters:
        - id: url
          type:
            - string
          description: The url of the Communication Services resouce.
        - id: credential
          type:
            - CommunicationUserCredential
          description: >-
            The user credential. Use AzureCommunicationUserCredential from
            @azure/communication-common to create a credential.
        - id: options
          type:
            - '@azure/communication-chat.ChatClientOptions'
          description: |
            Additional client options.
          optional: true
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.createChatThread'
    name: 'createChatThread(CreateChatThreadRequest, CreateChatThreadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a chat thread.
      Returns thread client with the id of the created thread.
    syntax:
      content: >-
        function createChatThread(request: CreateChatThreadRequest, options?:
        CreateChatThreadOptions)
      parameters:
        - id: request
          type:
            - '@azure/communication-chat.CreateChatThreadRequest'
          description: Request for creating a chat thread.
        - id: options
          type:
            - '@azure/communication-chat.CreateChatThreadOptions'
          description: |
            Operation options.
          optional: true
      return:
        type:
          - Promise<@azure/communication-chat.ChatThreadClient>
        description: ''
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.deleteChatThread'
    name: 'deleteChatThread(string, DeleteChatThreadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes a chat thread.
    syntax:
      content: >-
        function deleteChatThread(threadId: string, options?:
        DeleteChatThreadOptions)
      parameters:
        - id: threadId
          type:
            - string
          description: The ID of the thread to delete.
        - id: options
          type:
            - '@azure/communication-chat.DeleteChatThreadOptions'
          description: |
            Operation options.
          optional: true
      return:
        type:
          - Promise<@azure/communication-chat.OperationResponse>
        description: ''
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.getChatThread'
    name: 'getChatThread(string, GetChatThreadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Gets a chat thread.
      Returns the chat thread.
    syntax:
      content: 'function getChatThread(threadId: string, options?: GetChatThreadOptions)'
      parameters:
        - id: threadId
          type:
            - string
          description: The ID of the thread to get.
        - id: options
          type:
            - '@azure/communication-chat.GetChatThreadOptions'
          description: |
            Operation options.
          optional: true
      return:
        type:
          - Promise<@azure/communication-chat.GetChatThreadResponse>
        description: ''
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.getChatThreadClient'
    name: getChatThreadClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns ChatThreadClient with the specific thread id.
    syntax:
      content: 'function getChatThreadClient(threadId: string)'
      parameters:
        - id: threadId
          type:
            - string
          description: |
            Thread ID for the ChatThreadClient
      return:
        type:
          - Promise<@azure/communication-chat.ChatThreadClient>
        description: ''
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.listChatThreads'
    name: listChatThreads(ListChatThreadsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the list of chat threads of a user.
    syntax:
      content: 'function listChatThreads(options?: ListChatThreadsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/communication-chat.ListChatThreadsOptions'
          description: |
            List chat threads options.
          optional: true
      return:
        type:
          - PagedAsyncIterableIterator<@azure/communication-chat.ChatThreadInfo>
        description: ''
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.off_2'
    name: 'off("chatMessageDeleted", (e: ChatMessageDeletedEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Unsubscribe from chatMessageDeleted.
    syntax:
      content: >-
        function off(event: "chatMessageDeleted", listener: (e:
        ChatMessageDeletedEvent) => void)
      parameters:
        - id: event
          type:
            - '"chatMessageDeleted"'
          description: The ChatMessageDeletedEvent.
        - id: listener
          type:
            - '(e: ChatMessageDeletedEvent) => void'
          description: |
            The listener to handle the event.
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.off_1'
    name: 'off("chatMessageEdited", (e: ChatMessageEditedEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Unsubscribe from chatMessageEdited.
    syntax:
      content: >-
        function off(event: "chatMessageEdited", listener: (e:
        ChatMessageEditedEvent) => void)
      parameters:
        - id: event
          type:
            - '"chatMessageEdited"'
          description: The ChatMessageEditedEvent.
        - id: listener
          type:
            - '(e: ChatMessageEditedEvent) => void'
          description: |
            The listener to handle the event.
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.off'
    name: 'off("chatMessageReceived", (e: ChatMessageReceivedEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Unsubscribe from chatMessageReceived.
    syntax:
      content: >-
        function off(event: "chatMessageReceived", listener: (e:
        ChatMessageReceivedEvent) => void)
      parameters:
        - id: event
          type:
            - '"chatMessageReceived"'
          description: The ChatMessageReceivedEvent.
        - id: listener
          type:
            - '(e: ChatMessageReceivedEvent) => void'
          description: |
            The listener to handle the event.
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.off_4'
    name: 'off("readReceiptReceived", (e: ReadReceiptReceivedEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Unsubscribe from readReceiptReceived.
    syntax:
      content: >-
        function off(event: "readReceiptReceived", listener: (e:
        ReadReceiptReceivedEvent) => void)
      parameters:
        - id: event
          type:
            - '"readReceiptReceived"'
          description: The ReadReceiptReceivedEvent.
        - id: listener
          type:
            - '(e: ReadReceiptReceivedEvent) => void'
          description: |
            The listener to handle the event.
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.off_3'
    name: 'off("typingIndicatorReceived", (e: TypingIndicatorReceivedEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Unsubscribe from typingIndicatorReceived.
    syntax:
      content: >-
        function off(event: "typingIndicatorReceived", listener: (e:
        TypingIndicatorReceivedEvent) => void)
      parameters:
        - id: event
          type:
            - '"typingIndicatorReceived"'
          description: The TypingIndicatorReceivedEvent.
        - id: listener
          type:
            - '(e: TypingIndicatorReceivedEvent) => void'
          description: |
            The listener to handle the event.
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.on_2'
    name: 'on("chatMessageDeleted", (e: ChatMessageDeletedEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Subscribe function for chatMessageDeleted.
      The initial sender will also receive this event.
    syntax:
      content: >-
        function on(event: "chatMessageDeleted", listener: (e:
        ChatMessageDeletedEvent) => void)
      parameters:
        - id: event
          type:
            - '"chatMessageDeleted"'
          description: The ChatMessageDeletedEvent.
        - id: listener
          type:
            - '(e: ChatMessageDeletedEvent) => void'
          description: |
            The listener to handle the event.
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.on_1'
    name: 'on("chatMessageEdited", (e: ChatMessageEditedEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Subscribe function for chatMessageEdited.
      The initial sender will also receive this event.
    syntax:
      content: >-
        function on(event: "chatMessageEdited", listener: (e:
        ChatMessageEditedEvent) => void)
      parameters:
        - id: event
          type:
            - '"chatMessageEdited"'
          description: The ChatMessageEditedEvent.
        - id: listener
          type:
            - '(e: ChatMessageEditedEvent) => void'
          description: |
            The listener to handle the event.
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.on'
    name: 'on("chatMessageReceived", (e: ChatMessageReceivedEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Subscribe function for chatMessageReceived.

      The initial sender will also receive this event.

      You need to call startRealtimeNotifications before subscribing to any
      event.
    syntax:
      content: >-
        function on(event: "chatMessageReceived", listener: (e:
        ChatMessageReceivedEvent) => void)
      parameters:
        - id: event
          type:
            - '"chatMessageReceived"'
          description: The ChatMessageReceivedEvent.
        - id: listener
          type:
            - '(e: ChatMessageReceivedEvent) => void'
          description: |
            The listener to handle the event.
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.on_4'
    name: 'on("readReceiptReceived", (e: ReadReceiptReceivedEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Subscribe function for readReceiptReceived.
    syntax:
      content: >-
        function on(event: "readReceiptReceived", listener: (e:
        ReadReceiptReceivedEvent) => void)
      parameters:
        - id: event
          type:
            - '"readReceiptReceived"'
          description: The ReadReceiptReceivedEvent.
        - id: listener
          type:
            - '(e: ReadReceiptReceivedEvent) => void'
          description: |
            The listener to handle the event.
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.on_3'
    name: 'on("typingIndicatorReceived", (e: TypingIndicatorReceivedEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Subscribe function for typingIndicatorReceived.
      The initial sender will also receive this event.
    syntax:
      content: >-
        function on(event: "typingIndicatorReceived", listener: (e:
        TypingIndicatorReceivedEvent) => void)
      parameters:
        - id: event
          type:
            - '"typingIndicatorReceived"'
          description: The TypingIndicatorReceivedEvent.
        - id: listener
          type:
            - '(e: TypingIndicatorReceivedEvent) => void'
          description: |
            The listener to handle the event.
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.startRealtimeNotifications'
    name: startRealtimeNotifications()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Start receiving realtime notifications.
      Call this function before subscribing to any event.
    syntax:
      content: function startRealtimeNotifications()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/communication-chat'
  - uid: '@azure/communication-chat.ChatClient.stopRealtimeNotifications'
    name: stopRealtimeNotifications()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Stop receiving realtime notifications.
      This function would unsubscribe to all events.
    syntax:
      content: function stopRealtimeNotifications()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/communication-chat'
references:
  - uid: '@azure/communication-chat.ChatClientOptions'
    name: ChatClientOptions
    spec.typeScript:
      - name: ChatClientOptions
        fullName: ChatClientOptions
        uid: '@azure/communication-chat.ChatClientOptions'
  - uid: '@azure/communication-chat.CreateChatThreadRequest'
    name: CreateChatThreadRequest
    spec.typeScript:
      - name: CreateChatThreadRequest
        fullName: CreateChatThreadRequest
        uid: '@azure/communication-chat.CreateChatThreadRequest'
  - uid: '@azure/communication-chat.CreateChatThreadOptions'
    name: CreateChatThreadOptions
    spec.typeScript:
      - name: CreateChatThreadOptions
        fullName: CreateChatThreadOptions
        uid: '@azure/communication-chat.CreateChatThreadOptions'
  - uid: Promise<@azure/communication-chat.ChatThreadClient>
    name: ChatThreadClient>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ChatThreadClient
        fullName: ChatThreadClient
        uid: '@azure/communication-chat.ChatThreadClient'
      - name: '>'
        fullName: '>'
  - uid: '@azure/communication-chat.DeleteChatThreadOptions'
    name: DeleteChatThreadOptions
    spec.typeScript:
      - name: DeleteChatThreadOptions
        fullName: DeleteChatThreadOptions
        uid: '@azure/communication-chat.DeleteChatThreadOptions'
  - uid: Promise<@azure/communication-chat.OperationResponse>
    name: OperationResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: OperationResponse
        fullName: OperationResponse
        uid: '@azure/communication-chat.OperationResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/communication-chat.GetChatThreadOptions'
    name: GetChatThreadOptions
    spec.typeScript:
      - name: GetChatThreadOptions
        fullName: GetChatThreadOptions
        uid: '@azure/communication-chat.GetChatThreadOptions'
  - uid: Promise<@azure/communication-chat.GetChatThreadResponse>
    name: GetChatThreadResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GetChatThreadResponse
        fullName: GetChatThreadResponse
        uid: '@azure/communication-chat.GetChatThreadResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/communication-chat.ListChatThreadsOptions'
    name: ListChatThreadsOptions
    spec.typeScript:
      - name: ListChatThreadsOptions
        fullName: ListChatThreadsOptions
        uid: '@azure/communication-chat.ListChatThreadsOptions'
  - uid: PagedAsyncIterableIterator<@azure/communication-chat.ChatThreadInfo>
    name: ChatThreadInfo>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: ChatThreadInfo
        fullName: ChatThreadInfo
        uid: '@azure/communication-chat.ChatThreadInfo'
      - name: '>'
        fullName: '>'
