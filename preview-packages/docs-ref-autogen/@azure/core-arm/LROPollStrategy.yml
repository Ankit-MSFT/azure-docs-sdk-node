### YamlMime:UniversalReference
items:
  - uid: '@azure/core-arm.LROPollStrategy'
    name: LROPollStrategy
    fullName: LROPollStrategy
    children:
      - '@azure/core-arm.LROPollStrategy.getMostRecentResponse'
      - '@azure/core-arm.LROPollStrategy.getOperationResponse'
      - '@azure/core-arm.LROPollStrategy.getOperationStatus'
      - '@azure/core-arm.LROPollStrategy.getPollState'
      - '@azure/core-arm.LROPollStrategy.getRestError'
      - '@azure/core-arm.LROPollStrategy.isFinalStatusAcceptable'
      - '@azure/core-arm.LROPollStrategy.isFinished'
      - '@azure/core-arm.LROPollStrategy.constructor'
      - '@azure/core-arm.LROPollStrategy.pollUntilFinished'
      - '@azure/core-arm.LROPollStrategy.sendPollRequest'
    langs:
      - typeScript
    type: class
    summary: >-
      A long-running operation polling strategy base class that other polling
      strategies should extend.
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPollStrategy.getMostRecentResponse'
    name: getMostRecentResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getMostRecentResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPollStrategy.getOperationResponse'
    name: getOperationResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getOperationResponse()
      parameters: []
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPollStrategy.getOperationStatus'
    name: getOperationStatus()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getOperationStatus()
      parameters: []
      return:
        type:
          - '@azure/core-arm.LongRunningOperationStates'
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPollStrategy.getPollState'
    name: getPollState()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getPollState()
      parameters: []
      return:
        type:
          - '@azure/core-arm.LROPollState'
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPollStrategy.getRestError'
    name: getRestError()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getRestError()
      parameters: []
      return:
        type:
          - RestError
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPollStrategy.isFinalStatusAcceptable'
    name: isFinalStatusAcceptable()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isFinalStatusAcceptable()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPollStrategy.isFinished'
    name: isFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get whether or not this poll strategy's LRO is finished.
    syntax:
      content: function isFinished()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPollStrategy.constructor'
    name: 'LROPollStrategy(AzureServiceClient, LROPollState)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new LROPollStrategy(_azureServiceClient: AzureServiceClient, _pollState:
        LROPollState)
      parameters:
        - id: _azureServiceClient
          type:
            - '@azure/core-arm.AzureServiceClient'
          description: ''
        - id: _pollState
          type:
            - '@azure/core-arm.LROPollState'
          description: ''
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPollStrategy.pollUntilFinished'
    name: pollUntilFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Send poll requests that check the LRO's status until it is determined that
      the LRO is finished.
    syntax:
      content: function pollUntilFinished()
      parameters: []
      return:
        type:
          - Promise<boolean>
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPollStrategy.sendPollRequest'
    name: sendPollRequest()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Send a single poll request that checks the LRO's status and return the
      response. If the LRO is

      finished, then no request will be sent and the last response received will
      be returned.
    syntax:
      content: function sendPollRequest()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/core-arm'
references:
  - uid: '@azure/core-arm.AzureServiceClient'
    name: AzureServiceClient
    spec.typeScript:
      - name: AzureServiceClient
        fullName: AzureServiceClient
        uid: '@azure/core-arm.AzureServiceClient'
  - uid: '@azure/core-arm.LROPollState'
    name: LROPollState
    spec.typeScript:
      - name: LROPollState
        fullName: LROPollState
        uid: '@azure/core-arm.LROPollState'
  - uid: '@azure/core-arm.LongRunningOperationStates'
    name: LongRunningOperationStates
    spec.typeScript:
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/core-arm.LongRunningOperationStates'
