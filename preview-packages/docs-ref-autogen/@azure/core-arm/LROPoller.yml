### YamlMime:UniversalReference
items:
  - uid: '@azure/core-arm.LROPoller'
    name: LROPoller
    fullName: LROPoller
    children:
      - '@azure/core-arm.LROPoller.getInitialResponse'
      - '@azure/core-arm.LROPoller.getMostRecentResponse'
      - '@azure/core-arm.LROPoller.getOperationResponse'
      - '@azure/core-arm.LROPoller.getOperationStatus'
      - '@azure/core-arm.LROPoller.getPollState'
      - '@azure/core-arm.LROPoller.isFinalStatusAcceptable'
      - '@azure/core-arm.LROPoller.isFinished'
      - '@azure/core-arm.LROPoller.constructor'
      - '@azure/core-arm.LROPoller.poll'
      - '@azure/core-arm.LROPoller.pollUntilFinished'
    langs:
      - typeScript
    type: class
    summary: >-
      An HTTP operation response that provides special methods for interacting
      with LROs (long running

      operations).
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPoller.getInitialResponse'
    name: getInitialResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the first response that the service sent back when the LRO was
      initiated.
    syntax:
      content: function getInitialResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPoller.getMostRecentResponse'
    name: getMostRecentResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the most recent response that the service sent back during this LRO.
    syntax:
      content: function getMostRecentResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPoller.getOperationResponse'
    name: getOperationResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If the LRO is finished and in an acceptable state, then return the
      HttpOperationResponse. If

      the LRO is finished and not in an acceptable state, then throw the error
      that the LRO produced.

      If the LRO is not finished, then return undefined.
    syntax:
      content: function getOperationResponse()
      parameters: []
      return:
        type:
          - Promise<HttpOperationResponse | undefined>
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPoller.getOperationStatus'
    name: getOperationStatus()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the current status of the LRO.
    syntax:
      content: function getOperationStatus()
      parameters: []
      return:
        type:
          - '@azure/core-arm.LongRunningOperationStates'
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPoller.getPollState'
    name: getPollState()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get an LROPollState object that can be used to poll this LRO in a
      different context (such as on

      a different process or a different machine). If the LRO couldn't produce
      an LRO polling

      strategy, then this will return undefined.
    syntax:
      content: function getPollState()
      parameters: []
      return:
        type:
          - '@azure/core-arm.LROPollState | undefined'
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPoller.isFinalStatusAcceptable'
    name: isFinalStatusAcceptable()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get whether or not the LRO is finished and its final state is acceptable.
      If the LRO has not

      finished yet, then undefined will be returned. An "acceptable" final state
      is determined by the

      LRO strategy that the Azure service uses to perform long running
      operations.
    syntax:
      content: function isFinalStatusAcceptable()
      parameters: []
      return:
        type:
          - boolean | undefined
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPoller.isFinished'
    name: isFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get whether or not the LRO is finished.
    syntax:
      content: function isFinished()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPoller.constructor'
    name: 'LROPoller(LROPollStrategy | undefined, HttpOperationResponse)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a new HttpLongRunningOperationResponse.
    syntax:
      content: >-
        new LROPoller(_lroPollStrategy: LROPollStrategy | undefined,
        _initialResponse: HttpOperationResponse)
      parameters:
        - id: _lroPollStrategy
          type:
            - '@azure/core-arm.LROPollStrategy | undefined'
          description: |
            The LROPollStrategy that this HttpLongRunningOperationResponse will
            use to interact with the LRO.
        - id: _initialResponse
          type:
            - HttpOperationResponse
          description: ''
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPoller.poll'
    name: poll()
    children: []
    type: method
    langs:
      - typeScript
    summary: Send a single poll request and return the LRO's state.
    syntax:
      content: function poll()
      parameters: []
      return:
        type:
          - Promise<@azure/core-arm.LongRunningOperationStates>
    package: '@azure/core-arm'
  - uid: '@azure/core-arm.LROPoller.pollUntilFinished'
    name: pollUntilFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Send poll requests that check the LRO's status until it is determined that
      the LRO is finished.
    syntax:
      content: function pollUntilFinished()
      parameters: []
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/core-arm'
references:
  - uid: '@azure/core-arm.LROPollStrategy | undefined'
    name: LROPollStrategy | undefined
    spec.typeScript:
      - name: LROPollStrategy
        fullName: LROPollStrategy
        uid: '@azure/core-arm.LROPollStrategy'
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: '@azure/core-arm.LongRunningOperationStates'
    name: LongRunningOperationStates
    spec.typeScript:
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/core-arm.LongRunningOperationStates'
  - uid: '@azure/core-arm.LROPollState | undefined'
    name: LROPollState | undefined
    spec.typeScript:
      - name: LROPollState
        fullName: LROPollState
        uid: '@azure/core-arm.LROPollState'
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: Promise<@azure/core-arm.LongRunningOperationStates>
    name: LongRunningOperationStates>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/core-arm.LongRunningOperationStates'
      - name: '>'
        fullName: '>'
