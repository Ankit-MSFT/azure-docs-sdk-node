### YamlMime:UniversalReference
items:
  - uid: '@azure/data-tables.TableClient'
    name: TableClient
    fullName: TableClient
    children:
      - '@azure/data-tables.TableClient.create'
      - '@azure/data-tables.TableClient.createEntity'
      - '@azure/data-tables.TableClient.delete'
      - '@azure/data-tables.TableClient.deleteEntity'
      - '@azure/data-tables.TableClient.fromConnectionString'
      - '@azure/data-tables.TableClient.getEntity'
      - '@azure/data-tables.TableClient.listEntities'
      - '@azure/data-tables.TableClient.constructor_1'
      - '@azure/data-tables.TableClient.constructor'
      - '@azure/data-tables.TableClient.tableName'
      - '@azure/data-tables.TableClient.updateEntity'
      - '@azure/data-tables.TableClient.upsertEntity'
    langs:
      - typeScript
    type: class
    summary: |-
      A TableClient represents a Client to the Azure Tables service allowing you
      to perform operations on a single table.
    package: '@azure/data-tables'
  - uid: '@azure/data-tables.TableClient.create'
    name: create(CreateTableOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates the current table it it doesn't exist
    syntax:
      content: 'function create(options?: CreateTableOptions)'
      parameters:
        - id: options
          type:
            - '@azure/data-tables.CreateTableOptions'
          description: |
            The options parameters.
          optional: true
      return:
        type:
          - Promise<@azure/data-tables.CreateTableItemResponse>
        description: ''
    package: '@azure/data-tables'
  - uid: '@azure/data-tables.TableClient.createEntity'
    name: 'createEntity(TableEntity<T>, CreateTableEntityOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Insert entity in the table.
    syntax:
      content: >-
        function createEntity<T>(entity: TableEntity<T>, options?:
        CreateTableEntityOptions)
      parameters:
        - id: entity
          type:
            - '@azure/data-tables.TableEntity<T>'
          description: The properties for the table entity.
        - id: options
          type:
            - '@azure/data-tables.CreateTableEntityOptions'
          description: |
            The options parameters.
          optional: true
      return:
        type:
          - Promise<@azure/data-tables.CreateTableEntityResponse>
        description: ''
    package: '@azure/data-tables'
  - uid: '@azure/data-tables.TableClient.delete'
    name: delete(DeleteTableOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Permanently deletes the current table with all of its entities.
    syntax:
      content: 'function delete(options?: DeleteTableOptions)'
      parameters:
        - id: options
          type:
            - '@azure/data-tables.DeleteTableOptions'
          description: |
            The options parameters.
          optional: true
      return:
        type:
          - Promise<@azure/data-tables.DeleteTableResponse>
        description: ''
    package: '@azure/data-tables'
  - uid: '@azure/data-tables.TableClient.deleteEntity'
    name: 'deleteEntity(string, string, DeleteTableEntityOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes the specified entity in the table.
    syntax:
      content: >-
        function deleteEntity(partitionKey: string, rowKey: string, options?:
        DeleteTableEntityOptions)
      parameters:
        - id: partitionKey
          type:
            - string
          description: The partition key of the entity.
        - id: rowKey
          type:
            - string
          description: The row key of the entity.
        - id: options
          type:
            - '@azure/data-tables.DeleteTableEntityOptions'
          description: |
            The options parameters.
          optional: true
      return:
        type:
          - Promise<@azure/data-tables.DeleteTableEntityResponse>
        description: ''
    package: '@azure/data-tables'
  - uid: '@azure/data-tables.TableClient.fromConnectionString'
    name: 'fromConnectionString(string, string, TableServiceClientOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates an instance of TableClient from connection string.
    syntax:
      content: >-
        static function fromConnectionString(connectionString: string,
        tableName: string, options?: TableServiceClientOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.table.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: tableName
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/data-tables.TableServiceClientOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/data-tables.TableClient'
        description: A new TableClient from the given connection string.
    package: '@azure/data-tables'
  - uid: '@azure/data-tables.TableClient.getEntity'
    name: 'getEntity(string, string, GetTableEntityOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a single entity in the table.
    syntax:
      content: >-
        function getEntity<T>(partitionKey: string, rowKey: string, options?:
        GetTableEntityOptions)
      parameters:
        - id: partitionKey
          type:
            - string
          description: The partition key of the entity.
        - id: rowKey
          type:
            - string
          description: The row key of the entity.
        - id: options
          type:
            - '@azure/data-tables.GetTableEntityOptions'
          description: |
            The options parameters.
          optional: true
      return:
        type:
          - Promise<@azure/data-tables.GetTableEntityResponse<T>>
        description: ''
    package: '@azure/data-tables'
  - uid: '@azure/data-tables.TableClient.listEntities'
    name: listEntities(ListTableEntitiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Queries entities in a table.
    syntax:
      content: 'function listEntities<T>(options?: ListTableEntitiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/data-tables.ListTableEntitiesOptions'
          description: |
            The options parameters.
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<T,
            @azure/data-tables.ListEntitiesResponse<T>>
        description: ''
    package: '@azure/data-tables'
  - uid: '@azure/data-tables.TableClient.constructor_1'
    name: 'TableClient(string, string, TableServiceClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of TableClient.
    syntax:
      content: >-
        new TableClient(url: string, tableName: string, options?:
        TableServiceClientOptions)
      parameters:
        - id: url
          type:
            - string
          description: >-
            The URL of the service account that is the target of the desired
            operation., such as
                                "https://myaccount.table.core.windows.net".
        - id: tableName
          type:
            - string
          description: the name of the table
        - id: options
          type:
            - '@azure/data-tables.TableServiceClientOptions'
          description: >
            Optional. Options to configure the HTTP pipeline.


            Example using an account name/key:


            ```js

            const account = "<storage account name>";

            const tableName = "<table name>";

            const sharedKeyCredential = new TablesSharedKeyCredential(account,
            "<account key>");


            const tableServiceClient = new TableServiceClient(
              `https://${account}.table.core.windows.net`,
              `${tableName}`
              sharedKeyCredential
            );

            ```
          optional: true
    package: '@azure/data-tables'
  - uid: '@azure/data-tables.TableClient.constructor'
    name: >-
      TableClient(string, string, TablesSharedKeyCredential,
      TableServiceClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new instance of the TableClient class.
    syntax:
      content: >-
        new TableClient(url: string, tableName: string, credential:
        TablesSharedKeyCredential, options?: TableServiceClientOptions)
      parameters:
        - id: url
          type:
            - string
          description: >-
            The URL of the service account that is the target of the desired
            operation., such as
                                "https://myaccount.table.core.windows.net".
        - id: tableName
          type:
            - string
          description: the name of the table
        - id: credential
          type:
            - '@azure/data-tables.TablesSharedKeyCredential'
          description: >-
            TablesSharedKeyCredential used to authenticate requests. Only
            Supported for Browsers
        - id: options
          type:
            - '@azure/data-tables.TableServiceClientOptions'
          description: >
            Optional. Options to configure the HTTP pipeline.


            Example using an account name/key:


            ```js

            const account = "<storage account name>";

            const tableName = "<table name>";

            const sharedKeyCredential = new TablesSharedKeyCredential(account,
            "<account key>");


            const tableServiceClient = new TableServiceClient(
              `https://${account}.table.core.windows.net`,
              `${tableName}`
              sharedKeyCredential
            );

            ```
          optional: true
    package: '@azure/data-tables'
  - uid: '@azure/data-tables.TableClient.tableName'
    name: tableName
    fullName: tableName
    children: []
    langs:
      - typeScript
    type: property
    summary: Name of the table to perform operations on.
    syntax:
      content: 'tableName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/data-tables'
  - uid: '@azure/data-tables.TableClient.updateEntity'
    name: 'updateEntity(TableEntity<T>, UpdateMode, UpdateTableEntityOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update an entity in the table.
    syntax:
      content: >-
        function updateEntity<T>(entity: TableEntity<T>, mode: UpdateMode,
        options?: UpdateTableEntityOptions)
      parameters:
        - id: entity
          type:
            - '@azure/data-tables.TableEntity<T>'
          description: The properties of the entity to be updated.
        - id: mode
          type:
            - '@azure/data-tables.UpdateMode'
          description: |-
            The different modes for updating the entity:
                        - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.
                        - Replace: Updates an existing entity by replacing the entire entity.
        - id: options
          type:
            - '@azure/data-tables.UpdateTableEntityOptions'
          description: |
            The options parameters.
          optional: true
      return:
        type:
          - Promise<@azure/data-tables.UpdateEntityResponse>
        description: ''
    package: '@azure/data-tables'
  - uid: '@azure/data-tables.TableClient.upsertEntity'
    name: 'upsertEntity(TableEntity<T>, UpdateMode, UpsertTableEntityOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Upsert an entity in the table.
    syntax:
      content: >-
        function upsertEntity<T>(entity: TableEntity<T>, mode: UpdateMode,
        options?: UpsertTableEntityOptions)
      parameters:
        - id: entity
          type:
            - '@azure/data-tables.TableEntity<T>'
          description: The properties for the table entity.
        - id: mode
          type:
            - '@azure/data-tables.UpdateMode'
          description: |-
            The different modes for updating the entity:
                        - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.
                        - Replace: Updates an existing entity by replacing the entire entity.
        - id: options
          type:
            - '@azure/data-tables.UpsertTableEntityOptions'
          description: |
            The options parameters.
          optional: true
      return:
        type:
          - Promise<@azure/data-tables.UpsertEntityResponse>
        description: ''
    package: '@azure/data-tables'
references:
  - uid: '@azure/data-tables.TablesSharedKeyCredential'
    name: TablesSharedKeyCredential
    spec.typeScript:
      - name: TablesSharedKeyCredential
        fullName: TablesSharedKeyCredential
        uid: '@azure/data-tables.TablesSharedKeyCredential'
  - uid: '@azure/data-tables.TableServiceClientOptions'
    name: TableServiceClientOptions
    spec.typeScript:
      - name: TableServiceClientOptions
        fullName: TableServiceClientOptions
        uid: '@azure/data-tables.TableServiceClientOptions'
  - uid: '@azure/data-tables.CreateTableOptions'
    name: CreateTableOptions
    spec.typeScript:
      - name: CreateTableOptions
        fullName: CreateTableOptions
        uid: '@azure/data-tables.CreateTableOptions'
  - uid: Promise<@azure/data-tables.CreateTableItemResponse>
    name: CreateTableItemResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CreateTableItemResponse
        fullName: CreateTableItemResponse
        uid: '@azure/data-tables.CreateTableItemResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/data-tables.TableEntity<T>'
    name: TableEntity<T>
    spec.typeScript:
      - name: TableEntity
        fullName: TableEntity
        uid: '@azure/data-tables.TableEntity'
      - name: <T>
        fullName: <T>
  - uid: '@azure/data-tables.CreateTableEntityOptions'
    name: CreateTableEntityOptions
    spec.typeScript:
      - name: CreateTableEntityOptions
        fullName: CreateTableEntityOptions
        uid: '@azure/data-tables.CreateTableEntityOptions'
  - uid: Promise<@azure/data-tables.CreateTableEntityResponse>
    name: CreateTableEntityResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CreateTableEntityResponse
        fullName: CreateTableEntityResponse
        uid: '@azure/data-tables.CreateTableEntityResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/data-tables.DeleteTableOptions'
    name: DeleteTableOptions
    spec.typeScript:
      - name: DeleteTableOptions
        fullName: DeleteTableOptions
        uid: '@azure/data-tables.DeleteTableOptions'
  - uid: Promise<@azure/data-tables.DeleteTableResponse>
    name: DeleteTableResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DeleteTableResponse
        fullName: DeleteTableResponse
        uid: '@azure/data-tables.DeleteTableResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/data-tables.DeleteTableEntityOptions'
    name: DeleteTableEntityOptions
    spec.typeScript:
      - name: DeleteTableEntityOptions
        fullName: DeleteTableEntityOptions
        uid: '@azure/data-tables.DeleteTableEntityOptions'
  - uid: Promise<@azure/data-tables.DeleteTableEntityResponse>
    name: DeleteTableEntityResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DeleteTableEntityResponse
        fullName: DeleteTableEntityResponse
        uid: '@azure/data-tables.DeleteTableEntityResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/data-tables.GetTableEntityOptions'
    name: GetTableEntityOptions
    spec.typeScript:
      - name: GetTableEntityOptions
        fullName: GetTableEntityOptions
        uid: '@azure/data-tables.GetTableEntityOptions'
  - uid: Promise<@azure/data-tables.GetTableEntityResponse<T>>
    name: GetTableEntityResponse<T>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GetTableEntityResponse
        fullName: GetTableEntityResponse
        uid: '@azure/data-tables.GetTableEntityResponse'
      - name: <T>>
        fullName: <T>>
  - uid: '@azure/data-tables.ListTableEntitiesOptions'
    name: ListTableEntitiesOptions
    spec.typeScript:
      - name: ListTableEntitiesOptions
        fullName: ListTableEntitiesOptions
        uid: '@azure/data-tables.ListTableEntitiesOptions'
  - uid: 'PagedAsyncIterableIterator<T, @azure/data-tables.ListEntitiesResponse<T>>'
    name: ListEntitiesResponse<T>>
    spec.typeScript:
      - name: 'PagedAsyncIterableIterator<T, '
        fullName: 'PagedAsyncIterableIterator<T, '
      - name: ListEntitiesResponse
        fullName: ListEntitiesResponse
        uid: '@azure/data-tables.ListEntitiesResponse'
      - name: <T>>
        fullName: <T>>
  - uid: '@azure/data-tables.UpdateMode'
    name: UpdateMode
    spec.typeScript:
      - name: UpdateMode
        fullName: UpdateMode
        uid: '@azure/data-tables.UpdateMode'
  - uid: '@azure/data-tables.UpdateTableEntityOptions'
    name: UpdateTableEntityOptions
    spec.typeScript:
      - name: UpdateTableEntityOptions
        fullName: UpdateTableEntityOptions
        uid: '@azure/data-tables.UpdateTableEntityOptions'
  - uid: Promise<@azure/data-tables.UpdateEntityResponse>
    name: UpdateEntityResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: UpdateEntityResponse
        fullName: UpdateEntityResponse
        uid: '@azure/data-tables.UpdateEntityResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/data-tables.UpsertTableEntityOptions'
    name: UpsertTableEntityOptions
    spec.typeScript:
      - name: UpsertTableEntityOptions
        fullName: UpsertTableEntityOptions
        uid: '@azure/data-tables.UpsertTableEntityOptions'
  - uid: Promise<@azure/data-tables.UpsertEntityResponse>
    name: UpsertEntityResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: UpsertEntityResponse
        fullName: UpsertEntityResponse
        uid: '@azure/data-tables.UpsertEntityResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/data-tables.TableClient'
    name: TableClient
    spec.typeScript:
      - name: TableClient
        fullName: TableClient
        uid: '@azure/data-tables.TableClient'
