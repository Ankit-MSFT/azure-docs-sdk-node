### YamlMime:UniversalReference
items:
  - uid: '@azure/search.RawSearchRequest'
    name: RawSearchRequest
    fullName: RawSearchRequest
    children:
      - '@azure/search.RawSearchRequest.facets'
      - '@azure/search.RawSearchRequest.filter'
      - '@azure/search.RawSearchRequest.highlightFields'
      - '@azure/search.RawSearchRequest.highlightPostTag'
      - '@azure/search.RawSearchRequest.highlightPreTag'
      - '@azure/search.RawSearchRequest.includeTotalResultCount'
      - '@azure/search.RawSearchRequest.minimumCoverage'
      - '@azure/search.RawSearchRequest.orderBy'
      - '@azure/search.RawSearchRequest.queryType'
      - '@azure/search.RawSearchRequest.scoringParameters'
      - '@azure/search.RawSearchRequest.scoringProfile'
      - '@azure/search.RawSearchRequest.searchFields'
      - '@azure/search.RawSearchRequest.searchMode'
      - '@azure/search.RawSearchRequest.searchText'
      - '@azure/search.RawSearchRequest.select'
      - '@azure/search.RawSearchRequest.skip'
      - '@azure/search.RawSearchRequest.top'
    langs:
      - typeScript
    type: interface
    summary: >-
      Parameters for filtering, sorting, faceting, paging, and other search
      query behaviors.
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.facets'
    name: facets
    fullName: facets
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The list of facet expressions to apply to the search query. Each facet
      expression contains a

      field name, optionally followed by a comma-separated list of name:value
      pairs.
    optional: true
    syntax:
      content: 'facets?: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.filter'
    name: filter
    fullName: filter
    children: []
    langs:
      - typeScript
    type: property
    summary: The OData $filter expression to apply to the search query.
    optional: true
    syntax:
      content: 'filter?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.highlightFields'
    name: highlightFields
    fullName: highlightFields
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The comma-separated list of field names to use for hit highlights. Only
      searchable fields can

      be used for hit highlighting.
    optional: true
    syntax:
      content: 'highlightFields?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.highlightPostTag'
    name: highlightPostTag
    fullName: highlightPostTag
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A string tag that is appended to hit highlights. Must be set with
      highlightPreTag. Default is

      &lt;/em&gt;.
    optional: true
    syntax:
      content: 'highlightPostTag?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.highlightPreTag'
    name: highlightPreTag
    fullName: highlightPreTag
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A string tag that is prepended to hit highlights. Must be set with
      highlightPostTag. Default

      is &lt;em&gt;.
    optional: true
    syntax:
      content: 'highlightPreTag?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.includeTotalResultCount'
    name: includeTotalResultCount
    fullName: includeTotalResultCount
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A value that specifies whether to fetch the total count of results.
      Default is false. Setting

      this value to true may have a performance impact. Note that the count
      returned is an

      approximation.
    optional: true
    syntax:
      content: 'includeTotalResultCount?: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.minimumCoverage'
    name: minimumCoverage
    fullName: minimumCoverage
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A number between 0 and 100 indicating the percentage of the index that
      must be covered by a

      search query in order for the query to be reported as a success. This
      parameter can be useful

      for ensuring search availability even for services with only one replica.
      The default is 100.
    optional: true
    syntax:
      content: 'minimumCoverage?: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.orderBy'
    name: orderBy
    fullName: orderBy
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The comma-separated list of OData $orderby expressions by which to sort
      the results. Each

      expression can be either a field name or a call to either the
      geo.distance() or the

      search.score() functions. Each expression can be followed by asc to
      indicate ascending, or

      desc to indicate descending. The default is ascending order. Ties will be
      broken by the match

      scores of documents. If no $orderby is specified, the default sort order
      is descending by

      document match score. There can be at most 32 $orderby clauses.
    optional: true
    syntax:
      content: 'orderBy?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.queryType'
    name: queryType
    fullName: queryType
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A value that specifies the syntax of the search query. The default is
      'simple'. Use 'full' if

      your query uses the Lucene query syntax. Possible values include:
      'simple', 'full'
    optional: true
    syntax:
      content: 'queryType?: QueryType'
      return:
        type:
          - '@azure/search.QueryType'
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.scoringParameters'
    name: scoringParameters
    fullName: scoringParameters
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The list of parameter values to be used in scoring functions (for example,

      referencePointParameter) using the format name-values. For example, if the
      scoring profile

      defines a function with a parameter called 'mylocation' the parameter
      string would be

      "mylocation--122.2,44.8" (without the quotes).
    optional: true
    syntax:
      content: 'scoringParameters?: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.scoringProfile'
    name: scoringProfile
    fullName: scoringProfile
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The name of a scoring profile to evaluate match scores for matching
      documents in order to sort

      the results.
    optional: true
    syntax:
      content: 'scoringProfile?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.searchFields'
    name: searchFields
    fullName: searchFields
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The comma-separated list of field names to which to scope the full-text
      search. When using

      fielded search (fieldName:searchExpression) in a full Lucene query, the
      field names of each

      fielded search expression take precedence over any field names listed in
      this parameter.
    optional: true
    syntax:
      content: 'searchFields?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.searchMode'
    name: searchMode
    fullName: searchMode
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A value that specifies whether any or all of the search terms must be
      matched in order to

      count the document as a match. Possible values include: 'any', 'all'
    optional: true
    syntax:
      content: 'searchMode?: SearchMode'
      return:
        type:
          - '@azure/search.SearchMode'
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.searchText'
    name: searchText
    fullName: searchText
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A full-text search query expression; Use "*" or omit this parameter to
      match all documents.
    optional: true
    syntax:
      content: 'searchText?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.select'
    name: select
    fullName: select
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The comma-separated list of fields to retrieve. If unspecified, all fields
      marked as

      retrievable in the schema are included.
    optional: true
    syntax:
      content: 'select?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.skip'
    name: skip
    fullName: skip
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The number of search results to skip. This value cannot be greater than
      100,000. If you need

      to scan documents in sequence, but cannot use skip due to this limitation,
      consider using

      orderby on a totally-ordered key and filter with a range query instead.
    optional: true
    syntax:
      content: 'skip?: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/search'
  - uid: '@azure/search.RawSearchRequest.top'
    name: top
    fullName: top
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The number of search results to retrieve. This can be used in conjunction
      with $skip to

      implement client-side paging of search results. If results are truncated
      due to server-side

      paging, the response will include a continuation token that can be used to
      issue another

      Search request for the next page of results.
    optional: true
    syntax:
      content: 'top?: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/search'
references:
  - uid: '@azure/search.QueryType'
    name: QueryType
    spec.typeScript:
      - name: QueryType
        fullName: QueryType
        uid: '@azure/search.QueryType'
  - uid: '@azure/search.SearchMode'
    name: SearchMode
    spec.typeScript:
      - name: SearchMode
        fullName: SearchMode
        uid: '@azure/search.SearchMode'
