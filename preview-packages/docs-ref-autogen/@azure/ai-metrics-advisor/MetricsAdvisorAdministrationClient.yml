### YamlMime:TSType
name: MetricsAdvisorAdministrationClient
uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient'
package: '@azure/ai-metrics-advisor'
summary: >-
  Client class for interacting with Azure Metrics Advisor Service to perform
  management operations
fullName: MetricsAdvisorAdministrationClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      MetricsAdvisorAdministrationClient(string, MetricsAdvisorKeyCredential,
      MetricsAdvisorAdministrationClientOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.constructor'
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Creates an instance of MetricsAdvisorAdministrationClient.

      Example usage:

      ```ts

      import { MetricsAdvisorAdministrationClient, MetricsAdvisorKeyCredential }
      from "@azure/ai-metrics-advisor";


      const client = new MetricsAdvisorAdministrationClient(
         "<service endpoint>",
         new MetricsAdvisorKeyCredential("<subscription key>", "<api key>")
      );

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new MetricsAdvisorAdministrationClient(endpointUrl: string, credential:
        MetricsAdvisorKeyCredential, options?:
        MetricsAdvisorAdministrationClientOptions)
      parameters:
        - id: endpointUrl
          type: string
          description: Url to an Azure Metrics Advisor service endpoint
        - id: credential
          type: <xref uid="@azure/ai-metrics-advisor.MetricsAdvisorKeyCredential" />
          description: Used to authenticate requests to the service.
        - id: options
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClientOptions"
            />
          description: ''
properties:
  - name: endpointUrl
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.endpointUrl'
    package: '@azure/ai-metrics-advisor'
    summary: Url to service endpoint
    fullName: endpointUrl
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'endpointUrl: string'
      return:
        type: string
        description: ''
methods:
  - name: >-
      createAnomalyAlertConfiguration(Omit<AnomalyAlertConfiguration, "id">,
      OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.createAnomalyAlertConfiguration
    package: '@azure/ai-metrics-advisor'
    summary: Creates anomaly alerting configuration for a given metric
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createAnomalyAlertConfiguration(config:
        Omit<AnomalyAlertConfiguration, "id">, options?: OperationOptions)
      parameters:
        - id: config
          type: >-
            Omit&lt;<xref
            uid="@azure/ai-metrics-advisor.AnomalyAlertConfiguration" />,
            "id"&gt;
          description: |
            the alert configuration object to create
        - id: options
          type: OperationOptions
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.GetAnomalyAlertConfigurationResponse"
          />&gt;
        description: ''
  - name: >-
      createDataFeed(Omit<DataFeed, "id" | "metricIds" | "isAdmin" | "status" |
      "creator" | "createdTime">, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.createDataFeed
    package: '@azure/ai-metrics-advisor'
    summary: Adds a new data feed for a specifc data source and provided settings
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createDataFeed(feed: Omit<DataFeed, "id" | "metricIds" |
        "isAdmin" | "status" | "creator" | "createdTime">, operationOptions?:
        OperationOptions)
      parameters:
        - id: feed
          type: >-
            Omit&lt;<xref uid="@azure/ai-metrics-advisor.DataFeed" />, "id" |
            "metricIds" | "isAdmin" | "status" | "creator" | "createdTime"&gt;
          description: the data feed object to create
        - id: operationOptions
          type: OperationOptions
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="@azure/ai-metrics-advisor.GetDataFeedResponse"
          />&gt;
        description: ''
  - name: 'createHook(EmailHook | WebhookHook, OperationOptions)'
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.createHook'
    package: '@azure/ai-metrics-advisor'
    summary: Adds a new hook
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createHook(hookInfo: EmailHook | WebhookHook, options?:
        OperationOptions)
      parameters:
        - id: hookInfo
          type: >-
            <xref uid="@azure/ai-metrics-advisor.EmailHook" /> | <xref
            uid="@azure/ai-metrics-advisor.WebhookHook" />
          description: >-
            Information for the new hook consists of the hook type, name,
            description, external link and hook parameter
        - id: options
          type: OperationOptions
          description: |
            The options parameter.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/ai-metrics-advisor.GetHookResponse"
          />&gt;
        description: ''
  - name: >-
      createMetricAnomalyDetectionConfiguration(Omit<AnomalyDetectionConfiguration,
      "id">, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.createMetricAnomalyDetectionConfiguration
    package: '@azure/ai-metrics-advisor'
    summary: Creates an anomaly detection configuration for a given metric
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createMetricAnomalyDetectionConfiguration(config:
        Omit<AnomalyDetectionConfiguration, "id">, options?: OperationOptions)
      parameters:
        - id: config
          type: >-
            Omit&lt;<xref
            uid="@azure/ai-metrics-advisor.AnomalyDetectionConfiguration" />,
            "id"&gt;
          description: The detection configuration object to create
        - id: options
          type: OperationOptions
          description: |
            The options parameter
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.GetAnomalyDetectionConfigurationResponse"
          />&gt;
        description: ''
  - name: 'deleteAnomalyAlertConfiguration(string, OperationOptions)'
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.deleteAnomalyAlertConfiguration
    package: '@azure/ai-metrics-advisor'
    summary: Deletes metric anomaly alert configuration for the given configuration id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteAnomalyAlertConfiguration(id: string, options?:
        OperationOptions)
      parameters:
        - id: id
          type: string
          description: id of the anomaly alert configuration to delete
        - id: options
          type: OperationOptions
          description: |
            The options parameter.
      return:
        type: Promise&lt;RestResponse&gt;
        description: ''
  - name: 'deleteDataFeed(string, OperationOptions)'
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.deleteDataFeed
    package: '@azure/ai-metrics-advisor'
    summary: Deletes a data feed for the given data feed id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteDataFeed(id: string, options?: OperationOptions)'
      parameters:
        - id: id
          type: string
          description: id of the data feed to delete
        - id: options
          type: OperationOptions
          description: |
            The options parameter.
      return:
        type: Promise&lt;RestResponse&gt;
        description: ''
  - name: 'deleteHook(string, OperationOptions)'
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.deleteHook'
    package: '@azure/ai-metrics-advisor'
    summary: Deletes hook for the given hook id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteHook(id: string, options?: OperationOptions)'
      parameters:
        - id: id
          type: string
          description: id of the hook to delete
        - id: options
          type: OperationOptions
          description: |
            The options parameter
      return:
        type: Promise&lt;RestResponse&gt;
        description: ''
  - name: 'deleteMetricAnomalyDetectionConfiguration(string, OperationOptions)'
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.deleteMetricAnomalyDetectionConfiguration
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Deletes a metric anomaly detection configuration for the given
      configuration id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMetricAnomalyDetectionConfiguration(id: string, options?:
        OperationOptions)
      parameters:
        - id: id
          type: string
          description: id of the detection configuration to delete
        - id: options
          type: OperationOptions
          description: |
            The options parameter.
      return:
        type: Promise&lt;RestResponse&gt;
        description: ''
  - name: 'getAnomalyAlertConfiguration(string, OperationOptions)'
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.getAnomalyAlertConfiguration
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Retrieves metric anomaly alert configuration for the given configuration
      id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAnomalyAlertConfiguration(id: string, options?:
        OperationOptions)
      parameters:
        - id: id
          type: string
          description: id of the anomaly alert configuration to retrieve
        - id: options
          type: OperationOptions
          description: |
            The options parameter.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.GetAnomalyAlertConfigurationResponse"
          />&gt;
        description: ''
  - name: 'getDataFeed(string, OperationOptions)'
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.getDataFeed'
    package: '@azure/ai-metrics-advisor'
    summary: Retrieves data feed for the given data feed id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getDataFeed(id: string, options?: OperationOptions)'
      parameters:
        - id: id
          type: string
          description: id for the data feed to retrieve
        - id: options
          type: OperationOptions
          description: |
            The options parameter.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/ai-metrics-advisor.GetDataFeedResponse"
          />&gt;
        description: ''
  - name: 'getDataFeedIngestionProgress(string, __type)'
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgress
    package: '@azure/ai-metrics-advisor'
    summary: Retrieves data feed ingestion progress for the given data feed id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getDataFeedIngestionProgress(dataFeedId: string, options?:
        __type)
      parameters:
        - id: dataFeedId
          type: string
          description: data feed id for the ingestion progress to retrieve
        - id: options
          type: __type
          description: |
            The options parameter.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.GeneratedClientGetIngestionProgressResponse"
          />&gt;
        description: ''
  - name: 'getHook(string, OperationOptions)'
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.getHook'
    package: '@azure/ai-metrics-advisor'
    summary: Retrieves hook for the given hook id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getHook(id: string, options?: OperationOptions)'
      parameters:
        - id: id
          type: string
          description: id for the hook to retrieve
        - id: options
          type: OperationOptions
          description: |
            The options parameter.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/ai-metrics-advisor.GetHookResponse"
          />&gt;
        description: ''
  - name: 'getMetricAnomalyDetectionConfiguration(string, OperationOptions)'
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfiguration
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Retrieves metric anomaly detection configuration for the given
      configuration id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getMetricAnomalyDetectionConfiguration(id: string, options?:
        OperationOptions)
      parameters:
        - id: id
          type: string
          description: id of the detection configuration to retrieve
        - id: options
          type: OperationOptions
          description: |
            The options parameter.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.GetAnomalyDetectionConfigurationResponse"
          />&gt;
        description: ''
  - name: 'listAnomalyAlertConfigurations(string, OperationOptions)'
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.listAnomalyAlertConfigurations
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list anamoly alert configurations
      associated with the given detection configuration.

      `.byPage()` returns an async iterable iterator to list the alert
      configurations in pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorAdministrationClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const alertConfigurations =
      client.listAnomalyAlertConfigurations(detectionConfigurationId);

      let i = 1;

      for await (const alertConfiguration of alertConfigurations){
       console.log(`alertConfiguration ${i++}:`);
       console.log(alertConfiguration);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter =
      client.listAnomalyAlertConfigurations(detectionConfigurationId);

      let result = await iter.next();

      while (!result.done) {
        console.log(` alert - ${result.value.id}, ${result.value.name}`);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages =
      client.listAnomalyAlertConfigurations(detectionConfigurationId)
        .byPage({ maxPageSize: 10 });
      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value.alertConfigurations) {
         console.log(`-- page ${i++}`);
         for (const alert of page.value.alertConfigurations) {
           console.log(`${alert}`);
         }
       }
       page = await pages.next();
      }


      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAnomalyAlertConfigurations(detectionConfigId: string,
        options?: OperationOptions)
      parameters:
        - id: detectionConfigId
          type: string
          description: anomaly detection configuration unique id
        - id: options
          type: OperationOptions
          description: |
            The options parameter.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.AnomalyAlertConfiguration" />, <xref
          uid="@azure/ai-metrics-advisor.ListAnomalyAlertConfigurationsPageResponse"
          />, undefined&gt;
        description: ''
  - name: >-
      listDataFeedIngestionStatus(string, Date, Date,
      ListDataFeedIngestionStatusOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list data feed ingestion status
      based on options

      `.byPage()` returns an async iterable iterator to list the data feed
      ingestion status in pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorAdministrationClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const ingestionStatusList =
      client.listDataFeedIngestionStatus(dataFeedId);

      let i = 1;

      for await (const ingestionStatus of ingestionStatusList){
       console.log(`ingestionStatus ${i++}:`);
       console.log(ingestionStatus);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = client.listDataFeedIngestionStatus(dataFeedId);

      let result = await iter.next();

      while (!result.done) {
        console.log(` anomaly - ${result.value.timestamp}, ${result.value.status}, ${result.value.mesage}`);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client.listDataFeedIngestionStatus(dataFeedId).byPage({
      maxPageSize: 2 });

      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value.statusList) {
         console.log(`-- page ${i++}`);
         for (const status of page.value.statusList) {
           console.log("ingestion status-");
           console.dir(status);
         }
       }
       page = await pages.next();
      }


      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listDataFeedIngestionStatus(dataFeedId: string, startTime:
        Date, endTime: Date, options?: ListDataFeedIngestionStatusOptions)
      parameters:
        - id: dataFeedId
          type: string
          description: data feed id for list of data feed ingestion status
        - id: startTime
          type: Date
          description: The start point of time range to query data ingestion status
        - id: endTime
          type: Date
          description: The end point of time range to query data ingestion status
        - id: options
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.ListDataFeedIngestionStatusOptions"
            />
          description: |
            The options parameter.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.IngestionStatus" />, <xref
          uid="@azure/ai-metrics-advisor.ListDataFeedIngestionStatusPageResponse"
          />&gt;
        description: ''
  - name: listDataFeeds(ListDataFeedsOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.listDataFeeds'
    package: '@azure/ai-metrics-advisor'
    summary: |-
      Returns an async iterable iterator to list data feeds based on options
      `.byPage()` returns an async iterable iterator to list the blobs in pages.

      Example using `for await` syntax:

      ```js
      const client = new MetricsAdvisorAdministrationClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const dataFeedList = client.listDataFeeds({
      filter: { // filter
       dataFeedName: "js-blob-datafeed"
       }
      });
      let i = 1;
      for await (const datafeed of dataFeedList){
       console.log(`datafeed ${i++}:`);
       console.log(datafeed);
      }
      ```

      Example using `iter.next()`:

      ```js
      let iter = client.listDataFeeds();
      let dataFeedItem = await iter.next();
      while (!dataFeedItem.done) {
        console.log(`id :${dataFeedItem.value.id}, name: ${dataFeedItem.value.name}`);
        dataFeedItem = await iter.next();
      }
      ```

      Example using `byPage()`:

      ```js
      const pages = client.listDataFeeds().byPage({ maxPageSize: 10 });
      let page = await pages.next();
      let i = 1;
      while (!page.done) {
       if (page.value.dataFeeds) {
         console.log(`-- page ${i++}`);
         for (const feed of page.value.dataFeeds) {
           console.log(`  ${feed.id} - ${feed.name}`);
         }
       }
       page = await pages.next();
      }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listDataFeeds(options?: ListDataFeedsOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/ai-metrics-advisor.ListDataFeedsOptions" />
          description: |
            The options parameter.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.DataFeed" />, <xref
          uid="@azure/ai-metrics-advisor.ListDataFeedsPageResponse" />&gt;
        description: ''
  - name: listHooks(ListHooksOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.listHooks'
    package: '@azure/ai-metrics-advisor'
    summary: |-
      Returns an async iterable iterator to list hooks based on options
      `.byPage()` returns an async iterable iterator to list the hooks in pages.

      Example using `for await` syntax:

      ```js
      const client = new MetricsAdvisorAdministrationClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const hookList = client.listHooks();
      let i = 1;
      for await (const hook of hookList){
       console.log(`hook ${i++}:`);
       console.log(hook);
      }
      ```

      Example using `iter.next()`:

      ```js
      let iter = client.listHooks();
      let result = await iter.next();
      while (!result.done) {
        console.log(` hook - ${result.value.id}`);
        result = await iter.next();
      }
      ```

      Example using `byPage()`:

      ```js
      const pages = client.listHooks().byPage({ maxPageSize: 2 });
      let page = await pages.next();
      let i = 1;
      while (!page.done) {
       if (page.value.hooks) {
         console.log(`-- page ${i++}`);
         for (const hook of page.value.hooks) {
           console.log("hook-");
           console.dir(hook);
         }
       }
       page = await pages.next();
      }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listHooks(options?: ListHooksOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/ai-metrics-advisor.ListHooksOptions" />
          description: |
            The options parameter.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.HookUnion" />, <xref
          uid="@azure/ai-metrics-advisor.ListHooksPageResponse" />&gt;
        description: ''
  - name: 'listMetricAnomalyDetectionConfigurations(string, OperationOptions)'
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.listMetricAnomalyDetectionConfigurations
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list anomaly detection
      configurations based on options

      `.byPage()` returns an async iterable iterator to list the anomaly
      detection configurations in pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorAdministrationClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const anomalyDetectionList =
      client.listMetricAnomalyDetectionConfigurations(metricId);

      let i = 1;

      for await (const anomaly of anomalyDetectionList){
       console.log(`anomaly ${i++}:`);
       console.log(anomaly);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = client.listMetricAnomalyDetectionConfigurations(metricId);

      let result = await iter.next();

      while (!result.done) {
        console.log(` anomaly - ${result.value.id}, ${result.value.name}`);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client.listMetricAnomalyDetectionConfigurations(metricId)
        .byPage({ maxPageSize: 2 });
      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value.detectionConfigurations) {
         console.log(`-- page ${i++}`);
         for (const detectionConfiguration of page.value.detectionConfigurations) {
           console.log("detection configuration-");
           console.dir(detectionConfiguration);
         }
       }
       page = await pages.next();
      }


      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listMetricAnomalyDetectionConfigurations(metricId: string,
        options?: OperationOptions)
      parameters:
        - id: metricId
          type: string
          description: metric id for list of anomaly detection configurations
        - id: options
          type: OperationOptions
          description: |
            The options parameter.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.AnomalyDetectionConfiguration" />,
          <xref
          uid="@azure/ai-metrics-advisor.ListAnomalyDetectionConfigurationsPageResponse"
          />, undefined&gt;
        description: ''
  - name: 'refreshDataFeedIngestion(string, Date, Date, OperationOptions)'
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.refreshDataFeedIngestion
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Refreshes or resets data feed ingestion progress for the given data feed
      id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function refreshDataFeedIngestion(dataFeedId: string, startTime: Date,
        endTime: Date, options?: OperationOptions)
      parameters:
        - id: dataFeedId
          type: string
          description: The data feed id for the ingestion progress to refresh or reset
        - id: startTime
          type: Date
          description: The start point of time range to query data ingestion status
        - id: endTime
          type: Date
          description: The end point of time range to query data ingestion status
        - id: options
          type: OperationOptions
          description: |
            The options parameter.
      return:
        type: Promise&lt;RestResponse&gt;
        description: ''
  - name: >-
      updateAnomalyAlertConfiguration(string,
      Partial<Omit<AnomalyAlertConfiguration, "id">>, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.updateAnomalyAlertConfiguration
    package: '@azure/ai-metrics-advisor'
    summary: Updates an anomaly alert configuration for the given configuration id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateAnomalyAlertConfiguration(id: string, patch:
        Partial<Omit<AnomalyAlertConfiguration, "id">>, options?:
        OperationOptions)
      parameters:
        - id: id
          type: string
          description: id of the anomaly alert configuration to update
        - id: patch
          type: >-
            Partial&lt;Omit&lt;<xref
            uid="@azure/ai-metrics-advisor.AnomalyAlertConfiguration" />,
            "id"&gt;&gt;
          description: >-
            Input to the update anomaly alert configuration operation
            <xref:AnomalyAlertConfigurationPatch>
        - id: options
          type: OperationOptions
          description: |
            The options parameter
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.GetAnomalyAlertConfigurationResponse"
          />&gt;
        description: ''
  - name: 'updateDataFeed(string, DataFeedPatch, OperationOptions)'
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.updateDataFeed
    package: '@azure/ai-metrics-advisor'
    summary: Updates a data feed given its id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateDataFeed(dataFeedId: string, patch: DataFeedPatch,
        options?: OperationOptions)
      parameters:
        - id: dataFeedId
          type: string
          description: id of the data feed to update
        - id: patch
          type: <xref uid="@azure/ai-metrics-advisor.DataFeedPatch" />
          description: 'Input to the update data feed operation <xref:DataFeedPatch>'
        - id: options
          type: OperationOptions
          description: |
            The options parameter.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/ai-metrics-advisor.GetDataFeedResponse"
          />&gt;
        description: ''
  - name: 'updateHook(string, EmailHookPatch | WebhookHookPatch, OperationOptions)'
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.updateHook'
    package: '@azure/ai-metrics-advisor'
    summary: Updates hook for the given hook id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateHook(id: string, patch: EmailHookPatch |
        WebhookHookPatch, options?: OperationOptions)
      parameters:
        - id: id
          type: string
          description: id of the hook to update
        - id: patch
          type: >-
            <xref uid="@azure/ai-metrics-advisor.EmailHookPatch" /> | <xref
            uid="@azure/ai-metrics-advisor.WebhookHookPatch" />
          description: >-
            Input to the update hook of type Email <xref:EmailHookPatch> or
            WebHook <xref:WebhookHookPatch>
        - id: options
          type: OperationOptions
          description: |
            The options parameter
      return:
        type: >-
          Promise&lt;<xref uid="@azure/ai-metrics-advisor.GetHookResponse"
          />&gt;
        description: ''
  - name: >-
      updateMetricAnomalyDetectionConfiguration(string,
      Partial<Omit<AnomalyDetectionConfiguration, "id" | "metricId">>,
      OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfiguration
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Updates a metric anomaly detection configuration for the given
      configuration id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateMetricAnomalyDetectionConfiguration(id: string, patch:
        Partial<Omit<AnomalyDetectionConfiguration, "id" | "metricId">>,
        options?: OperationOptions)
      parameters:
        - id: id
          type: string
          description: id of the detection configuration for metric anomaly to update
        - id: patch
          type: >-
            Partial&lt;Omit&lt;<xref
            uid="@azure/ai-metrics-advisor.AnomalyDetectionConfiguration" />,
            "id" | "metricId"&gt;&gt;
          description: >-
            Input to the update anomaly detection configuration operation
            <xref:AnomalyDetectionConfigurationPatch>
        - id: options
          type: OperationOptions
          description: |
            The options parameter.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.GetAnomalyDetectionConfigurationResponse"
          />&gt;
        description: ''
