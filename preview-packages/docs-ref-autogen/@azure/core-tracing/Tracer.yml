### YamlMime:UniversalReference
items:
  - uid: '@azure/core-tracing.Tracer'
    name: Tracer
    fullName: Tracer
    children:
      - '@azure/core-tracing.Tracer.getBinaryFormat'
      - '@azure/core-tracing.Tracer.getCurrentSpan'
      - '@azure/core-tracing.Tracer.getHttpTextFormat'
      - '@azure/core-tracing.Tracer.pluginType'
      - '@azure/core-tracing.Tracer.recordSpanData'
      - '@azure/core-tracing.Tracer.startSpan'
      - '@azure/core-tracing.Tracer.withSpan'
    langs:
      - typeScript
    type: interface
    summary: >
      Tracer provides an interface for creating <xref:Span>s and propagating

      context in-process.

      Users may choose to use manual or automatic Context propagation. Because
      of

      that this class offers APIs to facilitate both usages.
    package: '@azure/core-tracing'
  - uid: '@azure/core-tracing.Tracer.getBinaryFormat'
    name: getBinaryFormat()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Returns the <xref:BinaryFormat> interface which can serialize/deserialize
      Spans.
      If no tracer implementation is provided, this defaults to the W3C Trace
      Context binary format (<xref:BinaryFormat>). For more details see
      <a href="https://w3c.github.io/trace-context-binary/">W3C Trace Context
      binary protocol</a>.
    syntax:
      content: function getBinaryFormat()
      parameters: []
      return:
        type:
          - unknown
    package: '@azure/core-tracing'
  - uid: '@azure/core-tracing.Tracer.getCurrentSpan'
    name: getCurrentSpan()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Returns the current Span from the current context if available.
      If there is no Span associated with the current context, a default Span
      with invalid SpanContext is returned.
    syntax:
      content: function getCurrentSpan()
      parameters: []
      return:
        type:
          - '@azure/core-tracing.Span'
    package: '@azure/core-tracing'
  - uid: '@azure/core-tracing.Tracer.getHttpTextFormat'
    name: getHttpTextFormat()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Returns the <xref:HttpTextFormat> interface which can inject/extract
      Spans.
      If no tracer implementation is provided, this defaults to the W3C Trace
      Context HTTP text format (<xref:HttpTraceContext>). For more details see
      <a href="https://w3c.github.io/trace-context/">W3C Trace Context</a>.
    syntax:
      content: function getHttpTextFormat()
      parameters: []
      return:
        type:
          - unknown
    package: '@azure/core-tracing'
  - uid: '@azure/core-tracing.Tracer.pluginType'
    name: pluginType
    fullName: pluginType
    children: []
    langs:
      - typeScript
    type: property
    summary: Returns the type of the plugin being used by the tracer.
    syntax:
      content: 'pluginType: SupportedPlugins'
      return:
        type:
          - '@azure/core-tracing.SupportedPlugins'
    package: '@azure/core-tracing'
  - uid: '@azure/core-tracing.Tracer.recordSpanData'
    name: recordSpanData(Span)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Send a pre-populated span object to the exporter.
      Sampling and recording decisions as well as other collection optimizations
      are the responsibility of a caller.
    syntax:
      content: 'function recordSpanData(span: Span)'
      parameters:
        - id: span
          type:
            - '@azure/core-tracing.Span'
          description: |
            Span Data to be reported to all exporters.
    package: '@azure/core-tracing'
  - uid: '@azure/core-tracing.Tracer.startSpan'
    name: 'startSpan(string, SpanOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Starts a new <xref:Span>.'
    syntax:
      content: 'function startSpan(name: string, options?: SpanOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the span
        - id: options
          type:
            - '@azure/core-tracing.SpanOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/core-tracing.Span'
    package: '@azure/core-tracing'
  - uid: '@azure/core-tracing.Tracer.withSpan'
    name: 'withSpan(Span, T)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Executes the function given by fn within the context provided by Span
    syntax:
      content: 'function withSpan<T>(span: Span, fn: T)'
      parameters:
        - id: span
          type:
            - '@azure/core-tracing.Span'
          description: The span that provides the context
        - id: fn
          type:
            - T
          description: |
            The function to be eexcuted inside the provided context
      return:
        type:
          - ReturnType<T>
    package: '@azure/core-tracing'
references:
  - uid: '@azure/core-tracing.SupportedPlugins'
    name: SupportedPlugins
    spec.typeScript:
      - name: SupportedPlugins
        fullName: SupportedPlugins
        uid: '@azure/core-tracing.SupportedPlugins'
  - uid: '@azure/core-tracing.Span'
    name: Span
    spec.typeScript:
      - name: Span
        fullName: Span
        uid: '@azure/core-tracing.Span'
  - uid: '@azure/core-tracing.SpanOptions'
    name: SpanOptions
    spec.typeScript:
      - name: SpanOptions
        fullName: SpanOptions
        uid: '@azure/core-tracing.SpanOptions'
