### YamlMime:UniversalReference
items:
  - uid: '@azure/keyvault-keys.LocalCryptographyClient'
    name: LocalCryptographyClient
    fullName: LocalCryptographyClient
    children:
      - '@azure/keyvault-keys.LocalCryptographyClient.encrypt'
      - '@azure/keyvault-keys.LocalCryptographyClient.key'
      - '@azure/keyvault-keys.LocalCryptographyClient.constructor'
      - '@azure/keyvault-keys.LocalCryptographyClient.verifyData'
      - '@azure/keyvault-keys.LocalCryptographyClient.wrapKey'
    langs:
      - typeScript
    type: class
    summary: >-
      A client used to perform local cryptographic operations with JSON Web
      Keys.
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.LocalCryptographyClient.encrypt'
    name: 'encrypt(LocalSupportedAlgorithmName, Uint8Array)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Encrypts the given plaintext with the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new LocalCryptographyClient(jsonWebKey);
      let result = await client.encrypt("RSA1_5", Buffer.from("My Message"));
      ```
    syntax:
      content: >-
        function encrypt(algorithm: LocalSupportedAlgorithmName, plaintext:
        Uint8Array)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.LocalSupportedAlgorithmName'
          description: The algorithm to use.
        - id: plaintext
          type:
            - Uint8Array
          description: |
            The text to encrypt.
      return:
        type:
          - Promise<@azure/keyvault-keys.EncryptResult>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.LocalCryptographyClient.key'
    name: key
    fullName: key
    children: []
    langs:
      - typeScript
    type: property
    summary: 'A JSON Web Key, used for the local cryptography operations.'
    syntax:
      content: 'key: JsonWebKey'
      return:
        type:
          - '@azure/keyvault-keys.JsonWebKey'
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.LocalCryptographyClient.constructor'
    name: LocalCryptographyClient(JsonWebKey)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Constructs a new instance of the Local Cryptography client for the given
      key.

      Example usage:

      ```ts

      import { LocalCryptographyClient } from "@azure/keyvault-keys";


      const jsonWebKey: JsonWebKey = {
        // ...
      };

      const client = new LocalCryptographyClient(jsonWebKey);

      ```
    syntax:
      content: 'new LocalCryptographyClient(key: JsonWebKey)'
      parameters:
        - id: key
          type:
            - '@azure/keyvault-keys.JsonWebKey'
          description: The JsonWebKey to use during cryptography operations.
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.LocalCryptographyClient.verifyData'
    name: 'verifyData(LocalSupportedAlgorithmName, Uint8Array, Uint8Array)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Verify the signed block of data
      Example usage:
      ```ts
      let client = new LocalCryptographyClient(jsonWebKey, credentials);
      let result = await client.verifyData("RS256", signedMessage, signature);
      ```
    syntax:
      content: >-
        function verifyData(algorithm: LocalSupportedAlgorithmName, data:
        Uint8Array, signature: Uint8Array)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.LocalSupportedAlgorithmName'
          description: The algorithm to use to verify with.
        - id: data
          type:
            - Uint8Array
          description: The signed block of data to verify.
        - id: signature
          type:
            - Uint8Array
          description: The signature to verify the block against.
      return:
        type:
          - Promise<@azure/keyvault-keys.VerifyResult>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.LocalCryptographyClient.wrapKey'
    name: 'wrapKey(LocalSupportedAlgorithmName, Uint8Array)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Wraps the given key using the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new LocalCryptographyClient(jsonWebKey);
      let result = await client.wrapKey("RSA1_5", keyToWrap);
      ```
    syntax:
      content: >-
        function wrapKey(algorithm: LocalSupportedAlgorithmName, key:
        Uint8Array)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.LocalSupportedAlgorithmName'
          description: The encryption algorithm to use to wrap the given key.
        - id: key
          type:
            - Uint8Array
          description: The key to wrap.
      return:
        type:
          - Promise<@azure/keyvault-keys.WrapResult>
        description: ''
    package: '@azure/keyvault-keys'
references:
  - uid: '@azure/keyvault-keys.JsonWebKey'
    name: JsonWebKey
    spec.typeScript:
      - name: JsonWebKey
        fullName: JsonWebKey
        uid: '@azure/keyvault-keys.JsonWebKey'
  - uid: '@azure/keyvault-keys.LocalSupportedAlgorithmName'
    name: LocalSupportedAlgorithmName
    spec.typeScript:
      - name: LocalSupportedAlgorithmName
        fullName: LocalSupportedAlgorithmName
        uid: '@azure/keyvault-keys.LocalSupportedAlgorithmName'
  - uid: Promise<@azure/keyvault-keys.EncryptResult>
    name: EncryptResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EncryptResult
        fullName: EncryptResult
        uid: '@azure/keyvault-keys.EncryptResult'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/keyvault-keys.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: VerifyResult
        fullName: VerifyResult
        uid: '@azure/keyvault-keys.VerifyResult'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/keyvault-keys.WrapResult>
    name: WrapResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: WrapResult
        fullName: WrapResult
        uid: '@azure/keyvault-keys.WrapResult'
      - name: '>'
        fullName: '>'
