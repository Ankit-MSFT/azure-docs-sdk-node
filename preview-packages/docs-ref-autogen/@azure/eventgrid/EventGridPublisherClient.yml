### YamlMime:UniversalReference
items:
  - uid: '@azure/eventgrid.EventGridPublisherClient'
    name: EventGridPublisherClient
    fullName: EventGridPublisherClient
    children:
      - '@azure/eventgrid.EventGridPublisherClient.apiVersion'
      - '@azure/eventgrid.EventGridPublisherClient.endpointUrl'
      - '@azure/eventgrid.EventGridPublisherClient.constructor'
      - '@azure/eventgrid.EventGridPublisherClient.sendCloudEvents'
      - '@azure/eventgrid.EventGridPublisherClient.sendCustomSchemaEvents'
      - '@azure/eventgrid.EventGridPublisherClient.sendEvents'
    langs:
      - typeScript
    type: class
    summary: Client class for publishing events to the Event Grid Service.
    package: '@azure/eventgrid'
  - uid: '@azure/eventgrid.EventGridPublisherClient.apiVersion'
    name: apiVersion
    fullName: apiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: The version of the Even Grid service.
    syntax:
      content: 'apiVersion: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/eventgrid'
  - uid: '@azure/eventgrid.EventGridPublisherClient.endpointUrl'
    name: endpointUrl
    fullName: endpointUrl
    children: []
    langs:
      - typeScript
    type: property
    summary: The URL to the Event Grid endpoint.
    syntax:
      content: 'endpointUrl: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/eventgrid'
  - uid: '@azure/eventgrid.EventGridPublisherClient.constructor'
    name: >-
      EventGridPublisherClient(string, KeyCredential | SignatureCredential,
      EventGridPublisherClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >
      Creates an instance of EventGridPublisherClient.

      Example usage:

      ```ts

      import { EventGridPublisherClient, AzureKeyCredential } from
      "@azure/eventgrid";


      const client = new EventGridPublisherClient(
         "<service endpoint>",
         new AzureKeyCredential("<api key>")
      );

      ```
    syntax:
      content: >-
        new EventGridPublisherClient(endpointUrl: string, credential:
        KeyCredential | SignatureCredential, options?:
        EventGridPublisherClientOptions)
      parameters:
        - id: endpointUrl
          type:
            - string
          description: >-
            The URL to the EventGrid endpoint, e.g.
            https://eg-topic.westus2-1.eventgrid.azure.net/api/events
        - id: credential
          type:
            - KeyCredential | @azure/eventgrid.SignatureCredential
          description: Used to authenticate requests to the service.
        - id: options
          type:
            - '@azure/eventgrid.EventGridPublisherClientOptions'
          description: |
            Used to configure the Event Grid Client
          optional: true
    package: '@azure/eventgrid'
  - uid: '@azure/eventgrid.EventGridPublisherClient.sendCloudEvents'
    name: 'sendCloudEvents(SendCloudEventInput<any>[], SendCloudEventsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Publishes events in the Cloud Events 1.0 schema. The topic must be
      configured to expect events in the Cloud Events 1.0 schema.
    syntax:
      content: >-
        function sendCloudEvents(events: SendCloudEventInput<any>[], options?:
        SendCloudEventsOptions)
      parameters:
        - id: events
          type:
            - '@azure/eventgrid.SendCloudEventInput<any>[]'
          description: ''
        - id: options
          type:
            - '@azure/eventgrid.SendCloudEventsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/eventgrid.SendEventsResponse>
        description: ''
    package: '@azure/eventgrid'
  - uid: '@azure/eventgrid.EventGridPublisherClient.sendCustomSchemaEvents'
    name: >-
      sendCustomSchemaEvents(Record<string, any>[],
      SendCustomSchemaEventsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Publishes events written using a custom schema. The topic must be
      configured to expect events in a custom schema.
    syntax:
      content: >-
        function sendCustomSchemaEvents(events: Record<string, any>[], options?:
        SendCustomSchemaEventsOptions)
      parameters:
        - id: events
          type:
            - 'Record<string, any>[]'
          description: ''
        - id: options
          type:
            - '@azure/eventgrid.SendCustomSchemaEventsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/eventgrid.SendEventsResponse>
        description: ''
    package: '@azure/eventgrid'
  - uid: '@azure/eventgrid.EventGridPublisherClient.sendEvents'
    name: 'sendEvents(SendEventGridEventInput<any>[], SendEventsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Publishes events in the Event Grid scheama. The topic must be configured
      to expect events in the Event Grid schema.
    syntax:
      content: >-
        function sendEvents(events: SendEventGridEventInput<any>[], options?:
        SendEventsOptions)
      parameters:
        - id: events
          type:
            - '@azure/eventgrid.SendEventGridEventInput<any>[]'
          description: ''
        - id: options
          type:
            - '@azure/eventgrid.SendEventsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/eventgrid.SendEventsResponse>
        description: ''
    package: '@azure/eventgrid'
references:
  - uid: KeyCredential | @azure/eventgrid.SignatureCredential
    name: SignatureCredential
    spec.typeScript:
      - name: 'KeyCredential | '
        fullName: 'KeyCredential | '
      - name: SignatureCredential
        fullName: SignatureCredential
        uid: '@azure/eventgrid.SignatureCredential'
  - uid: '@azure/eventgrid.EventGridPublisherClientOptions'
    name: EventGridPublisherClientOptions
    spec.typeScript:
      - name: EventGridPublisherClientOptions
        fullName: EventGridPublisherClientOptions
        uid: '@azure/eventgrid.EventGridPublisherClientOptions'
  - uid: '@azure/eventgrid.SendCloudEventInput<any>[]'
    name: 'SendCloudEventInput<any>[]'
    spec.typeScript:
      - name: SendCloudEventInput
        fullName: SendCloudEventInput
        uid: '@azure/eventgrid.SendCloudEventInput'
      - name: '<any>[]'
        fullName: '<any>[]'
  - uid: '@azure/eventgrid.SendCloudEventsOptions'
    name: SendCloudEventsOptions
    spec.typeScript:
      - name: SendCloudEventsOptions
        fullName: SendCloudEventsOptions
        uid: '@azure/eventgrid.SendCloudEventsOptions'
  - uid: Promise<@azure/eventgrid.SendEventsResponse>
    name: SendEventsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SendEventsResponse
        fullName: SendEventsResponse
        uid: '@azure/eventgrid.SendEventsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/eventgrid.SendCustomSchemaEventsOptions'
    name: SendCustomSchemaEventsOptions
    spec.typeScript:
      - name: SendCustomSchemaEventsOptions
        fullName: SendCustomSchemaEventsOptions
        uid: '@azure/eventgrid.SendCustomSchemaEventsOptions'
  - uid: '@azure/eventgrid.SendEventGridEventInput<any>[]'
    name: 'SendEventGridEventInput<any>[]'
    spec.typeScript:
      - name: SendEventGridEventInput
        fullName: SendEventGridEventInput
        uid: '@azure/eventgrid.SendEventGridEventInput'
      - name: '<any>[]'
        fullName: '<any>[]'
  - uid: '@azure/eventgrid.SendEventsOptions'
    name: SendEventsOptions
    spec.typeScript:
      - name: SendEventsOptions
        fullName: SendEventsOptions
        uid: '@azure/eventgrid.SendEventsOptions'
