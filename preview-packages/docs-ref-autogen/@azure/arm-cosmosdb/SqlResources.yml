### YamlMime:TSType
name: SqlResources
uid: '@azure/arm-cosmosdb.SqlResources'
package: '@azure/arm-cosmosdb'
summary: Interface representing a SqlResources.
fullName: SqlResources
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: >-
      beginCreateUpdateSqlContainer(string, string, string, string,
      SqlContainerCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlContainerOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlContainer'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlContainer(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        createUpdateSqlContainerParameters: SqlContainerCreateUpdateParameters,
        options?: SqlResourcesCreateUpdateSqlContainerOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: createUpdateSqlContainerParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.SqlContainerCreateUpdateParameters"
            />
          description: The parameters to provide for the current SQL container.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlContainerOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlContainerResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlContainerResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginCreateUpdateSqlContainerAndWait(string, string, string, string,
      SqlContainerCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlContainerOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlContainerAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlContainerAndWait(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        createUpdateSqlContainerParameters: SqlContainerCreateUpdateParameters,
        options?: SqlResourcesCreateUpdateSqlContainerOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: createUpdateSqlContainerParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.SqlContainerCreateUpdateParameters"
            />
          description: The parameters to provide for the current SQL container.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlContainerOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlContainerResponse"
          />&gt;
        description: ''
  - name: >-
      beginCreateUpdateSqlDatabase(string, string, string,
      SqlDatabaseCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlDatabaseOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlDatabase'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlDatabase(resourceGroupName: string,
        accountName: string, databaseName: string,
        createUpdateSqlDatabaseParameters: SqlDatabaseCreateUpdateParameters,
        options?: SqlResourcesCreateUpdateSqlDatabaseOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: createUpdateSqlDatabaseParameters
          type: <xref uid="@azure/arm-cosmosdb.SqlDatabaseCreateUpdateParameters" />
          description: The parameters to provide for the current SQL database.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlDatabaseOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlDatabaseResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlDatabaseResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginCreateUpdateSqlDatabaseAndWait(string, string, string,
      SqlDatabaseCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlDatabaseOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlDatabaseAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlDatabaseAndWait(resourceGroupName: string,
        accountName: string, databaseName: string,
        createUpdateSqlDatabaseParameters: SqlDatabaseCreateUpdateParameters,
        options?: SqlResourcesCreateUpdateSqlDatabaseOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: createUpdateSqlDatabaseParameters
          type: <xref uid="@azure/arm-cosmosdb.SqlDatabaseCreateUpdateParameters" />
          description: The parameters to provide for the current SQL database.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlDatabaseOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlDatabaseResponse"
          />&gt;
        description: ''
  - name: >-
      beginCreateUpdateSqlRoleAssignment(string, string, string,
      SqlRoleAssignmentCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlRoleAssignmentOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlRoleAssignment'
    package: '@azure/arm-cosmosdb'
    summary: Creates or updates an Azure Cosmos DB SQL Role Assignment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlRoleAssignment(roleAssignmentId: string,
        resourceGroupName: string, accountName: string,
        createUpdateSqlRoleAssignmentParameters:
        SqlRoleAssignmentCreateUpdateParameters, options?:
        SqlResourcesCreateUpdateSqlRoleAssignmentOptionalParams)
      parameters:
        - id: roleAssignmentId
          type: string
          description: The GUID for the Role Assignment.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: createUpdateSqlRoleAssignmentParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlRoleAssignmentCreateUpdateParameters" />
          description: |-
            The properties required to create or update a Role
                                                           Assignment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlRoleAssignmentOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlRoleAssignmentResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlRoleAssignmentResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginCreateUpdateSqlRoleAssignmentAndWait(string, string, string,
      SqlRoleAssignmentCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlRoleAssignmentOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlRoleAssignmentAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Creates or updates an Azure Cosmos DB SQL Role Assignment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlRoleAssignmentAndWait(roleAssignmentId:
        string, resourceGroupName: string, accountName: string,
        createUpdateSqlRoleAssignmentParameters:
        SqlRoleAssignmentCreateUpdateParameters, options?:
        SqlResourcesCreateUpdateSqlRoleAssignmentOptionalParams)
      parameters:
        - id: roleAssignmentId
          type: string
          description: The GUID for the Role Assignment.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: createUpdateSqlRoleAssignmentParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlRoleAssignmentCreateUpdateParameters" />
          description: |-
            The properties required to create or update a Role
                                                           Assignment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlRoleAssignmentOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlRoleAssignmentResponse"
          />&gt;
        description: ''
  - name: >-
      beginCreateUpdateSqlRoleDefinition(string, string, string,
      SqlRoleDefinitionCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlRoleDefinitionOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlRoleDefinition'
    package: '@azure/arm-cosmosdb'
    summary: Creates or updates an Azure Cosmos DB SQL Role Definition.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlRoleDefinition(roleDefinitionId: string,
        resourceGroupName: string, accountName: string,
        createUpdateSqlRoleDefinitionParameters:
        SqlRoleDefinitionCreateUpdateParameters, options?:
        SqlResourcesCreateUpdateSqlRoleDefinitionOptionalParams)
      parameters:
        - id: roleDefinitionId
          type: string
          description: The GUID for the Role Definition.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: createUpdateSqlRoleDefinitionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlRoleDefinitionCreateUpdateParameters" />
          description: |-
            The properties required to create or update a Role
                                                           Definition.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlRoleDefinitionOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlRoleDefinitionResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlRoleDefinitionResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginCreateUpdateSqlRoleDefinitionAndWait(string, string, string,
      SqlRoleDefinitionCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlRoleDefinitionOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlRoleDefinitionAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Creates or updates an Azure Cosmos DB SQL Role Definition.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlRoleDefinitionAndWait(roleDefinitionId:
        string, resourceGroupName: string, accountName: string,
        createUpdateSqlRoleDefinitionParameters:
        SqlRoleDefinitionCreateUpdateParameters, options?:
        SqlResourcesCreateUpdateSqlRoleDefinitionOptionalParams)
      parameters:
        - id: roleDefinitionId
          type: string
          description: The GUID for the Role Definition.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: createUpdateSqlRoleDefinitionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlRoleDefinitionCreateUpdateParameters" />
          description: |-
            The properties required to create or update a Role
                                                           Definition.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlRoleDefinitionOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlRoleDefinitionResponse"
          />&gt;
        description: ''
  - name: >-
      beginCreateUpdateSqlStoredProcedure(string, string, string, string,
      string, SqlStoredProcedureCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlStoredProcedure'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL storedProcedure
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlStoredProcedure(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        storedProcedureName: string, createUpdateSqlStoredProcedureParameters:
        SqlStoredProcedureCreateUpdateParameters, options?:
        SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type: string
          description: Cosmos DB storedProcedure name.
        - id: createUpdateSqlStoredProcedureParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlStoredProcedureCreateUpdateParameters"
            />
          description: |-
            The parameters to provide for the current SQL
                                                            storedProcedure.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlStoredProcedureResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlStoredProcedureResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginCreateUpdateSqlStoredProcedureAndWait(string, string, string, string,
      string, SqlStoredProcedureCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlStoredProcedureAndWait
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL storedProcedure
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlStoredProcedureAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, storedProcedureName: string,
        createUpdateSqlStoredProcedureParameters:
        SqlStoredProcedureCreateUpdateParameters, options?:
        SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type: string
          description: Cosmos DB storedProcedure name.
        - id: createUpdateSqlStoredProcedureParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlStoredProcedureCreateUpdateParameters"
            />
          description: |-
            The parameters to provide for the current SQL
                                                            storedProcedure.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlStoredProcedureResponse"
          />&gt;
        description: ''
  - name: >-
      beginCreateUpdateSqlTrigger(string, string, string, string, string,
      SqlTriggerCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlTriggerOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlTrigger'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL trigger
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlTrigger(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        triggerName: string, createUpdateSqlTriggerParameters:
        SqlTriggerCreateUpdateParameters, options?:
        SqlResourcesCreateUpdateSqlTriggerOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: triggerName
          type: string
          description: Cosmos DB trigger name.
        - id: createUpdateSqlTriggerParameters
          type: <xref uid="@azure/arm-cosmosdb.SqlTriggerCreateUpdateParameters" />
          description: The parameters to provide for the current SQL trigger.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlTriggerOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlTriggerResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlTriggerResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginCreateUpdateSqlTriggerAndWait(string, string, string, string, string,
      SqlTriggerCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlTriggerOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlTriggerAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL trigger
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlTriggerAndWait(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        triggerName: string, createUpdateSqlTriggerParameters:
        SqlTriggerCreateUpdateParameters, options?:
        SqlResourcesCreateUpdateSqlTriggerOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: triggerName
          type: string
          description: Cosmos DB trigger name.
        - id: createUpdateSqlTriggerParameters
          type: <xref uid="@azure/arm-cosmosdb.SqlTriggerCreateUpdateParameters" />
          description: The parameters to provide for the current SQL trigger.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlTriggerOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlTriggerResponse"
          />&gt;
        description: ''
  - name: >-
      beginCreateUpdateSqlUserDefinedFunction(string, string, string, string,
      string, SqlUserDefinedFunctionCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlUserDefinedFunction'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL userDefinedFunction
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateSqlUserDefinedFunction(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, userDefinedFunctionName: string,
        createUpdateSqlUserDefinedFunctionParameters:
        SqlUserDefinedFunctionCreateUpdateParameters, options?:
        SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type: string
          description: Cosmos DB userDefinedFunction name.
        - id: createUpdateSqlUserDefinedFunctionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlUserDefinedFunctionCreateUpdateParameters"
            />
          description: |-
            The parameters to provide for the current SQL
                                                                userDefinedFunction.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginCreateUpdateSqlUserDefinedFunctionAndWait(string, string, string,
      string, string, SqlUserDefinedFunctionCreateUpdateParameters,
      SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlUserDefinedFunctionAndWait
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB SQL userDefinedFunction
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        beginCreateUpdateSqlUserDefinedFunctionAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, userDefinedFunctionName: string,
        createUpdateSqlUserDefinedFunctionParameters:
        SqlUserDefinedFunctionCreateUpdateParameters, options?:
        SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type: string
          description: Cosmos DB userDefinedFunction name.
        - id: createUpdateSqlUserDefinedFunctionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlUserDefinedFunctionCreateUpdateParameters"
            />
          description: |-
            The parameters to provide for the current SQL
                                                                userDefinedFunction.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse"
          />&gt;
        description: ''
  - name: >-
      beginDeleteSqlContainer(string, string, string, string,
      SqlResourcesDeleteSqlContainerOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlContainer'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlContainer(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, options?:
        SqlResourcesDeleteSqlContainerOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlContainerOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: 'Promise&lt;PollerLike&lt;PollOperationState&lt;void&gt;, void&gt;&gt;'
        description: ''
  - name: >-
      beginDeleteSqlContainerAndWait(string, string, string, string,
      SqlResourcesDeleteSqlContainerOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlContainerAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlContainerAndWait(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options?: SqlResourcesDeleteSqlContainerOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlContainerOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      beginDeleteSqlDatabase(string, string, string,
      SqlResourcesDeleteSqlDatabaseOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlDatabase'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL database.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, options?:
        SqlResourcesDeleteSqlDatabaseOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlDatabaseOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: 'Promise&lt;PollerLike&lt;PollOperationState&lt;void&gt;, void&gt;&gt;'
        description: ''
  - name: >-
      beginDeleteSqlDatabaseAndWait(string, string, string,
      SqlResourcesDeleteSqlDatabaseOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlDatabaseAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL database.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlDatabaseAndWait(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        SqlResourcesDeleteSqlDatabaseOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlDatabaseOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      beginDeleteSqlRoleAssignment(string, string, string,
      SqlResourcesDeleteSqlRoleAssignmentOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlRoleAssignment'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL Role Assignment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlRoleAssignment(roleAssignmentId: string,
        resourceGroupName: string, accountName: string, options?:
        SqlResourcesDeleteSqlRoleAssignmentOptionalParams)
      parameters:
        - id: roleAssignmentId
          type: string
          description: The GUID for the Role Assignment.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlRoleAssignmentOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: 'Promise&lt;PollerLike&lt;PollOperationState&lt;void&gt;, void&gt;&gt;'
        description: ''
  - name: >-
      beginDeleteSqlRoleAssignmentAndWait(string, string, string,
      SqlResourcesDeleteSqlRoleAssignmentOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlRoleAssignmentAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL Role Assignment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlRoleAssignmentAndWait(roleAssignmentId: string,
        resourceGroupName: string, accountName: string, options?:
        SqlResourcesDeleteSqlRoleAssignmentOptionalParams)
      parameters:
        - id: roleAssignmentId
          type: string
          description: The GUID for the Role Assignment.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlRoleAssignmentOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      beginDeleteSqlRoleDefinition(string, string, string,
      SqlResourcesDeleteSqlRoleDefinitionOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlRoleDefinition'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL Role Definition.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlRoleDefinition(roleDefinitionId: string,
        resourceGroupName: string, accountName: string, options?:
        SqlResourcesDeleteSqlRoleDefinitionOptionalParams)
      parameters:
        - id: roleDefinitionId
          type: string
          description: The GUID for the Role Definition.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlRoleDefinitionOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: 'Promise&lt;PollerLike&lt;PollOperationState&lt;void&gt;, void&gt;&gt;'
        description: ''
  - name: >-
      beginDeleteSqlRoleDefinitionAndWait(string, string, string,
      SqlResourcesDeleteSqlRoleDefinitionOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlRoleDefinitionAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL Role Definition.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlRoleDefinitionAndWait(roleDefinitionId: string,
        resourceGroupName: string, accountName: string, options?:
        SqlResourcesDeleteSqlRoleDefinitionOptionalParams)
      parameters:
        - id: roleDefinitionId
          type: string
          description: The GUID for the Role Definition.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlRoleDefinitionOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      beginDeleteSqlStoredProcedure(string, string, string, string, string,
      SqlResourcesDeleteSqlStoredProcedureOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlStoredProcedure'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL storedProcedure.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlStoredProcedure(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        storedProcedureName: string, options?:
        SqlResourcesDeleteSqlStoredProcedureOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type: string
          description: Cosmos DB storedProcedure name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlStoredProcedureOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: 'Promise&lt;PollerLike&lt;PollOperationState&lt;void&gt;, void&gt;&gt;'
        description: ''
  - name: >-
      beginDeleteSqlStoredProcedureAndWait(string, string, string, string,
      string, SqlResourcesDeleteSqlStoredProcedureOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlStoredProcedureAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL storedProcedure.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlStoredProcedureAndWait(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        storedProcedureName: string, options?:
        SqlResourcesDeleteSqlStoredProcedureOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type: string
          description: Cosmos DB storedProcedure name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlStoredProcedureOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      beginDeleteSqlTrigger(string, string, string, string, string,
      SqlResourcesDeleteSqlTriggerOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlTrigger'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL trigger.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlTrigger(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, triggerName:
        string, options?: SqlResourcesDeleteSqlTriggerOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: triggerName
          type: string
          description: Cosmos DB trigger name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlTriggerOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: 'Promise&lt;PollerLike&lt;PollOperationState&lt;void&gt;, void&gt;&gt;'
        description: ''
  - name: >-
      beginDeleteSqlTriggerAndWait(string, string, string, string, string,
      SqlResourcesDeleteSqlTriggerOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlTriggerAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL trigger.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlTriggerAndWait(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        triggerName: string, options?:
        SqlResourcesDeleteSqlTriggerOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: triggerName
          type: string
          description: Cosmos DB trigger name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlTriggerOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      beginDeleteSqlUserDefinedFunction(string, string, string, string, string,
      SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlUserDefinedFunction'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string, options?:
        SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type: string
          description: Cosmos DB userDefinedFunction name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: 'Promise&lt;PollerLike&lt;PollOperationState&lt;void&gt;, void&gt;&gt;'
        description: ''
  - name: >-
      beginDeleteSqlUserDefinedFunctionAndWait(string, string, string, string,
      string, SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlUserDefinedFunctionAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteSqlUserDefinedFunctionAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, userDefinedFunctionName: string, options?:
        SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type: string
          description: Cosmos DB userDefinedFunction name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      beginMigrateSqlContainerToAutoscale(string, string, string, string,
      SqlResourcesMigrateSqlContainerToAutoscaleOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginMigrateSqlContainerToAutoscale'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL container from manual throughput to
      autoscale
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginMigrateSqlContainerToAutoscale(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options?: SqlResourcesMigrateSqlContainerToAutoscaleOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlContainerToAutoscaleOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlContainerToAutoscaleResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlContainerToAutoscaleResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginMigrateSqlContainerToAutoscaleAndWait(string, string, string, string,
      SqlResourcesMigrateSqlContainerToAutoscaleOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.SqlResources.beginMigrateSqlContainerToAutoscaleAndWait
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL container from manual throughput to
      autoscale
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginMigrateSqlContainerToAutoscaleAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, options?:
        SqlResourcesMigrateSqlContainerToAutoscaleOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlContainerToAutoscaleOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlContainerToAutoscaleResponse"
          />&gt;
        description: ''
  - name: >-
      beginMigrateSqlContainerToManualThroughput(string, string, string, string,
      SqlResourcesMigrateSqlContainerToManualThroughputOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.SqlResources.beginMigrateSqlContainerToManualThroughput
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL container from autoscale to manual
      throughput
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginMigrateSqlContainerToManualThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, options?:
        SqlResourcesMigrateSqlContainerToManualThroughputOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlContainerToManualThroughputOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlContainerToManualThroughputResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlContainerToManualThroughputResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginMigrateSqlContainerToManualThroughputAndWait(string, string, string,
      string, SqlResourcesMigrateSqlContainerToManualThroughputOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.SqlResources.beginMigrateSqlContainerToManualThroughputAndWait
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL container from autoscale to manual
      throughput
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        beginMigrateSqlContainerToManualThroughputAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, options?:
        SqlResourcesMigrateSqlContainerToManualThroughputOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlContainerToManualThroughputOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlContainerToManualThroughputResponse"
          />&gt;
        description: ''
  - name: >-
      beginMigrateSqlDatabaseToAutoscale(string, string, string,
      SqlResourcesMigrateSqlDatabaseToAutoscaleOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginMigrateSqlDatabaseToAutoscale'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL database from manual throughput to
      autoscale
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginMigrateSqlDatabaseToAutoscale(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        SqlResourcesMigrateSqlDatabaseToAutoscaleOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlDatabaseToAutoscaleOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlDatabaseToAutoscaleResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlDatabaseToAutoscaleResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginMigrateSqlDatabaseToAutoscaleAndWait(string, string, string,
      SqlResourcesMigrateSqlDatabaseToAutoscaleOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginMigrateSqlDatabaseToAutoscaleAndWait'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL database from manual throughput to
      autoscale
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginMigrateSqlDatabaseToAutoscaleAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, options?:
        SqlResourcesMigrateSqlDatabaseToAutoscaleOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlDatabaseToAutoscaleOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlDatabaseToAutoscaleResponse"
          />&gt;
        description: ''
  - name: >-
      beginMigrateSqlDatabaseToManualThroughput(string, string, string,
      SqlResourcesMigrateSqlDatabaseToManualThroughputOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginMigrateSqlDatabaseToManualThroughput'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL database from autoscale to manual
      throughput
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginMigrateSqlDatabaseToManualThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, options?:
        SqlResourcesMigrateSqlDatabaseToManualThroughputOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlDatabaseToManualThroughputOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlDatabaseToManualThroughputResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlDatabaseToManualThroughputResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginMigrateSqlDatabaseToManualThroughputAndWait(string, string, string,
      SqlResourcesMigrateSqlDatabaseToManualThroughputOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.SqlResources.beginMigrateSqlDatabaseToManualThroughputAndWait
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB SQL database from autoscale to manual
      throughput
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        beginMigrateSqlDatabaseToManualThroughputAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, options?:
        SqlResourcesMigrateSqlDatabaseToManualThroughputOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlDatabaseToManualThroughputOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesMigrateSqlDatabaseToManualThroughputResponse"
          />&gt;
        description: ''
  - name: >-
      beginRetrieveContinuousBackupInformation(string, string, string, string,
      ContinuousBackupRestoreLocation,
      SqlResourcesRetrieveContinuousBackupInformationOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginRetrieveContinuousBackupInformation'
    package: '@azure/arm-cosmosdb'
    summary: Retrieves continuous backup information for a container resource.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginRetrieveContinuousBackupInformation(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, location: ContinuousBackupRestoreLocation, options?:
        SqlResourcesRetrieveContinuousBackupInformationOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: location
          type: <xref uid="@azure/arm-cosmosdb.ContinuousBackupRestoreLocation" />
          description: The name of the continuous backup restore location.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesRetrieveContinuousBackupInformationOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesRetrieveContinuousBackupInformationResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesRetrieveContinuousBackupInformationResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginRetrieveContinuousBackupInformationAndWait(string, string, string,
      string, ContinuousBackupRestoreLocation,
      SqlResourcesRetrieveContinuousBackupInformationOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.SqlResources.beginRetrieveContinuousBackupInformationAndWait
    package: '@azure/arm-cosmosdb'
    summary: Retrieves continuous backup information for a container resource.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        beginRetrieveContinuousBackupInformationAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, location: ContinuousBackupRestoreLocation, options?:
        SqlResourcesRetrieveContinuousBackupInformationOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: location
          type: <xref uid="@azure/arm-cosmosdb.ContinuousBackupRestoreLocation" />
          description: The name of the continuous backup restore location.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesRetrieveContinuousBackupInformationOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesRetrieveContinuousBackupInformationResponse"
          />&gt;
        description: ''
  - name: >-
      beginUpdateSqlContainerThroughput(string, string, string, string,
      ThroughputSettingsUpdateParameters,
      SqlResourcesUpdateSqlContainerThroughputOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginUpdateSqlContainerThroughput'
    package: '@azure/arm-cosmosdb'
    summary: Update RUs per second of an Azure Cosmos DB SQL container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateSqlContainerThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?: SqlResourcesUpdateSqlContainerThroughputOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The parameters to provide for the RUs per second of the current
                                              SQL container.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesUpdateSqlContainerThroughputOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesUpdateSqlContainerThroughputResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesUpdateSqlContainerThroughputResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginUpdateSqlContainerThroughputAndWait(string, string, string, string,
      ThroughputSettingsUpdateParameters,
      SqlResourcesUpdateSqlContainerThroughputOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginUpdateSqlContainerThroughputAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Update RUs per second of an Azure Cosmos DB SQL container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateSqlContainerThroughputAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?: SqlResourcesUpdateSqlContainerThroughputOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The parameters to provide for the RUs per second of the current
                                              SQL container.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesUpdateSqlContainerThroughputOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesUpdateSqlContainerThroughputResponse"
          />&gt;
        description: ''
  - name: >-
      beginUpdateSqlDatabaseThroughput(string, string, string,
      ThroughputSettingsUpdateParameters,
      SqlResourcesUpdateSqlDatabaseThroughputOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginUpdateSqlDatabaseThroughput'
    package: '@azure/arm-cosmosdb'
    summary: Update RUs per second of an Azure Cosmos DB SQL database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateSqlDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, updateThroughputParameters:
        ThroughputSettingsUpdateParameters, options?:
        SqlResourcesUpdateSqlDatabaseThroughputOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The parameters to provide for the RUs per second of the current
                                              SQL database.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesUpdateSqlDatabaseThroughputOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesUpdateSqlDatabaseThroughputResponse"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.SqlResourcesUpdateSqlDatabaseThroughputResponse"
          />&gt;&gt;
        description: ''
  - name: >-
      beginUpdateSqlDatabaseThroughputAndWait(string, string, string,
      ThroughputSettingsUpdateParameters,
      SqlResourcesUpdateSqlDatabaseThroughputOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.beginUpdateSqlDatabaseThroughputAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Update RUs per second of an Azure Cosmos DB SQL database
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateSqlDatabaseThroughputAndWait(resourceGroupName:
        string, accountName: string, databaseName: string,
        updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?: SqlResourcesUpdateSqlDatabaseThroughputOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The parameters to provide for the RUs per second of the current
                                              SQL database.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesUpdateSqlDatabaseThroughputOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesUpdateSqlDatabaseThroughputResponse"
          />&gt;
        description: ''
  - name: >-
      getSqlContainer(string, string, string, string,
      SqlResourcesGetSqlContainerOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainer'
    package: '@azure/arm-cosmosdb'
    summary: Gets the SQL container under an existing Azure Cosmos DB database account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlContainer(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, options?:
        SqlResourcesGetSqlContainerOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesGetSqlContainerOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesGetSqlContainerResponse" />&gt;
        description: ''
  - name: >-
      getSqlContainerThroughput(string, string, string, string,
      SqlResourcesGetSqlContainerThroughputOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainerThroughput'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the RUs per second of the SQL container under an existing Azure
      Cosmos DB database account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlContainerThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options?: SqlResourcesGetSqlContainerThroughputOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesGetSqlContainerThroughputOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesGetSqlContainerThroughputResponse"
          />&gt;
        description: ''
  - name: >-
      getSqlDatabase(string, string, string,
      SqlResourcesGetSqlDatabaseOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabase'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the SQL database under an existing Azure Cosmos DB database account
      with the provided name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlDatabase(resourceGroupName: string, accountName: string,
        databaseName: string, options?:
        SqlResourcesGetSqlDatabaseOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesGetSqlDatabaseOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesGetSqlDatabaseResponse" />&gt;
        description: ''
  - name: >-
      getSqlDatabaseThroughput(string, string, string,
      SqlResourcesGetSqlDatabaseThroughputOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabaseThroughput'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the RUs per second of the SQL database under an existing Azure Cosmos
      DB database account with

      the provided name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        SqlResourcesGetSqlDatabaseThroughputOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesGetSqlDatabaseThroughputOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesGetSqlDatabaseThroughputResponse"
          />&gt;
        description: ''
  - name: >-
      getSqlRoleAssignment(string, string, string,
      SqlResourcesGetSqlRoleAssignmentOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlRoleAssignment'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Retrieves the properties of an existing Azure Cosmos DB SQL Role
      Assignment with the given Id.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlRoleAssignment(roleAssignmentId: string,
        resourceGroupName: string, accountName: string, options?:
        SqlResourcesGetSqlRoleAssignmentOptionalParams)
      parameters:
        - id: roleAssignmentId
          type: string
          description: The GUID for the Role Assignment.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesGetSqlRoleAssignmentOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesGetSqlRoleAssignmentResponse"
          />&gt;
        description: ''
  - name: >-
      getSqlRoleDefinition(string, string, string,
      SqlResourcesGetSqlRoleDefinitionOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlRoleDefinition'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Retrieves the properties of an existing Azure Cosmos DB SQL Role
      Definition with the given Id.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlRoleDefinition(roleDefinitionId: string,
        resourceGroupName: string, accountName: string, options?:
        SqlResourcesGetSqlRoleDefinitionOptionalParams)
      parameters:
        - id: roleDefinitionId
          type: string
          description: The GUID for the Role Definition.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesGetSqlRoleDefinitionOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesGetSqlRoleDefinitionResponse"
          />&gt;
        description: ''
  - name: >-
      getSqlStoredProcedure(string, string, string, string, string,
      SqlResourcesGetSqlStoredProcedureOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlStoredProcedure'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the SQL storedProcedure under an existing Azure Cosmos DB database
      account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlStoredProcedure(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string,
        storedProcedureName: string, options?:
        SqlResourcesGetSqlStoredProcedureOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type: string
          description: Cosmos DB storedProcedure name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesGetSqlStoredProcedureOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesGetSqlStoredProcedureResponse"
          />&gt;
        description: ''
  - name: >-
      getSqlTrigger(string, string, string, string, string,
      SqlResourcesGetSqlTriggerOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlTrigger'
    package: '@azure/arm-cosmosdb'
    summary: Gets the SQL trigger under an existing Azure Cosmos DB database account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlTrigger(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, triggerName: string,
        options?: SqlResourcesGetSqlTriggerOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: triggerName
          type: string
          description: Cosmos DB trigger name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesGetSqlTriggerOptionalParams" />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesGetSqlTriggerResponse" />&gt;
        description: ''
  - name: >-
      getSqlUserDefinedFunction(string, string, string, string, string,
      SqlResourcesGetSqlUserDefinedFunctionOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.getSqlUserDefinedFunction'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the SQL userDefinedFunction under an existing Azure Cosmos DB
      database account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string, options?:
        SqlResourcesGetSqlUserDefinedFunctionOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type: string
          description: Cosmos DB userDefinedFunction name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesGetSqlUserDefinedFunctionOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.SqlResourcesGetSqlUserDefinedFunctionResponse"
          />&gt;
        description: ''
  - name: >-
      listSqlContainers(string, string, string,
      SqlResourcesListSqlContainersOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlContainers'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Lists the SQL container under an existing Azure Cosmos DB database
      account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlContainers(resourceGroupName: string, accountName:
        string, databaseName: string, options?:
        SqlResourcesListSqlContainersOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesListSqlContainersOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-cosmosdb.SqlContainerGetResults" />&gt;
        description: ''
  - name: >-
      listSqlDatabases(string, string,
      SqlResourcesListSqlDatabasesOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlDatabases'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Lists the SQL databases under an existing Azure Cosmos DB database
      account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlDatabases(resourceGroupName: string, accountName:
        string, options?: SqlResourcesListSqlDatabasesOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesListSqlDatabasesOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-cosmosdb.SqlDatabaseGetResults" />&gt;
        description: ''
  - name: >-
      listSqlRoleAssignments(string, string,
      SqlResourcesListSqlRoleAssignmentsOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlRoleAssignments'
    package: '@azure/arm-cosmosdb'
    summary: Retrieves the list of all Azure Cosmos DB SQL Role Assignments.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlRoleAssignments(resourceGroupName: string, accountName:
        string, options?: SqlResourcesListSqlRoleAssignmentsOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesListSqlRoleAssignmentsOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-cosmosdb.SqlRoleAssignmentGetResults" />&gt;
        description: ''
  - name: >-
      listSqlRoleDefinitions(string, string,
      SqlResourcesListSqlRoleDefinitionsOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlRoleDefinitions'
    package: '@azure/arm-cosmosdb'
    summary: Retrieves the list of all Azure Cosmos DB SQL Role Definitions.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlRoleDefinitions(resourceGroupName: string, accountName:
        string, options?: SqlResourcesListSqlRoleDefinitionsOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesListSqlRoleDefinitionsOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-cosmosdb.SqlRoleDefinitionGetResults" />&gt;
        description: ''
  - name: >-
      listSqlStoredProcedures(string, string, string, string,
      SqlResourcesListSqlStoredProceduresOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlStoredProcedures'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Lists the SQL storedProcedure under an existing Azure Cosmos DB database
      account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlStoredProcedures(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, options?:
        SqlResourcesListSqlStoredProceduresOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesListSqlStoredProceduresOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-cosmosdb.SqlStoredProcedureGetResults" />&gt;
        description: ''
  - name: >-
      listSqlTriggers(string, string, string, string,
      SqlResourcesListSqlTriggersOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlTriggers'
    package: '@azure/arm-cosmosdb'
    summary: Lists the SQL trigger under an existing Azure Cosmos DB database account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlTriggers(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, options?:
        SqlResourcesListSqlTriggersOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesListSqlTriggersOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-cosmosdb.SqlTriggerGetResults" />&gt;
        description: ''
  - name: >-
      listSqlUserDefinedFunctions(string, string, string, string,
      SqlResourcesListSqlUserDefinedFunctionsOptionalParams)
    uid: '@azure/arm-cosmosdb.SqlResources.listSqlUserDefinedFunctions'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Lists the SQL userDefinedFunction under an existing Azure Cosmos DB
      database account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listSqlUserDefinedFunctions(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options?: SqlResourcesListSqlUserDefinedFunctionsOptionalParams)
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: containerName
          type: string
          description: Cosmos DB container name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.SqlResourcesListSqlUserDefinedFunctionsOptionalParams"
            />
          description: |
            The options parameters.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-cosmosdb.SqlUserDefinedFunctionGetResults" />&gt;
        description: ''
