### YamlMime:TSType
name: Sender
uid: '@azure/service-bus.Sender'
package: '@azure/service-bus'
summary: >-
  A Sender can be used to send messages, schedule messages to be sent at a later
  time

  and cancel such scheduled messages.

  Use the `createSender` function on the ServiceBusClient instantiate a Sender.

  The Sender class is an abstraction over the underlying AMQP sender link.
fullName: Sender
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: entityPath
    uid: '@azure/service-bus.Sender.entityPath'
    package: '@azure/service-bus'
    summary: Path of the entity for which the sender has been created.
    fullName: entityPath
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'entityPath: string'
      return:
        type: string
        description: ''
  - name: isClosed
    uid: '@azure/service-bus.Sender.isClosed'
    package: '@azure/service-bus'
    summary: >-
      Returns `true` if either the sender or the client that created it has been
      closed
    fullName: isClosed
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isClosed: boolean'
      return:
        type: boolean
        description: ''
methods:
  - name: 'cancelScheduledMessages(Long | Long[], OperationOptionsBase)'
    uid: '@azure/service-bus.Sender.cancelScheduledMessages'
    package: '@azure/service-bus'
    summary: >-
      Cancels multiple messages that were scheduled to appear on a ServiceBus
      Queue/Subscription.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelScheduledMessages(sequenceNumbers: Long | Long[],
        options?: OperationOptionsBase)
      parameters:
        - id: sequenceNumbers
          type: 'Long | Long[]'
          description: >-
            Sequence number or an array of sequence numbers of the messages to
            be cancelled.
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        type: Promise&lt;void&gt;
        description: Promise<void>
  - name: close()
    uid: '@azure/service-bus.Sender.close'
    package: '@azure/service-bus'
    summary: >-
      Closes the underlying AMQP sender link.

      Once closed, the sender cannot be used for any further operations.

      Use the `createSender` function on the QueueClient or TopicClient to
      instantiate a new Sender
    isPreview: false
    isDeprecated: false
    syntax:
      content: function close()
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: createBatch(CreateBatchOptions)
    uid: '@azure/service-bus.Sender.createBatch'
    package: '@azure/service-bus'
    summary: >-
      Creates an instance of `ServiceBusMessageBatch` to which one can add
      messages until the maximum supported size is reached.

      The batch can be passed to the <xref:send> method to send the messages to
      Azure Service Bus.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createBatch(options?: CreateBatchOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/service-bus.CreateBatchOptions" />
          description: >
            Configures the behavior of the batch.

            - `maxSizeInBytes`: The upper limit for the size of batch. The
            `tryAdd` function will return `false` after this limit is reached.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/service-bus.ServiceBusMessageBatch"
          />&gt;
        description: ''
  - name: open(SenderOpenOptions)
    uid: '@azure/service-bus.Sender.open'
    package: '@azure/service-bus'
    summary: |
      Opens the AMQP link to Azure Service Bus from the sender.
      It is not necessary to call this method in order to use the sender. It is
      recommended to call this before your first sendMessages() call if you
      want to front load the work of setting up the AMQP link to the service.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function open(options?: SenderOpenOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/service-bus.SenderOpenOptions" />
          description: |
            Options bag to pass an abort signal.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      scheduleMessages(Date, ServiceBusMessage | ServiceBusMessage[],
      OperationOptionsBase)
    uid: '@azure/service-bus.Sender.scheduleMessages'
    package: '@azure/service-bus'
    summary: >-
      Schedules given messages to appear on Service Bus Queue/Subscription at a
      later time.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function scheduleMessages(scheduledEnqueueTimeUtc: Date, messages:
        ServiceBusMessage | ServiceBusMessage[], options?: OperationOptionsBase)
      parameters:
        - id: scheduledEnqueueTimeUtc
          type: Date
          description: The UTC time at which the messages should be enqueued.
        - id: messages
          type: >-
            <xref uid="@azure/service-bus.ServiceBusMessage" /> | <xref
            uid="@azure/service-bus.ServiceBusMessage" />[]
          description: Message or an array of messages that need to be scheduled.
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        type: 'Promise&lt;Long[]&gt;'
        description: >-
          Promise<Long[]> - The sequence numbers of messages that were
          scheduled.

          You will need the sequence number if you intend to cancel the
          scheduling of the messages.

          Save the `Long` type as-is in your application without converting to
          number. Since JavaScript

          only supports 53 bit numbers, converting the `Long` to number will
          cause loss in precision.
  - name: >-
      sendMessages(ServiceBusMessage | ServiceBusMessage[] |
      ServiceBusMessageBatch, OperationOptionsBase)
    uid: '@azure/service-bus.Sender.sendMessages'
    package: '@azure/service-bus'
    summary: >
      Sends the given messages after creating an AMQP Sender link if it doesn't
      already exist.

      Consider awaiting on open() beforehand to front load the work of link
      creation if needed.

      - To send messages to a `session` and/or `partition` enabled Queue/Topic,
      set the `sessionId`

      and/or `partitionKey` properties respectively on the messages.

      - All messages passed to the same sendMessages() call should have the same
      `sessionId` (if using
       sessions) and the same `partitionKey` (if using partitions).
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendMessages(messages: ServiceBusMessage | ServiceBusMessage[]
        | ServiceBusMessageBatch, options?: OperationOptionsBase)
      parameters:
        - id: messages
          type: >-
            <xref uid="@azure/service-bus.ServiceBusMessage" /> | <xref
            uid="@azure/service-bus.ServiceBusMessage" />[] | <xref
            uid="@azure/service-bus.ServiceBusMessageBatch" />
          description: >-
            A single message or an array of messages or a batch of messages
            created via the createBatch()

            method to send.
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        type: Promise&lt;void&gt;
        description: Promise<void>
