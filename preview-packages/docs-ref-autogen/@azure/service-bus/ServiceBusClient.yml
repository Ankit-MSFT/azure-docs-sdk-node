### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.ServiceBusClient'
    name: ServiceBusClient
    fullName: ServiceBusClient
    children:
      - '@azure/service-bus.ServiceBusClient.close'
      - '@azure/service-bus.ServiceBusClient.createReceiver'
      - '@azure/service-bus.ServiceBusClient.createReceiver_1'
      - '@azure/service-bus.ServiceBusClient.createReceiver_2'
      - '@azure/service-bus.ServiceBusClient.createReceiver_3'
      - '@azure/service-bus.ServiceBusClient.createSender'
      - '@azure/service-bus.ServiceBusClient.createSessionReceiver'
      - '@azure/service-bus.ServiceBusClient.createSessionReceiver_1'
      - '@azure/service-bus.ServiceBusClient.createSessionReceiver_2'
      - '@azure/service-bus.ServiceBusClient.createSessionReceiver_3'
      - '@azure/service-bus.ServiceBusClient.fullyQualifiedNamespace'
      - '@azure/service-bus.ServiceBusClient.constructor'
      - '@azure/service-bus.ServiceBusClient.constructor_1'
    langs:
      - typeScript
    type: class
    summary: >-
      A client that can create Sender instances for sending messages to queues
      and

      topics as well as Receiver instances to receive messages from queues and
      subscriptions.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Closes the underlying AMQP connection.

      NOTE: this will also disconnect any Receiver or Sender instances created
      from this

      instance.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createReceiver'
    name: 'createReceiver(string, CreateReceiverOptions<"peekLock">)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a receiver for an Azure Service Bus queue in peekLock mode. No
      connection is made

      to the service until one of the methods on the receiver is called.

      To target sub queues like the dead letter queue or the transfer dead
      letter queue, provide the

      `subQueue` in the options. To learn more about dead letter queues, see

      https://docs.microsoft.com/azure/service-bus-messaging/service-bus-dead-letter-queues


      If the receiveMode is not provided in the options, it defaults to the
      "peekLock" mode.

      In peekLock mode, the receiver has a lock on the message for the duration
      specified on the

      queue.


      Messages that are not settled within the lock duration will be redelivered
      as many times as

      the max delivery count set on the queue, after which they get sent to a
      separate dead letter

      queue.


      You can settle a message by calling complete(), abandon(), defer() or
      deadletter() methods on

      the message.


      More information about how peekLock and message settlement works here:

      https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock
    syntax:
      content: >-
        function createReceiver(queueName: string, options?:
        CreateReceiverOptions<"peekLock">)
      parameters:
        - id: queueName
          type:
            - string
          description: The name of the queue to receive from.
        - id: options
          type:
            - '@azure/service-bus.CreateReceiverOptions<"peekLock">'
          description: 'Options to pass the receiveMode, defaulted to peekLock.'
          optional: true
      return:
        type:
          - >-
            @azure/service-bus.ServiceBusReceiver<@azure/service-bus.ServiceBusReceivedMessageWithLock>
        description: >-
          A receiver that can be used to receive messages of the form
          `ServiceBusReceivedMessageWithLock`
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createReceiver_1'
    name: 'createReceiver(string, CreateReceiverOptions<"receiveAndDelete">)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a receiver for an Azure Service Bus queue in receiveAndDelete
      mode. No connection is made

      to the service until one of the methods on the receiver is called.

      To target sub queues like the dead letter queue or the transfer dead
      letter queue, provide the

      `subQueue` in the options. To learn more about dead letter queues, see

      https://docs.microsoft.com/azure/service-bus-messaging/service-bus-dead-letter-queues


      If the receiveMode is not provided in the options, it defaults to the
      "peekLock" mode.

      In receiveAndDelete mode, messages are deleted from Service Bus as they
      are received.
    syntax:
      content: >-
        function createReceiver(queueName: string, options:
        CreateReceiverOptions<"receiveAndDelete">)
      parameters:
        - id: queueName
          type:
            - string
          description: The name of the queue to receive from.
        - id: options
          type:
            - '@azure/service-bus.CreateReceiverOptions<"receiveAndDelete">'
          description: 'Options to pass the receiveMode, defaulted to receiveAndDelete.'
      return:
        type:
          - >-
            @azure/service-bus.ServiceBusReceiver<@azure/service-bus.ServiceBusReceivedMessage>
        description: >-
          A receiver that can be used to receive messages of the form
          `ServiceBusReceivedMessage`
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createReceiver_2'
    name: 'createReceiver(string, string, CreateReceiverOptions<"peekLock">)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a receiver for an Azure Service Bus subscription in peekLock mode.
      No connection is made

      to the service until one of the methods on the receiver is called.

      To target sub queues like the dead letter queue or the transfer dead
      letter queue, provide the

      `subQueue` in the options. To learn more about dead letter queues, see

      https://docs.microsoft.com/azure/service-bus-messaging/service-bus-dead-letter-queues


      If the receiveMode is not provided in the options, it defaults to the
      "peekLock" mode.

      In peekLock mode, the receiver has a lock on the message for the duration
      specified on the

      subscription.


      Messages that are not settled within the lock duration will be redelivered
      as many times as

      the max delivery count set on the subscription, after which they get sent
      to a separate dead letter

      queue.


      You can settle a message by calling complete(), abandon(), defer() or
      deadletter() methods on

      the message.


      More information about how peekLock and message settlement works here:

      https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock
    syntax:
      content: >-
        function createReceiver(topicName: string, subscriptionName: string,
        options?: CreateReceiverOptions<"peekLock">)
      parameters:
        - id: topicName
          type:
            - string
          description: Name of the topic for the subscription we want to receive from.
        - id: subscriptionName
          type:
            - string
          description: >-
            Name of the subscription (under the `topic`) that we want to receive
            from.
        - id: options
          type:
            - '@azure/service-bus.CreateReceiverOptions<"peekLock">'
          description: 'Options to pass the receiveMode, defaulted to peekLock.'
          optional: true
      return:
        type:
          - >-
            @azure/service-bus.ServiceBusReceiver<@azure/service-bus.ServiceBusReceivedMessageWithLock>
        description: >-
          A receiver that can be used to receive messages of the form
          `ServiceBusReceivedMessageWithLock`
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createReceiver_3'
    name: 'createReceiver(string, string, CreateReceiverOptions<"receiveAndDelete">)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a receiver for an Azure Service Bus subscription in
      receiveAndDelete mode. No connection is made

      to the service until one of the methods on the receiver is called.

      To target sub queues like the dead letter queue or the transfer dead
      letter queue, provide the

      `subQueue` in the options. To learn more about dead letter queues, see

      https://docs.microsoft.com/azure/service-bus-messaging/service-bus-dead-letter-queues


      If the receiveMode is not provided in the options, it defaults to the
      "peekLock" mode.

      In receiveAndDelete mode, messages are deleted from Service Bus as they
      are received.
    syntax:
      content: >-
        function createReceiver(topicName: string, subscriptionName: string,
        options: CreateReceiverOptions<"receiveAndDelete">)
      parameters:
        - id: topicName
          type:
            - string
          description: Name of the topic for the subscription we want to receive from.
        - id: subscriptionName
          type:
            - string
          description: >-
            Name of the subscription (under the `topic`) that we want to receive
            from.
        - id: options
          type:
            - '@azure/service-bus.CreateReceiverOptions<"receiveAndDelete">'
          description: 'Options to pass the receiveMode, defaulted to receiveAndDelete.'
      return:
        type:
          - >-
            @azure/service-bus.ServiceBusReceiver<@azure/service-bus.ServiceBusReceivedMessage>
        description: >-
          A receiver that can be used to receive messages of the form
          `ServiceBusReceivedMessage`
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createSender'
    name: createSender(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a Sender which can be used to send messages, schedule messages to
      be

      sent at a later time and cancel such scheduled messages. No connection is
      made

      to the service until one of the methods on the sender is called.
    syntax:
      content: 'function createSender(queueOrTopicName: string)'
      parameters:
        - id: queueOrTopicName
          type:
            - string
          description: |
            The name of a queue or topic to send messages to.
      return:
        type:
          - '@azure/service-bus.ServiceBusSender'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createSessionReceiver'
    name: 'createSessionReceiver(string, CreateSessionReceiverOptions<"peekLock">)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a receiver for a session enabled Azure Service Bus queue in
      peekLock mode.

      If the receiveMode is not provided in the options, it defaults to the
      "peekLock" mode.

      In peekLock mode, the receiver has a lock on the session for the duration
      specified on the

      queue.


      Messages that are not settled within the lock duration will be redelivered
      as many times as

      the max delivery count set on the queue, after which they get sent to a
      separate dead letter

      queue.


      You can settle a message by calling complete(), abandon(), defer() or
      deadletter() methods on

      the message.


      More information about how peekLock and message settlement works here:

      https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock
    syntax:
      content: >-
        function createSessionReceiver(queueName: string, options?:
        CreateSessionReceiverOptions<"peekLock">)
      parameters:
        - id: queueName
          type:
            - string
          description: The name of the queue to receive from.
        - id: options
          type:
            - '@azure/service-bus.CreateSessionReceiverOptions<"peekLock">'
          description: >-
            Options include receiveMode(defaulted to peekLock), options to
            create session receiver.
          optional: true
      return:
        type:
          - >-
            Promise<@azure/service-bus.ServiceBusSessionReceiver<@azure/service-bus.ServiceBusReceivedMessageWithLock>>
        description: >-
          A receiver that can be used to receive messages of the form
          `ServiceBusReceivedMessageWithLock`
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createSessionReceiver_1'
    name: >-
      createSessionReceiver(string,
      CreateSessionReceiverOptions<"receiveAndDelete">)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a receiver for a session enabled Azure Service Bus queue in
      receiveAndDelete mode.

      If the receiveMode is not provided in the options, it defaults to the
      "peekLock" mode.

      In receiveAndDelete mode, messages are deleted from Service Bus as they
      are received.
    syntax:
      content: >-
        function createSessionReceiver(queueName: string, options:
        CreateSessionReceiverOptions<"receiveAndDelete">)
      parameters:
        - id: queueName
          type:
            - string
          description: The name of the queue to receive from.
        - id: options
          type:
            - >-
              @azure/service-bus.CreateSessionReceiverOptions<"receiveAndDelete">
          description: >-
            Options include receiveMode(defaulted to receiveAndDelete), options
            to create session receiver.
      return:
        type:
          - >-
            Promise<@azure/service-bus.ServiceBusSessionReceiver<@azure/service-bus.ServiceBusReceivedMessage>>
        description: >-
          A receiver that can be used to receive messages of the form
          `ServiceBusReceivedMessage`
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createSessionReceiver_2'
    name: >-
      createSessionReceiver(string, string,
      CreateSessionReceiverOptions<"peekLock">)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a receiver for a session enabled Azure Service Bus subscription in
      peekLock mode.

      If the receiveMode is not provided in the options, it defaults to the
      "peekLock" mode.

      In peekLock mode, the receiver has a lock on the session for the duration
      specified on the

      subscription.


      Messages that are not settled within the lock duration will be redelivered
      as many times as

      the max delivery count set on the subscription, after which they get sent
      to a separate dead letter

      queue.


      You can settle a message by calling complete(), abandon(), defer() or
      deadletter() methods on

      the message.


      More information about how peekLock and message settlement works here:

      https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock
    syntax:
      content: >-
        function createSessionReceiver(topicName: string, subscriptionName:
        string, options?: CreateSessionReceiverOptions<"peekLock">)
      parameters:
        - id: topicName
          type:
            - string
          description: Name of the topic for the subscription we want to receive from.
        - id: subscriptionName
          type:
            - string
          description: >-
            Name of the subscription (under the `topic`) that we want to receive
            from.
        - id: options
          type:
            - '@azure/service-bus.CreateSessionReceiverOptions<"peekLock">'
          description: >-
            Options include receiveMode(defaulted to peekLock), options to
            create session receiver.
          optional: true
      return:
        type:
          - >-
            Promise<@azure/service-bus.ServiceBusSessionReceiver<@azure/service-bus.ServiceBusReceivedMessageWithLock>>
        description: >-
          A receiver that can be used to receive messages of the form
          `ServiceBusReceivedMessageWithLock`
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.createSessionReceiver_3'
    name: >-
      createSessionReceiver(string, string,
      CreateSessionReceiverOptions<"receiveAndDelete">)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a receiver for a session enabled Azure Service Bus subscription in
      receiveAndDelete mode.

      If the receiveMode is not provided in the options, it defaults to the
      "peekLock" mode.

      In receiveAndDelete mode, messages are deleted from Service Bus as they
      are received.
    syntax:
      content: >-
        function createSessionReceiver(topicName: string, subscriptionName:
        string, options: CreateSessionReceiverOptions<"receiveAndDelete">)
      parameters:
        - id: topicName
          type:
            - string
          description: Name of the topic for the subscription we want to receive from.
        - id: subscriptionName
          type:
            - string
          description: >-
            Name of the subscription (under the `topic`) that we want to receive
            from.
        - id: options
          type:
            - >-
              @azure/service-bus.CreateSessionReceiverOptions<"receiveAndDelete">
          description: >-
            Options include receiveMode(defaulted to receiveAndDelete), options
            to create session receiver.
      return:
        type:
          - >-
            Promise<@azure/service-bus.ServiceBusSessionReceiver<@azure/service-bus.ServiceBusReceivedMessage>>
        description: >-
          A receiver that can be used to receive messages of the form
          `ServiceBusReceivedMessage`
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.fullyQualifiedNamespace'
    name: fullyQualifiedNamespace
    fullName: fullyQualifiedNamespace
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The fully qualified namespace of the Service Bus instance for which this
      client is created.

      This is likely to be similar to <yournamespace>.servicebus.windows.net.
    syntax:
      content: 'fullyQualifiedNamespace: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.constructor'
    name: 'ServiceBusClient(string, ServiceBusClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates an instance of the ServiceBusClient class which can be used to
      create senders and receivers to

      the Azure Service Bus namespace provided in the connection string. No
      connection is made to the service

      until the senders/receivers created with the client are used to
      send/receive messages.
    syntax:
      content: >-
        new ServiceBusClient(connectionString: string, options?:
        ServiceBusClientOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            A connection string for Azure Service Bus namespace.

            NOTE: this connection string can contain an EntityPath, which is
            ignored.
        - id: options
          type:
            - '@azure/service-bus.ServiceBusClientOptions'
          description: |
            Options for the service bus client.
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusClient.constructor_1'
    name: 'ServiceBusClient(string, TokenCredential, ServiceBusClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates an instance of the ServiceBusClient class which can be used to
      create senders and receivers to

      the Azure Service Bus namespace provided. No connection is made to the
      service until

      the senders/receivers created with the client are used to send/receive
      messages.
    syntax:
      content: >-
        new ServiceBusClient(fullyQualifiedNamespace: string, credential:
        TokenCredential, options?: ServiceBusClientOptions)
      parameters:
        - id: fullyQualifiedNamespace
          type:
            - string
          description: |-
            The full namespace of your Service Bus instance which is
            likely to be similar to <yournamespace>.servicebus.windows.net.
        - id: credential
          type:
            - TokenCredential
          description: >-
            A credential object used by the client to get the token to
            authenticate the connection

            with the Azure Service Bus. See &commat;azure/identity for creating
            the credentials.

            If you're using an own implementation of the `TokenCredential`
            interface against AAD, then set the "scopes" for service-bus

            to be `["https://servicebus.azure.net//user_impersonation"]` to get
            the appropriate token.
        - id: options
          type:
            - '@azure/service-bus.ServiceBusClientOptions'
          description: |
            Options for the service bus client.
          optional: true
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ServiceBusClientOptions'
    name: ServiceBusClientOptions
    spec.typeScript:
      - name: ServiceBusClientOptions
        fullName: ServiceBusClientOptions
        uid: '@azure/service-bus.ServiceBusClientOptions'
  - uid: '@azure/service-bus.CreateReceiverOptions<"peekLock">'
    name: CreateReceiverOptions<"peekLock">
    spec.typeScript:
      - name: CreateReceiverOptions
        fullName: CreateReceiverOptions
        uid: '@azure/service-bus.CreateReceiverOptions'
      - name: <"peekLock">
        fullName: <"peekLock">
  - uid: >-
      @azure/service-bus.ServiceBusReceiver<@azure/service-bus.ServiceBusReceivedMessageWithLock>
    name: ServiceBusReceivedMessageWithLock>
    spec.typeScript:
      - name: ServiceBusReceiver
        fullName: ServiceBusReceiver
        uid: '@azure/service-bus.ServiceBusReceiver'
      - name: <
        fullName: <
      - name: ServiceBusReceivedMessageWithLock
        fullName: ServiceBusReceivedMessageWithLock
        uid: '@azure/service-bus.ServiceBusReceivedMessageWithLock'
      - name: '>'
        fullName: '>'
  - uid: '@azure/service-bus.CreateReceiverOptions<"receiveAndDelete">'
    name: CreateReceiverOptions<"receiveAndDelete">
    spec.typeScript:
      - name: CreateReceiverOptions
        fullName: CreateReceiverOptions
        uid: '@azure/service-bus.CreateReceiverOptions'
      - name: <"receiveAndDelete">
        fullName: <"receiveAndDelete">
  - uid: >-
      @azure/service-bus.ServiceBusReceiver<@azure/service-bus.ServiceBusReceivedMessage>
    name: ServiceBusReceivedMessage>
    spec.typeScript:
      - name: ServiceBusReceiver
        fullName: ServiceBusReceiver
        uid: '@azure/service-bus.ServiceBusReceiver'
      - name: <
        fullName: <
      - name: ServiceBusReceivedMessage
        fullName: ServiceBusReceivedMessage
        uid: '@azure/service-bus.ServiceBusReceivedMessage'
      - name: '>'
        fullName: '>'
  - uid: '@azure/service-bus.ServiceBusSender'
    name: ServiceBusSender
    spec.typeScript:
      - name: ServiceBusSender
        fullName: ServiceBusSender
        uid: '@azure/service-bus.ServiceBusSender'
  - uid: '@azure/service-bus.CreateSessionReceiverOptions<"peekLock">'
    name: CreateSessionReceiverOptions<"peekLock">
    spec.typeScript:
      - name: CreateSessionReceiverOptions
        fullName: CreateSessionReceiverOptions
        uid: '@azure/service-bus.CreateSessionReceiverOptions'
      - name: <"peekLock">
        fullName: <"peekLock">
  - uid: >-
      Promise<@azure/service-bus.ServiceBusSessionReceiver<@azure/service-bus.ServiceBusReceivedMessageWithLock>>
    name: ServiceBusReceivedMessageWithLock>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusSessionReceiver
        fullName: ServiceBusSessionReceiver
        uid: '@azure/service-bus.ServiceBusSessionReceiver'
      - name: <
        fullName: <
      - name: ServiceBusReceivedMessageWithLock
        fullName: ServiceBusReceivedMessageWithLock
        uid: '@azure/service-bus.ServiceBusReceivedMessageWithLock'
      - name: '>>'
        fullName: '>>'
  - uid: '@azure/service-bus.CreateSessionReceiverOptions<"receiveAndDelete">'
    name: CreateSessionReceiverOptions<"receiveAndDelete">
    spec.typeScript:
      - name: CreateSessionReceiverOptions
        fullName: CreateSessionReceiverOptions
        uid: '@azure/service-bus.CreateSessionReceiverOptions'
      - name: <"receiveAndDelete">
        fullName: <"receiveAndDelete">
  - uid: >-
      Promise<@azure/service-bus.ServiceBusSessionReceiver<@azure/service-bus.ServiceBusReceivedMessage>>
    name: ServiceBusReceivedMessage>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusSessionReceiver
        fullName: ServiceBusSessionReceiver
        uid: '@azure/service-bus.ServiceBusSessionReceiver'
      - name: <
        fullName: <
      - name: ServiceBusReceivedMessage
        fullName: ServiceBusReceivedMessage
        uid: '@azure/service-bus.ServiceBusReceivedMessage'
      - name: '>>'
        fullName: '>>'
