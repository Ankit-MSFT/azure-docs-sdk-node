### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.SubscriptionClient'
    name: SubscriptionClient
    fullName: SubscriptionClient
    children:
      - '@azure/service-bus.SubscriptionClient.addRule'
      - '@azure/service-bus.SubscriptionClient.close'
      - '@azure/service-bus.SubscriptionClient.defaultRuleName'
      - '@azure/service-bus.SubscriptionClient.getReceiver'
      - '@azure/service-bus.SubscriptionClient.getRules'
      - '@azure/service-bus.SubscriptionClient.getSessionReceiver'
      - '@azure/service-bus.SubscriptionClient.peek'
      - '@azure/service-bus.SubscriptionClient.peekBySequenceNumber'
      - '@azure/service-bus.SubscriptionClient.removeRule'
      - '@azure/service-bus.SubscriptionClient.constructor'
      - '@azure/service-bus.SubscriptionClient.subscriptionName'
      - '@azure/service-bus.SubscriptionClient.topicPath'
    langs:
      - typeScript
    type: class
    summary: >-
      Describes the client that will maintain an AMQP connection to a ServiceBus
      Subscription.
    extends:
      name: '@azure/service-bus.Client'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.addRule'
    name: 'addRule(string, boolean | string | CorrelationFilter, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Adds a rule on the subscription as defined by the given rule name, filter
      and action.

      Remember to remove the default true filter on the subscription before
      adding a rule,

      otherwise, the added rule will have no affect as the true filter will
      always result in

      the subscription receiving all messages.
    syntax:
      content: >-
        function addRule(ruleName: string, filter: boolean | string |
        CorrelationFilter, sqlRuleActionExpression?: string)
      parameters:
        - id: ruleName
          type:
            - string
          description: Name of the rule
        - id: filter
          type:
            - boolean | string | @azure/service-bus.CorrelationFilter
          description: >-
            A Boolean, SQL expression or a Correlation filter. For SQL Filter
            syntax, see

            [SQLFilter
            syntax](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-sql-filter).
        - id: sqlRuleActionExpression
          type:
            - string
          description: >
            Action to perform if the message satisfies the filtering expression.
            For SQL Rule Action syntax,

            see [SQLRuleAction
            syntax](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-sql-rule-action).
          optional: true
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: Closes the AMQP connection to the ServiceBus Subscription for this client.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.defaultRuleName'
    name: defaultRuleName
    fullName: defaultRuleName
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} defaultRuleName Name of the default rule on the subscription.'
    syntax:
      content: 'defaultRuleName: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.getReceiver'
    name: getReceiver(MessageReceiverOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the Receiver to be used for receiving messages in batches or by
      registering handlers.
    syntax:
      content: 'function getReceiver(options?: MessageReceiverOptions)'
      parameters:
        - id: options
          type:
            - '@azure/service-bus.MessageReceiverOptions'
          description: |
            Options for creating the receiver.
          optional: true
      return:
        type:
          - '@azure/service-bus.Receiver'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.getRules'
    name: getRules()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the rules associated with the subscription
    syntax:
      content: function getRules()
      parameters: []
      return:
        type:
          - 'Promise<@azure/service-bus.RuleDescription[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.getSessionReceiver'
    name: getSessionReceiver(SessionReceiverOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the SessionReceiver for receiving messages in batches or by
      registering handlers from a

      session enabled Subscription. When no sessionId is given, a random session
      among the available

      sessions is used.
    syntax:
      content: 'function getSessionReceiver(options?: SessionReceiverOptions)'
      parameters:
        - id: options
          type:
            - '@azure/service-bus.SessionReceiverOptions'
          description: >
            Options to provide sessionId and ReceiveMode for receiving messages
            from the

            session enabled Servicebus Subscription.
          optional: true
      return:
        type:
          - Promise<@azure/service-bus.SessionReceiver>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.peek'
    name: peek(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Fetches the next batch of active messages (including deferred but not
      deadlettered messages).

      The first call to `peek()` fetches the first active message. Each
      subsequent call fetches the

      subsequent message.

      Unlike a `received` message, `peeked` message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it
      cannot be renewed.
    syntax:
      content: 'function peek(messageCount?: number)'
      parameters:
        - id: messageCount
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Peeks the desired number of active messages (including deferred but not
      deadlettered messages)

      from the specified sequence number.

      Unlike a `received` message, `peeked` message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it
      cannot be renewed.
    syntax:
      content: >-
        function peekBySequenceNumber(fromSequenceNumber: Long, messageCount?:
        number)
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: The sequence number from where to read the message.
        - id: messageCount
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.removeRule'
    name: removeRule(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Removes the rule on the subscription identified by the given rule name.
    syntax:
      content: 'function removeRule(ruleName: string)'
      parameters:
        - id: ruleName
          type:
            - string
          description: |+

      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.constructor'
    name: 'SubscriptionClient(string, string, ConnectionContext)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Constructor for SubscriptionClient.

      This is not meant for the user to call directly.

      The user should use the `createSubscriptionClient` on the Namespace
      instead.
    syntax:
      content: >-
        new SubscriptionClient(topicPath: string, subscriptionName: string,
        context: ConnectionContext)
      parameters:
        - id: topicPath
          type:
            - string
          description: The Topic path.
        - id: subscriptionName
          type:
            - string
          description: The Subscription name.
        - id: context
          type:
            - '@azure/service-bus.ConnectionContext'
          description: |
            The connection context to create the SubscriptionClient.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.subscriptionName'
    name: subscriptionName
    fullName: subscriptionName
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} subscriptionName The subscription name.'
    syntax:
      content: 'subscriptionName: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.topicPath'
    name: topicPath
    fullName: topicPath
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} topicPath The topic path.'
    syntax:
      content: 'topicPath: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.Client'
    name: Client
    spec.typeScript:
      - name: Client
        fullName: Client
        uid: '@azure/service-bus.Client'
  - uid: '@azure/service-bus.ConnectionContext'
    name: ConnectionContext
    spec.typeScript:
      - name: ConnectionContext
        fullName: ConnectionContext
        uid: '@azure/service-bus.ConnectionContext'
  - uid: boolean | string | @azure/service-bus.CorrelationFilter
    name: CorrelationFilter
    spec.typeScript:
      - name: 'boolean | string | '
        fullName: 'boolean | string | '
      - name: CorrelationFilter
        fullName: CorrelationFilter
        uid: '@azure/service-bus.CorrelationFilter'
  - uid: '@azure/service-bus.MessageReceiverOptions'
    name: MessageReceiverOptions
    spec.typeScript:
      - name: MessageReceiverOptions
        fullName: MessageReceiverOptions
        uid: '@azure/service-bus.MessageReceiverOptions'
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    spec.typeScript:
      - name: Receiver
        fullName: Receiver
        uid: '@azure/service-bus.Receiver'
  - uid: 'Promise<@azure/service-bus.RuleDescription[]>'
    name: 'RuleDescription[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: RuleDescription
        fullName: RuleDescription
        uid: '@azure/service-bus.RuleDescription'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.SessionReceiverOptions'
    name: SessionReceiverOptions
    spec.typeScript:
      - name: SessionReceiverOptions
        fullName: SessionReceiverOptions
        uid: '@azure/service-bus.SessionReceiverOptions'
  - uid: Promise<@azure/service-bus.SessionReceiver>
    name: SessionReceiver>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SessionReceiver
        fullName: SessionReceiver
        uid: '@azure/service-bus.SessionReceiver'
      - name: '>'
        fullName: '>'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
