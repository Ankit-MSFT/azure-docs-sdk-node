### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Namespace'
    name: Namespace
    fullName: Namespace
    children:
      - '@azure/service-bus.Namespace.close'
      - '@azure/service-bus.Namespace.createFromAadTokenCredentials'
      - '@azure/service-bus.Namespace.createFromConnectionString'
      - '@azure/service-bus.Namespace.createFromTokenProvider'
      - '@azure/service-bus.Namespace.createQueueClient'
      - '@azure/service-bus.Namespace.createSubscriptionClient'
      - '@azure/service-bus.Namespace.createTopicClient'
      - '@azure/service-bus.Namespace.getDeadLetterQueuePath'
      - '@azure/service-bus.Namespace.getDeadLetterTopicPath'
      - '@azure/service-bus.Namespace.name'
    langs:
      - typeScript
    type: class
    summary: >-
      Describes the Service Bus Namespace and is the entry point for using
      Queues, Topics and

      Subscriptions.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Namespace.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Closes the namespace, the AMQP connection and all the entities on this
      conenction.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<any>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Namespace.createFromAadTokenCredentials'
    name: >-
      createFromAadTokenCredentials(string, ApplicationTokenCredentials |
      UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials,
      NamespaceOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a Namespace from AADTokenCredentials.
    syntax:
      content: >-
        static function createFromAadTokenCredentials(host: string, credentials:
        ApplicationTokenCredentials | UserTokenCredentials |
        DeviceTokenCredentials | MSITokenCredentials, options?:
        NamespaceOptions)
      parameters:
        - id: host
          type:
            - string
          description: |-
            Fully qualified domain name for ServiceBus.
            Most likely, {yournamespace}.servicebus.windows.net
        - id: credentials
          type:
            - >-
              ApplicationTokenCredentials | UserTokenCredentials |
              DeviceTokenCredentials | MSITokenCredentials
          description: >-
            The AAD Token credentials.

            It can be one of the following: ApplicationTokenCredentials |
            UserTokenCredentials |

            DeviceTokenCredentials | MSITokenCredentials.
        - id: options
          type:
            - '@azure/service-bus.NamespaceOptions'
          description: The options that can be provided during namespace creation.
          optional: true
      return:
        type:
          - '@azure/service-bus.Namespace'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Namespace.createFromConnectionString'
    name: 'createFromConnectionString(string, NamespaceOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a Namespace from connection string.
    syntax:
      content: >-
        static function createFromConnectionString(connectionString: string,
        options?: NamespaceOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            Connection string of the form

            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'
        - id: options
          type:
            - '@azure/service-bus.NamespaceOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/service-bus.Namespace'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Namespace.createFromTokenProvider'
    name: 'createFromTokenProvider(string, TokenProvider, NamespaceOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a Namespace from a generic token provider.
    syntax:
      content: >-
        static function createFromTokenProvider(host: string, tokenProvider:
        TokenProvider, options?: NamespaceOptionsBase)
      parameters:
        - id: host
          type:
            - string
          description: |-
            Fully qualified domain name for Servicebus. Most likely,
            `<yournamespace>.servicebus.windows.net`.
        - id: tokenProvider
          type:
            - TokenProvider
          description: Your token provider that implements the TokenProvider interface.
        - id: options
          type:
            - '@azure/service-bus.NamespaceOptionsBase'
          description: The options that can be provided during namespace creation.
          optional: true
      return:
        type:
          - '@azure/service-bus.Namespace'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Namespace.createQueueClient'
    name: createQueueClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a QueueClient for the given Queue name. It assumes that the queue
      has already been

      created.
    syntax:
      content: 'function createQueueClient(queueName: string)'
      parameters:
        - id: queueName
          type:
            - string
          description: The queue name.
      return:
        type:
          - '@azure/service-bus.QueueClient'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Namespace.createSubscriptionClient'
    name: 'createSubscriptionClient(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a SubscriptionClient for the given topic name and subscription.
      It assumes that the topic has already been created.
    syntax:
      content: >-
        function createSubscriptionClient(topicName: string, subscriptionName:
        string)
      parameters:
        - id: topicName
          type:
            - string
          description: The topic name.
        - id: subscriptionName
          type:
            - string
          description: The subscription name.
      return:
        type:
          - '@azure/service-bus.SubscriptionClient'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Namespace.createTopicClient'
    name: createTopicClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a TopicClient for the given topic name. It assumes that the topic
      has already been

      created.
    syntax:
      content: 'function createTopicClient(topicName: string)'
      parameters:
        - id: topicName
          type:
            - string
          description: The topic name.
      return:
        type:
          - '@azure/service-bus.TopicClient'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Namespace.getDeadLetterQueuePath'
    name: getDeadLetterQueuePath(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the corresponding dead letter queue name for the given queue name.

      Use this in the `createQueueClient` function to receive messages from dead
      letter queue.
    syntax:
      content: 'static function getDeadLetterQueuePath(queueName: string)'
      parameters:
        - id: queueName
          type:
            - string
          description: |+

      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Namespace.getDeadLetterTopicPath'
    name: 'getDeadLetterTopicPath(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the corresponding dead letter topic name for the given topic and
      subscription names.

      Use this in the `createSubscriptionClient` function to receive messages
      from dead letter

      subscription corresponding to given subscription
    syntax:
      content: >-
        static function getDeadLetterTopicPath(topicName: string,
        subscriptionName: string)
      parameters:
        - id: topicName
          type:
            - string
          description: ''
        - id: subscriptionName
          type:
            - string
          description: |+

      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Namespace.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} name The namespace name of the service bus.'
    syntax:
      content: 'name: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.QueueClient'
    name: QueueClient
    spec.typeScript:
      - name: QueueClient
        fullName: QueueClient
        uid: '@azure/service-bus.QueueClient'
  - uid: '@azure/service-bus.SubscriptionClient'
    name: SubscriptionClient
    spec.typeScript:
      - name: SubscriptionClient
        fullName: SubscriptionClient
        uid: '@azure/service-bus.SubscriptionClient'
  - uid: '@azure/service-bus.TopicClient'
    name: TopicClient
    spec.typeScript:
      - name: TopicClient
        fullName: TopicClient
        uid: '@azure/service-bus.TopicClient'
  - uid: '@azure/service-bus.NamespaceOptions'
    name: NamespaceOptions
    spec.typeScript:
      - name: NamespaceOptions
        fullName: NamespaceOptions
        uid: '@azure/service-bus.NamespaceOptions'
  - uid: '@azure/service-bus.Namespace'
    name: Namespace
    spec.typeScript:
      - name: Namespace
        fullName: Namespace
        uid: '@azure/service-bus.Namespace'
  - uid: '@azure/service-bus.NamespaceOptionsBase'
    name: NamespaceOptionsBase
    spec.typeScript:
      - name: NamespaceOptionsBase
        fullName: NamespaceOptionsBase
        uid: '@azure/service-bus.NamespaceOptionsBase'
