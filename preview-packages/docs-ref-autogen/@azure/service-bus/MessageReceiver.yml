### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.MessageReceiver'
    name: MessageReceiver
    fullName: MessageReceiver
    children:
      - '@azure/service-bus.MessageReceiver.autoComplete'
      - '@azure/service-bus.MessageReceiver.autoRenewLock'
      - '@azure/service-bus.MessageReceiver.close'
      - '@azure/service-bus.MessageReceiver.maxAutoRenewDurationInSeconds'
      - '@azure/service-bus.MessageReceiver.maxConcurrentCalls'
      - '@azure/service-bus.MessageReceiver.constructor'
      - '@azure/service-bus.MessageReceiver.newMessageWaitTimeoutInSeconds'
      - '@azure/service-bus.MessageReceiver.receiveMode'
      - '@azure/service-bus.MessageReceiver.receiverType'
      - '@azure/service-bus.MessageReceiver.settleMessage'
    langs:
      - typeScript
    type: class
    summary: Describes the MessageReceiver that will receive messages from ServiceBus.
    extends:
      name: '@azure/service-bus.LinkEntity'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageReceiver.autoComplete'
    name: autoComplete
    fullName: autoComplete
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {boolean} autoComplete Indicates whether `Message.complete()` should be
      called

      automatically after the message processing is complete while receiving
      messages with handlers

      or while messages are received using receiveBatch(). Default: false.
    syntax:
      content: 'autoComplete: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageReceiver.autoRenewLock'
    name: autoRenewLock
    fullName: autoRenewLock
    children: []
    langs:
      - typeScript
    type: property
    summary: '{boolean} autoRenewLock Should lock renewal happen automatically.'
    syntax:
      content: 'autoRenewLock: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageReceiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: Closes the underlying AMQP receiver.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageReceiver.maxAutoRenewDurationInSeconds'
    name: maxAutoRenewDurationInSeconds
    fullName: maxAutoRenewDurationInSeconds
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {number} maxAutoRenewDurationInSeconds The maximum duration within which
      the

      lock will be renewed automatically. This value should be greater than the
      longest message

      lock duration; for example, the `lockDuration` property on the received
      message.


      Default: `300` (5 minutes);
    syntax:
      content: 'maxAutoRenewDurationInSeconds: number'
      return:
        type:
          - number
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageReceiver.maxConcurrentCalls'
    name: maxConcurrentCalls
    fullName: maxConcurrentCalls
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {number} [maxConcurrentCalls] The maximum number of messages that should
      be

      processed concurrently while in peek lock mode. Once this limit has been
      reached, more

      messages will not be received until messages currently being processed
      have been settled.

      Default: 1
    optional: true
    syntax:
      content: 'maxConcurrentCalls?: number'
      return:
        type:
          - number
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageReceiver.constructor'
    name: 'MessageReceiver(ClientEntityContext, ReceiverType, ReceiveOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new MessageReceiver(context: ClientEntityContext, receiverType:
        ReceiverType, options?: ReceiveOptions)
      parameters:
        - id: context
          type:
            - ClientEntityContext
          description: ''
        - id: receiverType
          type:
            - ReceiverType
          description: ''
        - id: options
          type:
            - ReceiveOptions
          description: ''
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageReceiver.newMessageWaitTimeoutInSeconds'
    name: newMessageWaitTimeoutInSeconds
    fullName: newMessageWaitTimeoutInSeconds
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {number} [newMessageWaitTimeoutInSeconds] The maximum amount of idle time
      the

      receiver will wait after a message has been received. If no messages are
      received by this

      time then the receive operation will end.
    optional: true
    syntax:
      content: 'newMessageWaitTimeoutInSeconds?: number'
      return:
        type:
          - number
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageReceiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {number} [receiveMode] The mode in which messages should be received.
      Default: ReceiveMode.peekLock
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageReceiver.receiverType'
    name: receiverType
    fullName: receiverType
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} receiverType The type of receiver: "batching" or "streaming".'
    syntax:
      content: 'receiverType: ReceiverType'
      return:
        type:
          - ReceiverType
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.MessageReceiver.settleMessage'
    name: 'settleMessage(ServiceBusMessage, DispositionType, DispositionOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Settles the message with the specified disposition.
    syntax:
      content: >-
        function settleMessage(message: ServiceBusMessage, operation:
        DispositionType, options?: DispositionOptions)
      parameters:
        - id: message
          type:
            - '@azure/service-bus.ServiceBusMessage'
          description: The ServiceBus Message that needs to be settled.
        - id: operation
          type:
            - DispositionType
          description: The disposition type.
        - id: options
          type:
            - DispositionOptions
          description: >
            Optional parameters that can be provided while disposing the
            message.
          optional: true
      return:
        type:
          - Promise<any>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.LinkEntity'
    name: LinkEntity
    spec.typeScript:
      - name: LinkEntity
        fullName: LinkEntity
        uid: '@azure/service-bus.LinkEntity'
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: '@azure/service-bus.ServiceBusMessage'
    name: ServiceBusMessage
    spec.typeScript:
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
