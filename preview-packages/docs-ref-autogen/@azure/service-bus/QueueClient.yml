### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.QueueClient'
    name: QueueClient
    fullName: QueueClient
    children:
      - '@azure/service-bus.QueueClient.close'
      - '@azure/service-bus.QueueClient.getReceiver'
      - '@azure/service-bus.QueueClient.getSender'
      - '@azure/service-bus.QueueClient.getSessionReceiver'
      - '@azure/service-bus.QueueClient.peek'
      - '@azure/service-bus.QueueClient.peekBySequenceNumber'
    langs:
      - typeScript
    type: class
    summary: >-
      Describes the client that will maintain an AMQP connection to a ServiceBus
      Queue.
    extends:
      name: '@azure/service-bus.Client'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: Closes the AMQP connection to the ServiceBus Queue for this client.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.getReceiver'
    name: getReceiver(MessageReceiverOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the Receiver to be used for receiving messages in batches or by
      registering handlers.
    syntax:
      content: 'function getReceiver(options?: MessageReceiverOptions)'
      parameters:
        - id: options
          type:
            - '@azure/service-bus.MessageReceiverOptions'
          description: |
            Options for creating the receiver.
          optional: true
      return:
        type:
          - '@azure/service-bus.Receiver'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.getSender'
    name: getSender()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the Sender to be used for sending messages, scheduling messages to be
      sent at a later time

      and cancelling such scheduled messages.
    syntax:
      content: function getSender()
      parameters: []
      return:
        type:
          - '@azure/service-bus.Sender'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.getSessionReceiver'
    name: getSessionReceiver(SessionReceiverOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the SessionReceiver for receiving messages in batches or by
      registering handlers from a

      session enabled Queue. When no sessionId is given, a random session among
      the available

      sessions is used.
    syntax:
      content: 'function getSessionReceiver(options?: SessionReceiverOptions)'
      parameters:
        - id: options
          type:
            - '@azure/service-bus.SessionReceiverOptions'
          description: >
            Options to provide sessionId and ReceiveMode for receiving messages
            from the

            session enabled Servicebus Queue.
          optional: true
      return:
        type:
          - Promise<@azure/service-bus.SessionReceiver>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.peek'
    name: peek(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Fetches the next batch of active messages (including deferred but not
      deadlettered messages).

      The first call to `peek()` fetches the first active message. Each
      subsequent call fetches the

      subsequent message.

      Unlike a `received` message, `peeked` message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it
      cannot be renewed.
    syntax:
      content: 'function peek(messageCount?: number)'
      parameters:
        - id: messageCount
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.QueueClient.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Peeks the desired number of active messages (including deferred but not
      deadlettered messages)

      from the specified sequence number.

      Unlike a `received` message, `peeked` message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it
      cannot be renewed.
    syntax:
      content: >-
        function peekBySequenceNumber(fromSequenceNumber: Long, messageCount?:
        number)
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: The sequence number from where to read the message.
        - id: messageCount
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.Client'
    name: Client
    spec.typeScript:
      - name: Client
        fullName: Client
        uid: '@azure/service-bus.Client'
  - uid: '@azure/service-bus.MessageReceiverOptions'
    name: MessageReceiverOptions
    spec.typeScript:
      - name: MessageReceiverOptions
        fullName: MessageReceiverOptions
        uid: '@azure/service-bus.MessageReceiverOptions'
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    spec.typeScript:
      - name: Receiver
        fullName: Receiver
        uid: '@azure/service-bus.Receiver'
  - uid: '@azure/service-bus.Sender'
    name: Sender
    spec.typeScript:
      - name: Sender
        fullName: Sender
        uid: '@azure/service-bus.Sender'
  - uid: '@azure/service-bus.SessionReceiverOptions'
    name: SessionReceiverOptions
    spec.typeScript:
      - name: SessionReceiverOptions
        fullName: SessionReceiverOptions
        uid: '@azure/service-bus.SessionReceiverOptions'
  - uid: Promise<@azure/service-bus.SessionReceiver>
    name: SessionReceiver>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SessionReceiver
        fullName: SessionReceiver
        uid: '@azure/service-bus.SessionReceiver'
      - name: '>'
        fullName: '>'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
