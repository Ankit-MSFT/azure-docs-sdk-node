### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.SessionReceiver'
    name: SessionReceiver
    fullName: SessionReceiver
    children:
      - '@azure/service-bus.SessionReceiver.close'
      - '@azure/service-bus.SessionReceiver.getState'
      - '@azure/service-bus.SessionReceiver.isOpen'
      - '@azure/service-bus.SessionReceiver.peek'
      - '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
      - '@azure/service-bus.SessionReceiver.receive'
      - '@azure/service-bus.SessionReceiver.receiveBatch'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
      - '@azure/service-bus.SessionReceiver.renewLock'
      - '@azure/service-bus.SessionReceiver.sessionId'
      - '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
      - '@azure/service-bus.SessionReceiver.constructor'
      - '@azure/service-bus.SessionReceiver.setState'
    langs:
      - typeScript
    type: class
    summary: >-
      An abstraction over the underlying session-receiver.

      The SessionReceiver class can be used to receive messages in a batch or by
      registering handlers.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: Closes the underlying AMQP receiver link.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getState'
    name: getState()
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the state of the MessageSession.
    syntax:
      content: function getState()
      parameters: []
      return:
        type:
          - Promise<any>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isOpen'
    name: isOpen()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Determines whether the underlying AMQP receiver link is open.

      When this is true, a new Session Receiver with the same session id cannot
      be created successfully.
    syntax:
      content: function isOpen()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peek'
    name: peek(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Fetches the next batch of active messages (including deferred but not
      deadlettered messages) in

      the current session. The first call to `peek()` fetches the first active
      message. Each

      subsequent call fetches the subsequent message.

      Unlike a `received` message, `peeked` message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it
      cannot be renewed.
    syntax:
      content: 'function peek(messageCount?: number)'
      parameters:
        - id: messageCount
          type:
            - number
          description: The number of messages to retrieve. Default value `1`.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Peeks the desired number of active messages (including deferred but not
      deadlettered messages)

      from the specified sequence number in the current session.

      Unlike a `received` message, `peeked` message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it
      cannot be renewed.
    syntax:
      content: >-
        function peekBySequenceNumber(fromSequenceNumber: Long, messageCount?:
        number)
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: The sequence number from where to read the message.
        - id: messageCount
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receive'
    name: 'receive(OnMessage, OnError, SessionMessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers handlers to deal with the incoming stream of messages over an
      AMQP receiver link

      from a Queue/Subscription.

      To stop receiving messages, call `close()` on the SessionReceiver or set
      the property

      `newMessageWaitTimeoutInSeconds` in the options to provide a timeout.
    syntax:
      content: >-
        function receive(onMessage: OnMessage, onError: OnError, options?:
        SessionMessageHandlerOptions)
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: Handler for processing each incoming message.
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: >-
            Handler for any error that occurs while receiving or processing
            messages.
        - id: options
          type:
            - '@azure/service-bus.SessionMessageHandlerOptions'
          description: >
            Options to control whether messages should be automatically
            completed. You can

            also provide a timeout in seconds to denote the amount of time to
            wait for a new message

            before closing the receiver.
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveBatch'
    name: 'receiveBatch(number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a batch of messages based on given count and timeout over an AMQP
      receiver link

      from a Queue/Subscription.
    syntax:
      content: >-
        function receiveBatch(maxMessageCount: number, maxWaitTimeInSeconds?:
        number)
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: The maximum number of messages to receive from Queue/Subscription.
        - id: maxWaitTimeInSeconds
          type:
            - number
          description: >-
            The maximum wait time in seconds for which the Receiver

            should wait to receive the first message. If no message is received
            by this time,

            the returned promise gets resolved to an empty array.

            - **Default**: `60` seconds.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: Receives a deferred message identified by the given `sequenceNumber`.
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: The sequence number of the message that will be received.
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Receives a list of deferred messages identified by given
      `sequenceNumbers`.
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: A list containing the sequence numbers to receive.
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.renewLock'
    name: renewLock()
    children: []
    type: method
    langs:
      - typeScript
    summary: Renews the lock for the Session.
    syntax:
      content: function renewLock()
      parameters: []
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionId'
    name: sessionId
    fullName: sessionId
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} [sessionId] The sessionId for the message session.'
    syntax:
      content: 'sessionId: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
    name: sessionLockedUntilUtc
    fullName: sessionLockedUntilUtc
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {Date} [sessionLockedUntilUtc] The time in UTC until which the session is
      locked.
    syntax:
      content: 'sessionLockedUntilUtc: Date | undefined'
      return:
        type:
          - Date | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.constructor'
    name: 'SessionReceiver(ClientEntityContext, MessageSession)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new SessionReceiver(context: ClientEntityContext, messageSession:
        MessageSession)
      parameters:
        - id: context
          type:
            - ClientEntityContext
          description: ''
        - id: messageSession
          type:
            - '@azure/service-bus.MessageSession'
          description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.setState'
    name: setState(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the state of the MessageSession.
    syntax:
      content: 'function setState(state: any)'
      parameters:
        - id: state
          type:
            - any
          description: |
            The state that needs to be set.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.MessageSession'
    name: MessageSession
    spec.typeScript:
      - name: MessageSession
        fullName: MessageSession
        uid: '@azure/service-bus.MessageSession'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.SessionMessageHandlerOptions'
    name: SessionMessageHandlerOptions
    spec.typeScript:
      - name: SessionMessageHandlerOptions
        fullName: SessionMessageHandlerOptions
        uid: '@azure/service-bus.SessionMessageHandlerOptions'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
