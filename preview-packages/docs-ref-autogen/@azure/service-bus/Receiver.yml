### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    fullName: Receiver
    children:
      - '@azure/service-bus.Receiver.close'
      - '@azure/service-bus.Receiver.isActive'
      - '@azure/service-bus.Receiver.receive'
      - '@azure/service-bus.Receiver.receiveBatch'
      - '@azure/service-bus.Receiver.receiveDeferredMessage'
      - '@azure/service-bus.Receiver.receiveDeferredMessages'
      - '@azure/service-bus.Receiver.constructor'
      - '@azure/service-bus.Receiver.renewLock'
    langs:
      - typeScript
    type: class
    summary: >-
      An abstraction over the underlying receiver link.

      The Receiver class can be used to receive messages in a batch or by
      registering handlers.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: Closes the underlying AMQP receiver link.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isActive'
    name: isActive()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Indicates whether the underlying receiver link is open or not.

      When this is true, a new receive() or receiveBatch() call cannot be made
      on the receiver.
    syntax:
      content: function isActive()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receive'
    name: 'receive(OnMessage, OnError, MessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers handlers to deal with the incoming stream of messages over an
      AMQP receiver link

      from a Queue/Subscription.

      To stop receiving messages, call `close()` on the Receiver or set the
      property

      `newMessageWaitTimeoutInSeconds` in the options to provide a timeout.
    syntax:
      content: >-
        function receive(onMessage: OnMessage, onError: OnError, options?:
        MessageHandlerOptions)
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: Handler for processing each incoming message.
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: >-
            Handler for any error that occurs while receiving or processing
            messages.
        - id: options
          type:
            - '@azure/service-bus.MessageHandlerOptions'
          description: >
            Options to control whether messages should be automatically
            completed and/or

            automatically have their locks renewed. You can also provide a
            timeout in seconds to denote the

            amount of time to wait for a new message before closing the
            receiver.
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveBatch'
    name: 'receiveBatch(number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a batch of messages based on given count and timeout over an AMQP
      receiver link

      from a Queue/Subscription.
    syntax:
      content: >-
        function receiveBatch(maxMessageCount: number, idleTimeoutInSeconds?:
        number)
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: The maximum number of messages to receive from Queue/Subscription.
        - id: idleTimeoutInSeconds
          type:
            - number
          description: >-
            The maximum wait time in seconds for which the Receiver

            should wait to receive the first message. If no message is received
            by this time,

            the returned promise gets resolved to an empty array.

            - **Default**: `60` seconds.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: Receives a deferred message identified by the given `sequenceNumber`.
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: The sequence number of the message that will be received.
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Receives a list of deferred messages identified by given
      `sequenceNumbers`.
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: A list containing the sequence numbers to receive.
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.constructor'
    name: 'Receiver(ClientEntityContext, MessageReceiverOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new Receiver(context: ClientEntityContext, options?:
        MessageReceiverOptions)
      parameters:
        - id: context
          type:
            - ClientEntityContext
          description: ''
        - id: options
          type:
            - '@azure/service-bus.MessageReceiverOptions'
          description: ''
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.renewLock'
    name: renewLock(string | ServiceBusMessage)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Renews the lock on the message.

      When a message is received in `PeekLock` mode, the message is locked on
      the server for this

      receiver instance for a duration as specified during the
      Queue/Subscription creation

      (LockDuration). If processing of the message requires longer than this
      duration, the

      lock needs to be renewed. For each renewal, it resets the time the message
      is locked by the

      LockDuration set on the Entity.
    syntax:
      content: 'function renewLock(lockTokenOrMessage: string | ServiceBusMessage)'
      parameters:
        - id: lockTokenOrMessage
          type:
            - string | @azure/service-bus.ServiceBusMessage
          description: Lock token of the message or the message itself.
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.MessageReceiverOptions'
    name: MessageReceiverOptions
    spec.typeScript:
      - name: MessageReceiverOptions
        fullName: MessageReceiverOptions
        uid: '@azure/service-bus.MessageReceiverOptions'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.MessageHandlerOptions'
    name: MessageHandlerOptions
    spec.typeScript:
      - name: MessageHandlerOptions
        fullName: MessageHandlerOptions
        uid: '@azure/service-bus.MessageHandlerOptions'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: string | @azure/service-bus.ServiceBusMessage
    name: ServiceBusMessage
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
