### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.ServiceBusSessionReceiver'
    name: ServiceBusSessionReceiver
    fullName: ServiceBusSessionReceiver<ReceivedMessageT>
    children:
      - '@azure/service-bus.ServiceBusSessionReceiver.close'
      - '@azure/service-bus.ServiceBusSessionReceiver.entityPath'
      - '@azure/service-bus.ServiceBusSessionReceiver.getMessageIterator'
      - '@azure/service-bus.ServiceBusSessionReceiver.getSessionState'
      - '@azure/service-bus.ServiceBusSessionReceiver.isClosed'
      - '@azure/service-bus.ServiceBusSessionReceiver.peekMessages'
      - '@azure/service-bus.ServiceBusSessionReceiver.receiveDeferredMessages'
      - '@azure/service-bus.ServiceBusSessionReceiver.receiveMessages'
      - '@azure/service-bus.ServiceBusSessionReceiver.receiveMode'
      - '@azure/service-bus.ServiceBusSessionReceiver.renewSessionLock'
      - '@azure/service-bus.ServiceBusSessionReceiver.sessionId'
      - '@azure/service-bus.ServiceBusSessionReceiver.sessionLockedUntilUtc'
      - '@azure/service-bus.ServiceBusSessionReceiver.setSessionState'
      - '@azure/service-bus.ServiceBusSessionReceiver.subscribe'
    langs:
      - typeScript
    type: interface
    summary: 'A receiver that handles sessions, including renewing the session lock.'
    extends:
      name: '@azure/service-bus.ServiceBusReceiver<ReceivedMessageT>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Closes the receiver.

      Once closed, the receiver cannot be used for any further operations.

      Use the `createReceiver()` method on the ServiceBusClient to create a new
      Receiver.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.entityPath'
    name: entityPath
    fullName: entityPath
    children: []
    langs:
      - typeScript
    type: property
    summary: Path of the entity for which the receiver has been created.
    syntax:
      content: 'entityPath: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.getMessageIterator'
    name: getMessageIterator(GetMessageIteratorOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns an iterator that can be used to receive messages from Service Bus.

      If the iterator is not able to fetch a new message in over a minute,
      `undefined` will be returned.
    syntax:
      content: 'function getMessageIterator(options?: GetMessageIteratorOptions)'
      parameters:
        - id: options
          type:
            - '@azure/service-bus.GetMessageIteratorOptions'
          description: >
            A set of options to control the receive operation.

            - `maxWaitTimeInMs`: The time to wait to receive the message in each
            iteration.

            - `abortSignal`: The signal to use to abort the ongoing operation.
          optional: true
      return:
        type:
          - AsyncIterableIterator<ReceivedMessageT>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.getSessionState'
    name: getSessionState(OperationOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the state of the Session. For more on session states, see

      [Session
      State](https://docs.microsoft.com/azure/service-bus-messaging/message-sessions#message-session-state)
    syntax:
      content: 'function getSessionState(options?: OperationOptionsBase)'
      parameters:
        - id: options
          type:
            - '@azure/service-bus.OperationOptionsBase'
          description: Options bag to pass an abort signal or tracing options.
          optional: true
      return:
        type:
          - Promise<any>
        description: The state of that session
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Returns `true` if either the receiver or the client that created it has
      been closed
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.peekMessages'
    name: 'peekMessages(number, PeekMessagesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Peek the next batch of active messages (including deferred but not
      deadlettered messages) on the

      queue or subscription without modifying them.

      - The first call to `peekMessages()` fetches the first active message.
      Each subsequent call fetches the

      subsequent message.

      - Unlike a "received" message, "peeked" message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`.
    syntax:
      content: >-
        function peekMessages(maxMessageCount: number, options?:
        PeekMessagesOptions)
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: The maximum number of messages to peek.
        - id: options
          type:
            - '@azure/service-bus.PeekMessagesOptions'
          description: >
            Options that allow to specify the maximum number of messages to
            peek,

            the sequenceNumber to start peeking from or an abortSignal to abort
            the operation.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusReceivedMessage[]>'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long | Long[], OperationOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a promise that resolves to an array of deferred messages
      identified by given `sequenceNumbers`.
    syntax:
      content: >-
        function receiveDeferredMessages(sequenceNumbers: Long | Long[],
        options?: OperationOptionsBase)
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long | Long[]'
          description: >-
            The sequence number or an array of sequence numbers for the messages
            that need to be received.
        - id: options
          type:
            - '@azure/service-bus.OperationOptionsBase'
          description: Options bag to pass an abort signal or tracing options.
          optional: true
      return:
        type:
          - 'Promise<ReceivedMessageT[]>'
        description: |-
          - Returns a list of messages identified by the given sequenceNumbers.
          - Returns an empty list if no messages are found.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.receiveMessages'
    name: 'receiveMessages(number, ReceiveMessagesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a promise that resolves to an array of messages received from
      Service Bus.
    syntax:
      content: >-
        function receiveMessages(maxMessageCount: number, options?:
        ReceiveMessagesOptions)
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: The maximum number of messages to receive.
        - id: options
          type:
            - '@azure/service-bus.ReceiveMessagesOptions'
          description: >-
            A set of options to control the receive operation.

            - `maxWaitTimeInMs`: The maximum time to wait for the first message
            before returning an empty array if no messages are available.

            - `abortSignal`: The signal to use to abort the ongoing operation.
          optional: true
      return:
        type:
          - 'Promise<ReceivedMessageT[]>'
        description: >-
          Promise<ReceivedMessageT[]> A promise that resolves with an array of
          messages.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: ReceiveMode provided to the client.
    syntax:
      content: 'receiveMode: "peekLock" | "receiveAndDelete"'
      return:
        type:
          - '"peekLock" | "receiveAndDelete"'
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.renewSessionLock'
    name: renewSessionLock(OperationOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Renews the lock on the session.
    syntax:
      content: 'function renewSessionLock(options?: OperationOptionsBase)'
      parameters:
        - id: options
          type:
            - '@azure/service-bus.OperationOptionsBase'
          description: ''
          optional: true
      return:
        type:
          - Promise<Date>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.sessionId'
    name: sessionId
    fullName: sessionId
    children: []
    langs:
      - typeScript
    type: property
    summary: The session ID.
    syntax:
      content: 'sessionId: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.sessionLockedUntilUtc'
    name: sessionLockedUntilUtc
    fullName: sessionLockedUntilUtc
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The time in UTC until which the session is locked.

      Every time `renewSessionLock()` is called, this time gets updated to
      current time plus the lock

      duration as specified during the Queue/Subscription creation.


      Will return undefined until a AMQP receiver link has been successfully set
      up for the session.
    syntax:
      content: 'sessionLockedUntilUtc: Date'
      return:
        type:
          - Date
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.setSessionState'
    name: 'setSessionState(any, OperationOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the state on the Session. For more on session states, see

      [Session
      State](https://docs.microsoft.com/azure/service-bus-messaging/message-sessions#message-session-state)
    syntax:
      content: 'function setSessionState(state: any, options?: OperationOptionsBase)'
      parameters:
        - id: state
          type:
            - any
          description: ''
        - id: options
          type:
            - '@azure/service-bus.OperationOptionsBase'
          description: Options bag to pass an abort signal or tracing options.
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.ServiceBusSessionReceiver.subscribe'
    name: 'subscribe(MessageHandlers<ReceivedMessageT>, SessionSubscribeOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Streams messages to message handlers.
    syntax:
      content: >-
        function subscribe(handlers: MessageHandlers<ReceivedMessageT>,
        options?: SessionSubscribeOptions)
      parameters:
        - id: handlers
          type:
            - '@azure/service-bus.MessageHandlers<ReceivedMessageT>'
          description: A handler that gets called for messages and errors.
        - id: options
          type:
            - '@azure/service-bus.SessionSubscribeOptions'
          description: Options for subscribe.
          optional: true
      return:
        type:
          - Object
        description: >-
          An object that can be closed, sending any remaining messages to
          `handlers` and

          stopping new messages from arriving.
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ServiceBusReceiver<ReceivedMessageT>'
    name: ServiceBusReceiver<ReceivedMessageT>
    spec.typeScript:
      - name: ServiceBusReceiver
        fullName: ServiceBusReceiver
        uid: '@azure/service-bus.ServiceBusReceiver'
      - name: <ReceivedMessageT>
        fullName: <ReceivedMessageT>
  - uid: '@azure/service-bus.GetMessageIteratorOptions'
    name: GetMessageIteratorOptions
    spec.typeScript:
      - name: GetMessageIteratorOptions
        fullName: GetMessageIteratorOptions
        uid: '@azure/service-bus.GetMessageIteratorOptions'
  - uid: '@azure/service-bus.OperationOptionsBase'
    name: OperationOptionsBase
    spec.typeScript:
      - name: OperationOptionsBase
        fullName: OperationOptionsBase
        uid: '@azure/service-bus.OperationOptionsBase'
  - uid: '@azure/service-bus.PeekMessagesOptions'
    name: PeekMessagesOptions
    spec.typeScript:
      - name: PeekMessagesOptions
        fullName: PeekMessagesOptions
        uid: '@azure/service-bus.PeekMessagesOptions'
  - uid: 'Promise<@azure/service-bus.ServiceBusReceivedMessage[]>'
    name: 'ServiceBusReceivedMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusReceivedMessage
        fullName: ServiceBusReceivedMessage
        uid: '@azure/service-bus.ServiceBusReceivedMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.ReceiveMessagesOptions'
    name: ReceiveMessagesOptions
    spec.typeScript:
      - name: ReceiveMessagesOptions
        fullName: ReceiveMessagesOptions
        uid: '@azure/service-bus.ReceiveMessagesOptions'
  - uid: '@azure/service-bus.MessageHandlers<ReceivedMessageT>'
    name: MessageHandlers<ReceivedMessageT>
    spec.typeScript:
      - name: MessageHandlers
        fullName: MessageHandlers
        uid: '@azure/service-bus.MessageHandlers'
      - name: <ReceivedMessageT>
        fullName: <ReceivedMessageT>
  - uid: '@azure/service-bus.SessionSubscribeOptions'
    name: SessionSubscribeOptions
    spec.typeScript:
      - name: SessionSubscribeOptions
        fullName: SessionSubscribeOptions
        uid: '@azure/service-bus.SessionSubscribeOptions'
